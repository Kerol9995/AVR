
MG12232.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000025a  00800100  00001e32  00001ec6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001e32  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000a2  0080035a  0080035a  00002120  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00002120  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000217c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000180  00000000  00000000  000021bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000022c5  00000000  00000000  0000233c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000cc8  00000000  00000000  00004601  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000012ef  00000000  00000000  000052c9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000004e8  00000000  00000000  000065b8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006d4  00000000  00000000  00006aa0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000240d  00000000  00000000  00007174  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000138  00000000  00000000  00009581  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 10 01 	jmp	0x220	; 0x220 <__ctors_end>
       4:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
       8:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
       c:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
      10:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
      14:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
      18:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
      1c:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
      20:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
      24:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
      28:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
      2c:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
      30:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
      34:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
      38:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
      3c:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
      40:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
      44:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
      48:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
      4c:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
      50:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
      54:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__vector_21>
      58:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
      5c:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
      60:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
      64:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
      68:	33 08       	sbc	r3, r3
      6a:	41 08       	sbc	r4, r1
      6c:	41 08       	sbc	r4, r1
      6e:	41 08       	sbc	r4, r1
      70:	41 08       	sbc	r4, r1
      72:	41 08       	sbc	r4, r1
      74:	41 08       	sbc	r4, r1
      76:	41 08       	sbc	r4, r1
      78:	41 08       	sbc	r4, r1
      7a:	41 08       	sbc	r4, r1
      7c:	41 08       	sbc	r4, r1
      7e:	3d 08       	sbc	r3, r13
      80:	41 08       	sbc	r4, r1
      82:	38 08       	sbc	r3, r8
      84:	2e 08       	sbc	r2, r14
      86:	41 08       	sbc	r4, r1
      88:	f3 06       	cpc	r15, r19
      8a:	f8 06       	cpc	r15, r24
      8c:	fd 06       	cpc	r15, r29
      8e:	02 07       	cpc	r16, r18
      90:	07 07       	cpc	r16, r23
      92:	0c 07       	cpc	r16, r28
      94:	11 07       	cpc	r17, r17
      96:	16 07       	cpc	r17, r22
      98:	1b 07       	cpc	r17, r27
      9a:	20 07       	cpc	r18, r16
      9c:	41 08       	sbc	r4, r1
      9e:	41 08       	sbc	r4, r1
      a0:	41 08       	sbc	r4, r1
      a2:	25 07       	cpc	r18, r21
      a4:	41 08       	sbc	r4, r1
      a6:	41 08       	sbc	r4, r1
      a8:	41 08       	sbc	r4, r1
      aa:	2a 07       	cpc	r18, r26
      ac:	2f 07       	cpc	r18, r31
      ae:	34 07       	cpc	r19, r20
      b0:	39 07       	cpc	r19, r25
      b2:	3e 07       	cpc	r19, r30
      b4:	43 07       	cpc	r20, r19
      b6:	48 07       	cpc	r20, r24
      b8:	4d 07       	cpc	r20, r29
      ba:	52 07       	cpc	r21, r18
      bc:	57 07       	cpc	r21, r23
      be:	5c 07       	cpc	r21, r28
      c0:	61 07       	cpc	r22, r17
      c2:	66 07       	cpc	r22, r22
      c4:	6b 07       	cpc	r22, r27
      c6:	70 07       	cpc	r23, r16
      c8:	75 07       	cpc	r23, r21
      ca:	7a 07       	cpc	r23, r26
      cc:	7f 07       	cpc	r23, r31
      ce:	84 07       	cpc	r24, r20
      d0:	89 07       	cpc	r24, r25
      d2:	8e 07       	cpc	r24, r30
      d4:	93 07       	cpc	r25, r19
      d6:	98 07       	cpc	r25, r24
      d8:	9d 07       	cpc	r25, r29
      da:	a2 07       	cpc	r26, r18
      dc:	a7 07       	cpc	r26, r23
      de:	41 08       	sbc	r4, r1
      e0:	41 08       	sbc	r4, r1
      e2:	41 08       	sbc	r4, r1
      e4:	41 08       	sbc	r4, r1
      e6:	41 08       	sbc	r4, r1
      e8:	41 08       	sbc	r4, r1
      ea:	ac 07       	cpc	r26, r28
      ec:	b1 07       	cpc	r27, r17
      ee:	b6 07       	cpc	r27, r22
      f0:	bb 07       	cpc	r27, r27
      f2:	c0 07       	cpc	r28, r16
      f4:	c5 07       	cpc	r28, r21
      f6:	ca 07       	cpc	r28, r26
      f8:	cf 07       	cpc	r28, r31
      fa:	d4 07       	cpc	r29, r20
      fc:	d9 07       	cpc	r29, r25
      fe:	de 07       	cpc	r29, r30
     100:	e3 07       	cpc	r30, r19
     102:	e8 07       	cpc	r30, r24
     104:	ed 07       	cpc	r30, r29
     106:	f2 07       	cpc	r31, r18
     108:	f7 07       	cpc	r31, r23
     10a:	fc 07       	cpc	r31, r28
     10c:	01 08       	sbc	r0, r1
     10e:	06 08       	sbc	r0, r6
     110:	0b 08       	sbc	r0, r11
     112:	10 08       	sbc	r1, r0
     114:	15 08       	sbc	r1, r5
     116:	1a 08       	sbc	r1, r10
     118:	1f 08       	sbc	r1, r15
     11a:	24 08       	sbc	r2, r4
     11c:	29 08       	sbc	r2, r9

0000011e <__trampolines_end>:
     11e:	6e 61       	ori	r22, 0x1E	; 30
     120:	6e 00       	.word	0x006e	; ????

00000122 <__c.2332>:
     122:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     132:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     142:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     152:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     162:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     172:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     182:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     192:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     1a2:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     1b2:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     1c2:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     1d2:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     1e2:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     1f2:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     202:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     212:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

00000220 <__ctors_end>:
     220:	11 24       	eor	r1, r1
     222:	1f be       	out	0x3f, r1	; 63
     224:	cf ef       	ldi	r28, 0xFF	; 255
     226:	d8 e0       	ldi	r29, 0x08	; 8
     228:	de bf       	out	0x3e, r29	; 62
     22a:	cd bf       	out	0x3d, r28	; 61

0000022c <__do_copy_data>:
     22c:	13 e0       	ldi	r17, 0x03	; 3
     22e:	a0 e0       	ldi	r26, 0x00	; 0
     230:	b1 e0       	ldi	r27, 0x01	; 1
     232:	e2 e3       	ldi	r30, 0x32	; 50
     234:	fe e1       	ldi	r31, 0x1E	; 30
     236:	02 c0       	rjmp	.+4      	; 0x23c <__do_copy_data+0x10>
     238:	05 90       	lpm	r0, Z+
     23a:	0d 92       	st	X+, r0
     23c:	aa 35       	cpi	r26, 0x5A	; 90
     23e:	b1 07       	cpc	r27, r17
     240:	d9 f7       	brne	.-10     	; 0x238 <__do_copy_data+0xc>

00000242 <__do_clear_bss>:
     242:	23 e0       	ldi	r18, 0x03	; 3
     244:	aa e5       	ldi	r26, 0x5A	; 90
     246:	b3 e0       	ldi	r27, 0x03	; 3
     248:	01 c0       	rjmp	.+2      	; 0x24c <.do_clear_bss_start>

0000024a <.do_clear_bss_loop>:
     24a:	1d 92       	st	X+, r1

0000024c <.do_clear_bss_start>:
     24c:	ac 3f       	cpi	r26, 0xFC	; 252
     24e:	b2 07       	cpc	r27, r18
     250:	e1 f7       	brne	.-8      	; 0x24a <.do_clear_bss_loop>
     252:	0e 94 dc 03 	call	0x7b8	; 0x7b8 <main>
     256:	0c 94 17 0f 	jmp	0x1e2e	; 0x1e2e <_exit>

0000025a <__bad_interrupt>:
     25a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000025e <__vector_21>:
extern unsigned int adc_value;
//----------------------------------------
char high_adc=0,low_adc=0;
//----------------------------------------
ISR(ADC_vect)
{
     25e:	1f 92       	push	r1
     260:	0f 92       	push	r0
     262:	0f b6       	in	r0, 0x3f	; 63
     264:	0f 92       	push	r0
     266:	11 24       	eor	r1, r1
     268:	2f 93       	push	r18
     26a:	8f 93       	push	r24
     26c:	9f 93       	push	r25
	low_adc = ADCL;
     26e:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
     272:	20 93 5a 03 	sts	0x035A, r18	; 0x80035a <__data_end>
	high_adc = ADCH;//Верхняя часть регистра ADC должна быть считана последней, иначе не продолжится преобразование
     276:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
     27a:	80 93 5b 03 	sts	0x035B, r24	; 0x80035b <high_adc>
	adc_value = high_adc*256+low_adc;
     27e:	90 e0       	ldi	r25, 0x00	; 0
     280:	98 2f       	mov	r25, r24
     282:	88 27       	eor	r24, r24
     284:	82 0f       	add	r24, r18
     286:	91 1d       	adc	r25, r1
     288:	90 93 a1 03 	sts	0x03A1, r25	; 0x8003a1 <adc_value+0x1>
     28c:	80 93 a0 03 	sts	0x03A0, r24	; 0x8003a0 <adc_value>
}
     290:	9f 91       	pop	r25
     292:	8f 91       	pop	r24
     294:	2f 91       	pop	r18
     296:	0f 90       	pop	r0
     298:	0f be       	out	0x3f, r0	; 63
     29a:	0f 90       	pop	r0
     29c:	1f 90       	pop	r1
     29e:	18 95       	reti

000002a0 <ADC_Init>:
void ADC_Init(void)
{	
	ADCSRA |= (1<<ADEN) // Разрешение использования АЦП
     2a0:	ea e7       	ldi	r30, 0x7A	; 122
     2a2:	f0 e0       	ldi	r31, 0x00	; 0
     2a4:	80 81       	ld	r24, Z
     2a6:	8f 6e       	ori	r24, 0xEF	; 239
     2a8:	80 83       	st	Z, r24
	|(1<<ADSC)//Запуск преобразования
	|(1<<ADATE)//Непрерывный режим работы АЦП
	|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0)//Делитель 128 = 125 кГц
	|(1<<ADIE);//Разрешение прерывания от АЦП
	ADMUX |= (1<<REFS0)|(1<<MUX1)|(1<<MUX0); // ИОН=AVcc, вход ADC0 |(1<<MUX1)|(1<<MUX0)
     2aa:	ec e7       	ldi	r30, 0x7C	; 124
     2ac:	f0 e0       	ldi	r31, 0x00	; 0
     2ae:	80 81       	ld	r24, Z
     2b0:	83 64       	ori	r24, 0x43	; 67
     2b2:	80 83       	st	Z, r24
     2b4:	08 95       	ret

000002b6 <read_dht11_dat>:

	char dht11_dat[5];
	char dht11_in;

char read_dht11_dat()
{
     2b6:	27 e0       	ldi	r18, 0x07	; 7
     2b8:	30 e0       	ldi	r19, 0x00	; 0
	char i = 0;
	char result=0;
     2ba:	80 e0       	ldi	r24, 0x00	; 0
		while(!(PINC & (1<<(DHT11_PIN))))
		{}; // wait forever until analog input port 0 is '1' (NOTICE: PINC reads all the analog input ports
		//and _BV(X) is the macro operation which pull up position 'X' to '1' and the rest positions to '0'. it is equivalent to 1<
		_delay_us(30);
		if(PINC & (1<<(DHT11_PIN))) //if analog input port 0 is still '1' after 30 us
		result |=(1<<(7-i)); //this position is 1
     2bc:	61 e0       	ldi	r22, 0x01	; 1
     2be:	70 e0       	ldi	r23, 0x00	; 0
{
	char i = 0;
	char result=0;
	for(i=0; i< 8; i++)
	{
		while(!(PINC & (1<<(DHT11_PIN))))
     2c0:	30 9b       	sbis	0x06, 0	; 6
     2c2:	fe cf       	rjmp	.-4      	; 0x2c0 <read_dht11_dat+0xa>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     2c4:	90 ea       	ldi	r25, 0xA0	; 160
     2c6:	9a 95       	dec	r25
     2c8:	f1 f7       	brne	.-4      	; 0x2c6 <read_dht11_dat+0x10>
		{}; // wait forever until analog input port 0 is '1' (NOTICE: PINC reads all the analog input ports
		//and _BV(X) is the macro operation which pull up position 'X' to '1' and the rest positions to '0'. it is equivalent to 1<
		_delay_us(30);
		if(PINC & (1<<(DHT11_PIN))) //if analog input port 0 is still '1' after 30 us
     2ca:	30 9b       	sbis	0x06, 0	; 6
     2cc:	08 c0       	rjmp	.+16     	; 0x2de <read_dht11_dat+0x28>
		result |=(1<<(7-i)); //this position is 1
     2ce:	ab 01       	movw	r20, r22
     2d0:	02 2e       	mov	r0, r18
     2d2:	02 c0       	rjmp	.+4      	; 0x2d8 <read_dht11_dat+0x22>
     2d4:	44 0f       	add	r20, r20
     2d6:	55 1f       	adc	r21, r21
     2d8:	0a 94       	dec	r0
     2da:	e2 f7       	brpl	.-8      	; 0x2d4 <read_dht11_dat+0x1e>
     2dc:	84 2b       	or	r24, r20
		while((PINC & (1<<(DHT11_PIN)))); // wait '1' finish
     2de:	30 99       	sbic	0x06, 0	; 6
     2e0:	fe cf       	rjmp	.-4      	; 0x2de <read_dht11_dat+0x28>
     2e2:	21 50       	subi	r18, 0x01	; 1
     2e4:	31 09       	sbc	r19, r1
     2e6:	60 f7       	brcc	.-40     	; 0x2c0 <read_dht11_dat+0xa>
	}
	return result;
}
     2e8:	08 95       	ret

000002ea <dht11_start>:

void dht11_start()
{
     2ea:	0f 93       	push	r16
     2ec:	1f 93       	push	r17
     2ee:	cf 93       	push	r28
     2f0:	df 93       	push	r29
	dht11_dat[0]=0;
     2f2:	e2 ea       	ldi	r30, 0xA2	; 162
     2f4:	f3 e0       	ldi	r31, 0x03	; 3
     2f6:	10 82       	st	Z, r1
	dht11_dat[2]=0;
     2f8:	12 82       	std	Z+2, r1	; 0x02
	DDRC |= (1<<(DHT11_PIN));// start condition
     2fa:	38 9a       	sbi	0x07, 0	; 7
	PORTC &= ~(1<<(DHT11_PIN)); // 1. pull-down i/o pin for 18ms
     2fc:	40 98       	cbi	0x08, 0	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     2fe:	2f ef       	ldi	r18, 0xFF	; 255
     300:	89 ef       	ldi	r24, 0xF9	; 249
     302:	90 e0       	ldi	r25, 0x00	; 0
     304:	21 50       	subi	r18, 0x01	; 1
     306:	80 40       	sbci	r24, 0x00	; 0
     308:	90 40       	sbci	r25, 0x00	; 0
     30a:	e1 f7       	brne	.-8      	; 0x304 <dht11_start+0x1a>
     30c:	00 c0       	rjmp	.+0      	; 0x30e <dht11_start+0x24>
     30e:	00 00       	nop
	_delay_ms(20);
	PORTC |= (1<<(DHT11_PIN)); // 2. pull-up i/o pin for 40ms
     310:	40 9a       	sbi	0x08, 0	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     312:	20 ea       	ldi	r18, 0xA0	; 160
     314:	2a 95       	dec	r18
     316:	f1 f7       	brne	.-4      	; 0x314 <dht11_start+0x2a>
	_delay_us(30);
	DDRC &= ~(1<<(DHT11_PIN)); //let analog port 0 be input port
     318:	38 98       	cbi	0x07, 0	; 7
     31a:	85 e0       	ldi	r24, 0x05	; 5
     31c:	8a 95       	dec	r24
     31e:	f1 f7       	brne	.-4      	; 0x31c <dht11_start+0x32>
     320:	00 00       	nop
	_delay_us(1);

	dht11_in = PINC & (1<<(DHT11_PIN)); // read only the input port 0
     322:	86 b1       	in	r24, 0x06	; 6
     324:	81 70       	andi	r24, 0x01	; 1
     326:	80 93 a7 03 	sts	0x03A7, r24	; 0x8003a7 <dht11_in>
	if (dht11_in)
     32a:	81 11       	cpse	r24, r1
     32c:	1d c0       	rjmp	.+58     	; 0x368 <dht11_start+0x7e>
     32e:	8f e3       	ldi	r24, 0x3F	; 63
     330:	91 e0       	ldi	r25, 0x01	; 1
     332:	01 97       	sbiw	r24, 0x01	; 1
     334:	f1 f7       	brne	.-4      	; 0x332 <dht11_start+0x48>
     336:	00 c0       	rjmp	.+0      	; 0x338 <dht11_start+0x4e>
     338:	00 00       	nop
		/*		Serial.println("dht11 start condition 1 not met"); //wait for DHT11 response signal:LOW*/
	}
	else
	{
		_delay_us(80);
		dht11_in = PINC & (1<<(DHT11_PIN)); //
     33a:	86 b1       	in	r24, 0x06	; 6
     33c:	81 70       	andi	r24, 0x01	; 1
     33e:	80 93 a7 03 	sts	0x03A7, r24	; 0x8003a7 <dht11_in>
		if(!dht11_in)
     342:	88 23       	and	r24, r24
     344:	89 f0       	breq	.+34     	; 0x368 <dht11_start+0x7e>
     346:	8f e3       	ldi	r24, 0x3F	; 63
     348:	91 e0       	ldi	r25, 0x01	; 1
     34a:	01 97       	sbiw	r24, 0x01	; 1
     34c:	f1 f7       	brne	.-4      	; 0x34a <dht11_start+0x60>
     34e:	00 c0       	rjmp	.+0      	; 0x350 <dht11_start+0x66>
     350:	00 00       	nop
     352:	ef 01       	movw	r28, r30
     354:	07 ea       	ldi	r16, 0xA7	; 167
     356:	13 e0       	ldi	r17, 0x03	; 3
		}
		else
		{
			_delay_us(80);// now ready for data reception
			for (int i=0; i<5; i++)
			{ dht11_dat[i] = read_dht11_dat();} //received 40 bits data. Details are described in datasheet
     358:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <read_dht11_dat>
     35c:	89 93       	st	Y+, r24
			/*		Serial.println("dht11 start condition 2 not met"); //wait for second response signal:HIGH*/
		}
		else
		{
			_delay_us(80);// now ready for data reception
			for (int i=0; i<5; i++)
     35e:	c0 17       	cp	r28, r16
     360:	d1 07       	cpc	r29, r17
     362:	d1 f7       	brne	.-12     	; 0x358 <dht11_start+0x6e>
			{ dht11_dat[i] = read_dht11_dat();} //received 40 bits data. Details are described in datasheet

			DDRC |= (1<<(DHT11_PIN)); //let analog port 0 be output port after all the data have been received
     364:	38 9a       	sbi	0x07, 0	; 7
			PORTC |= (1<<(DHT11_PIN)); //let the value of this port be '1' after all the data have been received
     366:	40 9a       	sbi	0x08, 0	; 8
// 				number_write(H);
// 				number_write(h);
// 			}
		}
	}
}
     368:	df 91       	pop	r29
     36a:	cf 91       	pop	r28
     36c:	1f 91       	pop	r17
     36e:	0f 91       	pop	r16
     370:	08 95       	ret

00000372 <dht11_temp>:

char dht11_temp(){
// 	dht11_start();
	return dht11_dat[2];
}
     372:	80 91 a4 03 	lds	r24, 0x03A4	; 0x8003a4 <dht11_dat+0x2>
     376:	08 95       	ret

00000378 <dht11_humid>:

char dht11_humid(){
// 	dht11_start();
	return dht11_dat[0];
     378:	80 91 a2 03 	lds	r24, 0x03A2	; 0x8003a2 <dht11_dat>
     37c:	08 95       	ret

0000037e <ds18b20_Reset>:
//РїСЂРµРѕР±СЂР°Р·РѕРІР°РЅРёРµ С‚РµРјРїРµСЂР°С‚СѓСЂС‹ РІ РµРґРёРЅРёС†С‹
char converttemp (unsigned int tt)
{
	char t = tt>>4;//СЃРґРІРёРі Рё РѕС‚СЃРµС‡РµРЅРёРµ С‡Р°СЃС‚Рё СЃС‚Р°СЂС€РµРіРѕ Р±Р°Р№С‚Р°
	return t;
}
     37e:	f8 94       	cli
     380:	39 9a       	sbi	0x07, 1	; 7
     382:	83 e9       	ldi	r24, 0x93	; 147
     384:	97 e0       	ldi	r25, 0x07	; 7
     386:	01 97       	sbiw	r24, 0x01	; 1
     388:	f1 f7       	brne	.-4      	; 0x386 <ds18b20_Reset+0x8>
     38a:	00 c0       	rjmp	.+0      	; 0x38c <ds18b20_Reset+0xe>
     38c:	00 00       	nop
     38e:	39 98       	cbi	0x07, 1	; 7
     390:	ef e8       	ldi	r30, 0x8F	; 143
     392:	f1 e0       	ldi	r31, 0x01	; 1
     394:	31 97       	sbiw	r30, 0x01	; 1
     396:	f1 f7       	brne	.-4      	; 0x394 <ds18b20_Reset+0x16>
     398:	00 c0       	rjmp	.+0      	; 0x39a <ds18b20_Reset+0x1c>
     39a:	00 00       	nop
     39c:	86 b1       	in	r24, 0x06	; 6
     39e:	e3 e0       	ldi	r30, 0x03	; 3
     3a0:	f6 e0       	ldi	r31, 0x06	; 6
     3a2:	31 97       	sbiw	r30, 0x01	; 1
     3a4:	f1 f7       	brne	.-4      	; 0x3a2 <ds18b20_Reset+0x24>
     3a6:	00 c0       	rjmp	.+0      	; 0x3a8 <ds18b20_Reset+0x2a>
     3a8:	00 00       	nop
     3aa:	86 95       	lsr	r24
     3ac:	81 70       	andi	r24, 0x01	; 1
     3ae:	91 e0       	ldi	r25, 0x01	; 1
     3b0:	89 27       	eor	r24, r25
     3b2:	08 95       	ret

000003b4 <ds18b20_WriteBit>:
     3b4:	f8 94       	cli
     3b6:	39 9a       	sbi	0x07, 1	; 7
     3b8:	9a e0       	ldi	r25, 0x0A	; 10
     3ba:	9a 95       	dec	r25
     3bc:	f1 f7       	brne	.-4      	; 0x3ba <ds18b20_WriteBit+0x6>
     3be:	00 c0       	rjmp	.+0      	; 0x3c0 <ds18b20_WriteBit+0xc>
     3c0:	81 11       	cpse	r24, r1
     3c2:	39 98       	cbi	0x07, 1	; 7
     3c4:	87 ef       	ldi	r24, 0xF7	; 247
     3c6:	90 e0       	ldi	r25, 0x00	; 0
     3c8:	01 97       	sbiw	r24, 0x01	; 1
     3ca:	f1 f7       	brne	.-4      	; 0x3c8 <ds18b20_WriteBit+0x14>
     3cc:	00 c0       	rjmp	.+0      	; 0x3ce <ds18b20_WriteBit+0x1a>
     3ce:	00 00       	nop
     3d0:	39 98       	cbi	0x07, 1	; 7
     3d2:	08 95       	ret

000003d4 <ds18b20_WriteByte>:
     3d4:	ef 92       	push	r14
     3d6:	ff 92       	push	r15
     3d8:	0f 93       	push	r16
     3da:	1f 93       	push	r17
     3dc:	cf 93       	push	r28
     3de:	df 93       	push	r29
     3e0:	c0 e0       	ldi	r28, 0x00	; 0
     3e2:	d0 e0       	ldi	r29, 0x00	; 0
     3e4:	ee 24       	eor	r14, r14
     3e6:	e3 94       	inc	r14
     3e8:	f1 2c       	mov	r15, r1
     3ea:	08 2f       	mov	r16, r24
     3ec:	10 e0       	ldi	r17, 0x00	; 0
     3ee:	97 01       	movw	r18, r14
     3f0:	0c 2e       	mov	r0, r28
     3f2:	02 c0       	rjmp	.+4      	; 0x3f8 <ds18b20_WriteByte+0x24>
     3f4:	22 0f       	add	r18, r18
     3f6:	33 1f       	adc	r19, r19
     3f8:	0a 94       	dec	r0
     3fa:	e2 f7       	brpl	.-8      	; 0x3f4 <ds18b20_WriteByte+0x20>
     3fc:	a8 01       	movw	r20, r16
     3fe:	42 23       	and	r20, r18
     400:	53 23       	and	r21, r19
     402:	24 17       	cp	r18, r20
     404:	35 07       	cpc	r19, r21
     406:	21 f4       	brne	.+8      	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
     408:	81 e0       	ldi	r24, 0x01	; 1
     40a:	0e 94 da 01 	call	0x3b4	; 0x3b4 <ds18b20_WriteBit>
     40e:	03 c0       	rjmp	.+6      	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
     410:	80 e0       	ldi	r24, 0x00	; 0
     412:	0e 94 da 01 	call	0x3b4	; 0x3b4 <ds18b20_WriteBit>
     416:	21 96       	adiw	r28, 0x01	; 1
     418:	c8 30       	cpi	r28, 0x08	; 8
     41a:	d1 05       	cpc	r29, r1
     41c:	41 f7       	brne	.-48     	; 0x3ee <ds18b20_WriteByte+0x1a>
     41e:	df 91       	pop	r29
     420:	cf 91       	pop	r28
     422:	1f 91       	pop	r17
     424:	0f 91       	pop	r16
     426:	ff 90       	pop	r15
     428:	ef 90       	pop	r14
     42a:	08 95       	ret

0000042c <ds18b20_ReadBit>:
     42c:	f8 94       	cli
     42e:	39 9a       	sbi	0x07, 1	; 7
     430:	8a e0       	ldi	r24, 0x0A	; 10
     432:	8a 95       	dec	r24
     434:	f1 f7       	brne	.-4      	; 0x432 <ds18b20_ReadBit+0x6>
     436:	00 c0       	rjmp	.+0      	; 0x438 <ds18b20_ReadBit+0xc>
     438:	39 98       	cbi	0x07, 1	; 7
     43a:	e5 e3       	ldi	r30, 0x35	; 53
     43c:	ea 95       	dec	r30
     43e:	f1 f7       	brne	.-4      	; 0x43c <ds18b20_ReadBit+0x10>
     440:	00 00       	nop
     442:	86 b1       	in	r24, 0x06	; 6
     444:	ef ec       	ldi	r30, 0xCF	; 207
     446:	f0 e0       	ldi	r31, 0x00	; 0
     448:	31 97       	sbiw	r30, 0x01	; 1
     44a:	f1 f7       	brne	.-4      	; 0x448 <ds18b20_ReadBit+0x1c>
     44c:	00 c0       	rjmp	.+0      	; 0x44e <ds18b20_ReadBit+0x22>
     44e:	00 00       	nop
     450:	86 95       	lsr	r24
     452:	81 70       	andi	r24, 0x01	; 1
     454:	08 95       	ret

00000456 <ds18b20_ReadByte>:
     456:	1f 93       	push	r17
     458:	cf 93       	push	r28
     45a:	df 93       	push	r29
     45c:	c0 e0       	ldi	r28, 0x00	; 0
     45e:	d0 e0       	ldi	r29, 0x00	; 0
     460:	10 e0       	ldi	r17, 0x00	; 0
     462:	0e 94 16 02 	call	0x42c	; 0x42c <ds18b20_ReadBit>
     466:	90 e0       	ldi	r25, 0x00	; 0
     468:	0c 2e       	mov	r0, r28
     46a:	02 c0       	rjmp	.+4      	; 0x470 <ds18b20_ReadByte+0x1a>
     46c:	88 0f       	add	r24, r24
     46e:	99 1f       	adc	r25, r25
     470:	0a 94       	dec	r0
     472:	e2 f7       	brpl	.-8      	; 0x46c <ds18b20_ReadByte+0x16>
     474:	18 2b       	or	r17, r24
     476:	21 96       	adiw	r28, 0x01	; 1
     478:	c8 30       	cpi	r28, 0x08	; 8
     47a:	d1 05       	cpc	r29, r1
     47c:	91 f7       	brne	.-28     	; 0x462 <ds18b20_ReadByte+0xc>
     47e:	81 2f       	mov	r24, r17
     480:	df 91       	pop	r29
     482:	cf 91       	pop	r28
     484:	1f 91       	pop	r17
     486:	08 95       	ret

00000488 <ds18b20_SearhRom>:
uint8_t ds18b20_SearhRom(uint8_t *Addr)
{
     488:	bf 92       	push	r11
     48a:	cf 92       	push	r12
     48c:	df 92       	push	r13
     48e:	ef 92       	push	r14
     490:	ff 92       	push	r15
     492:	0f 93       	push	r16
     494:	1f 93       	push	r17
     496:	cf 93       	push	r28
     498:	df 93       	push	r29
     49a:	b8 2e       	mov	r11, r24
     49c:	c9 2e       	mov	r12, r25
	id_bit_number = 1;
	last_zero = 0;
	rom_byte_number = 0;
	rom_byte_mask = 1;
	search_result = 0;
	if (!LastDeviceFlag)
     49e:	80 91 b1 03 	lds	r24, 0x03B1	; 0x8003b1 <LastDeviceFlag>
     4a2:	81 11       	cpse	r24, r1
     4a4:	05 c0       	rjmp	.+10     	; 0x4b0 <ds18b20_SearhRom+0x28>
	{
		ds18b20_Reset();
     4a6:	0e 94 bf 01 	call	0x37e	; 0x37e <ds18b20_Reset>
		ds18b20_WriteByte(0xF0);
     4aa:	80 ef       	ldi	r24, 0xF0	; 240
     4ac:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <ds18b20_WriteByte>
{
	char t = tt>>4;//СЃРґРІРёРі Рё РѕС‚СЃРµС‡РµРЅРёРµ С‡Р°СЃС‚Рё СЃС‚Р°СЂС€РµРіРѕ Р±Р°Р№С‚Р°
	return t;
}
uint8_t ds18b20_SearhRom(uint8_t *Addr)
{
     4b0:	d1 e0       	ldi	r29, 0x01	; 1
     4b2:	10 e0       	ldi	r17, 0x00	; 0
     4b4:	e1 2c       	mov	r14, r1
     4b6:	01 e0       	ldi	r16, 0x01	; 1
			else
			{
				if (id_bit_number < LastDiscrepancy)
				search_direction = ((ROM_NO[rom_byte_number] & rom_byte_mask) > 0);
				else
				search_direction = (id_bit_number == LastDiscrepancy);
     4b8:	ff 24       	eor	r15, r15
     4ba:	f3 94       	inc	r15
     4bc:	d1 2c       	mov	r13, r1
		ds18b20_Reset();
		ds18b20_WriteByte(0xF0);
	}
	do
	{
		id_bit = ds18b20_ReadBit();
     4be:	0e 94 16 02 	call	0x42c	; 0x42c <ds18b20_ReadBit>
     4c2:	c8 2f       	mov	r28, r24
		cmp_id_bit = ds18b20_ReadBit();
     4c4:	0e 94 16 02 	call	0x42c	; 0x42c <ds18b20_ReadBit>
		if ((id_bit == 1) && (cmp_id_bit == 1))
     4c8:	c1 30       	cpi	r28, 0x01	; 1
     4ca:	09 f0       	breq	.+2      	; 0x4ce <ds18b20_SearhRom+0x46>
     4cc:	54 c0       	rjmp	.+168    	; 0x576 <ds18b20_SearhRom+0xee>
     4ce:	81 30       	cpi	r24, 0x01	; 1
     4d0:	e1 f4       	brne	.+56     	; 0x50a <ds18b20_SearhRom+0x82>
     4d2:	38 c0       	rjmp	.+112    	; 0x544 <ds18b20_SearhRom+0xbc>
		{
			if (id_bit != cmp_id_bit)
			search_direction = id_bit; // bit write value for search
			else
			{
				if (id_bit_number < LastDiscrepancy)
     4d4:	80 91 b2 03 	lds	r24, 0x03B2	; 0x8003b2 <LastDiscrepancy>
     4d8:	08 17       	cp	r16, r24
     4da:	50 f4       	brcc	.+20     	; 0x4f0 <ds18b20_SearhRom+0x68>
				search_direction = ((ROM_NO[rom_byte_number] & rom_byte_mask) > 0);
     4dc:	e1 2f       	mov	r30, r17
     4de:	f0 e0       	ldi	r31, 0x00	; 0
     4e0:	e8 55       	subi	r30, 0x58	; 88
     4e2:	fc 4f       	sbci	r31, 0xFC	; 252
     4e4:	80 81       	ld	r24, Z
     4e6:	8d 23       	and	r24, r29
     4e8:	cf 2d       	mov	r28, r15
     4ea:	29 f4       	brne	.+10     	; 0x4f6 <ds18b20_SearhRom+0x6e>
     4ec:	cd 2d       	mov	r28, r13
     4ee:	03 c0       	rjmp	.+6      	; 0x4f6 <ds18b20_SearhRom+0x6e>
				else
				search_direction = (id_bit_number == LastDiscrepancy);
     4f0:	cf 2d       	mov	r28, r15
     4f2:	08 13       	cpse	r16, r24
     4f4:	cd 2d       	mov	r28, r13
				if (search_direction == 0)
     4f6:	c1 11       	cpse	r28, r1
     4f8:	06 c0       	rjmp	.+12     	; 0x506 <ds18b20_SearhRom+0x7e>
				{
					last_zero = id_bit_number;
					if (last_zero < 9)
     4fa:	09 30       	cpi	r16, 0x09	; 9
     4fc:	08 f0       	brcs	.+2      	; 0x500 <ds18b20_SearhRom+0x78>
     4fe:	3e c0       	rjmp	.+124    	; 0x57c <ds18b20_SearhRom+0xf4>
					LastFamilyDiscrepancy = last_zero;
     500:	00 93 b0 03 	sts	0x03B0, r16	; 0x8003b0 <LastFamilyDiscrepancy>
     504:	3b c0       	rjmp	.+118    	; 0x57c <ds18b20_SearhRom+0xf4>
				}
			}
			if (search_direction == 1)
     506:	c1 30       	cpi	r28, 0x01	; 1
     508:	49 f4       	brne	.+18     	; 0x51c <ds18b20_SearhRom+0x94>
			ROM_NO[rom_byte_number] |= rom_byte_mask;
     50a:	e1 2f       	mov	r30, r17
     50c:	f0 e0       	ldi	r31, 0x00	; 0
     50e:	e8 55       	subi	r30, 0x58	; 88
     510:	fc 4f       	sbci	r31, 0xFC	; 252
     512:	80 81       	ld	r24, Z
     514:	8d 2b       	or	r24, r29
     516:	80 83       	st	Z, r24
     518:	cf 2d       	mov	r28, r15
     51a:	09 c0       	rjmp	.+18     	; 0x52e <ds18b20_SearhRom+0xa6>
			else
			ROM_NO[rom_byte_number] &= ~rom_byte_mask;
     51c:	e1 2f       	mov	r30, r17
     51e:	f0 e0       	ldi	r31, 0x00	; 0
     520:	e8 55       	subi	r30, 0x58	; 88
     522:	fc 4f       	sbci	r31, 0xFC	; 252
     524:	90 81       	ld	r25, Z
     526:	8d 2f       	mov	r24, r29
     528:	80 95       	com	r24
     52a:	89 23       	and	r24, r25
     52c:	80 83       	st	Z, r24
			ds18b20_WriteBit(search_direction);
     52e:	8c 2f       	mov	r24, r28
     530:	0e 94 da 01 	call	0x3b4	; 0x3b4 <ds18b20_WriteBit>
			id_bit_number++;
     534:	0f 5f       	subi	r16, 0xFF	; 255
			rom_byte_mask <<= 1;
     536:	dd 0f       	add	r29, r29
			if (rom_byte_mask == 0)
     538:	11 f4       	brne	.+4      	; 0x53e <ds18b20_SearhRom+0xb6>
			{
				rom_byte_number++;
     53a:	1f 5f       	subi	r17, 0xFF	; 255
				rom_byte_mask = 1;
     53c:	d1 e0       	ldi	r29, 0x01	; 1
			}
		}
	} while(rom_byte_number < 8); // СЃС‡РёС‚С‹РІР°РµРј Р±Р°Р№С‚С‹ СЃ 0 РґРѕ 7 РІ С†РёРєР»Рµ
     53e:	18 30       	cpi	r17, 0x08	; 8
     540:	08 f4       	brcc	.+2      	; 0x544 <ds18b20_SearhRom+0xbc>
     542:	bd cf       	rjmp	.-134    	; 0x4be <ds18b20_SearhRom+0x36>
	if (!(id_bit_number < 65))
     544:	01 34       	cpi	r16, 0x41	; 65
     546:	40 f0       	brcs	.+16     	; 0x558 <ds18b20_SearhRom+0xd0>
	{
		// search successful so set LastDiscrepancy,LastDeviceFlag,search_result
		LastDiscrepancy = last_zero;
     548:	e0 92 b2 03 	sts	0x03B2, r14	; 0x8003b2 <LastDiscrepancy>
		// check for last device
		if (LastDiscrepancy == 0)
     54c:	e1 10       	cpse	r14, r1
     54e:	18 c0       	rjmp	.+48     	; 0x580 <ds18b20_SearhRom+0xf8>
		LastDeviceFlag = 1;
     550:	81 e0       	ldi	r24, 0x01	; 1
     552:	80 93 b1 03 	sts	0x03B1, r24	; 0x8003b1 <LastDeviceFlag>
     556:	14 c0       	rjmp	.+40     	; 0x580 <ds18b20_SearhRom+0xf8>
		search_result = 1;
	}
	if (!search_result || !ROM_NO[0])
	{
		LastDiscrepancy = 0;
     558:	10 92 b2 03 	sts	0x03B2, r1	; 0x8003b2 <LastDiscrepancy>
		LastDeviceFlag = 0;
     55c:	10 92 b1 03 	sts	0x03B1, r1	; 0x8003b1 <LastDeviceFlag>
		LastFamilyDiscrepancy = 0;
     560:	10 92 b0 03 	sts	0x03B0, r1	; 0x8003b0 <LastFamilyDiscrepancy>
		search_result = 0;
     564:	80 e0       	ldi	r24, 0x00	; 0
     566:	17 c0       	rjmp	.+46     	; 0x596 <ds18b20_SearhRom+0x10e>
	}
	else
	{
		for (int i = 0; i < 8; i++) Addr[i] = ROM_NO[i];
     568:	81 91       	ld	r24, Z+
     56a:	8d 93       	st	X+, r24
     56c:	2e 17       	cp	r18, r30
     56e:	3f 07       	cpc	r19, r31
     570:	d9 f7       	brne	.-10     	; 0x568 <ds18b20_SearhRom+0xe0>
     572:	81 e0       	ldi	r24, 0x01	; 1
	}
	return search_result;
     574:	10 c0       	rjmp	.+32     	; 0x596 <ds18b20_SearhRom+0x10e>
		cmp_id_bit = ds18b20_ReadBit();
		if ((id_bit == 1) && (cmp_id_bit == 1))
		break;
		else
		{
			if (id_bit != cmp_id_bit)
     576:	c8 13       	cpse	r28, r24
     578:	d1 cf       	rjmp	.-94     	; 0x51c <ds18b20_SearhRom+0x94>
     57a:	ac cf       	rjmp	.-168    	; 0x4d4 <ds18b20_SearhRom+0x4c>
{
	char t = tt>>4;//СЃРґРІРёРі Рё РѕС‚СЃРµС‡РµРЅРёРµ С‡Р°СЃС‚Рё СЃС‚Р°СЂС€РµРіРѕ Р±Р°Р№С‚Р°
	return t;
}
uint8_t ds18b20_SearhRom(uint8_t *Addr)
{
     57c:	e0 2e       	mov	r14, r16
     57e:	ce cf       	rjmp	.-100    	; 0x51c <ds18b20_SearhRom+0x94>
		// check for last device
		if (LastDiscrepancy == 0)
		LastDeviceFlag = 1;
		search_result = 1;
	}
	if (!search_result || !ROM_NO[0])
     580:	80 91 a8 03 	lds	r24, 0x03A8	; 0x8003a8 <ROM_NO>
     584:	88 23       	and	r24, r24
     586:	41 f3       	breq	.-48     	; 0x558 <ds18b20_SearhRom+0xd0>
     588:	e8 ea       	ldi	r30, 0xA8	; 168
     58a:	f3 e0       	ldi	r31, 0x03	; 3
     58c:	ab 2d       	mov	r26, r11
     58e:	bc 2d       	mov	r27, r12
     590:	20 eb       	ldi	r18, 0xB0	; 176
     592:	33 e0       	ldi	r19, 0x03	; 3
     594:	e9 cf       	rjmp	.-46     	; 0x568 <ds18b20_SearhRom+0xe0>
	else
	{
		for (int i = 0; i < 8; i++) Addr[i] = ROM_NO[i];
	}
	return search_result;
}
     596:	df 91       	pop	r29
     598:	cf 91       	pop	r28
     59a:	1f 91       	pop	r17
     59c:	0f 91       	pop	r16
     59e:	ff 90       	pop	r15
     5a0:	ef 90       	pop	r14
     5a2:	df 90       	pop	r13
     5a4:	cf 90       	pop	r12
     5a6:	bf 90       	pop	r11
     5a8:	08 95       	ret

000005aa <ds18b20_init>:
//-----------------------------------------------
uint8_t ds18b20_init(uint8_t mode)
{
     5aa:	cf 92       	push	r12
     5ac:	df 92       	push	r13
     5ae:	ef 92       	push	r14
     5b0:	ff 92       	push	r15
     5b2:	0f 93       	push	r16
     5b4:	1f 93       	push	r17
     5b6:	cf 93       	push	r28
     5b8:	df 93       	push	r29
     5ba:	cd b7       	in	r28, 0x3d	; 61
     5bc:	de b7       	in	r29, 0x3e	; 62
     5be:	28 97       	sbiw	r28, 0x08	; 8
     5c0:	0f b6       	in	r0, 0x3f	; 63
     5c2:	f8 94       	cli
     5c4:	de bf       	out	0x3e, r29	; 62
     5c6:	0f be       	out	0x3f, r0	; 63
     5c8:	cd bf       	out	0x3d, r28	; 61
	int i = 0, j=0;
	uint8_t dt[8];
	
	if(mode==SKIP_ROM)
     5ca:	81 11       	cpse	r24, r1
     5cc:	16 c0       	rjmp	.+44     	; 0x5fa <ds18b20_init+0x50>
	{		
		if(!ds18b20_Reset()) return 1;
     5ce:	0e 94 bf 01 	call	0x37e	; 0x37e <ds18b20_Reset>
     5d2:	88 23       	and	r24, r24
     5d4:	09 f4       	brne	.+2      	; 0x5d8 <ds18b20_init+0x2e>
     5d6:	67 c0       	rjmp	.+206    	; 0x6a6 <ds18b20_init+0xfc>
		//SKIP ROM
		ds18b20_WriteByte(0xCC);
     5d8:	8c ec       	ldi	r24, 0xCC	; 204
     5da:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <ds18b20_WriteByte>
		//WRITE SCRATCHPAD
		ds18b20_WriteByte(0x4E);
     5de:	8e e4       	ldi	r24, 0x4E	; 78
     5e0:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <ds18b20_WriteByte>
		//TH REGISTER 100 РіСЂР°РґСѓСЃРѕРІ
		ds18b20_WriteByte(0x64);
     5e4:	84 e6       	ldi	r24, 0x64	; 100
     5e6:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <ds18b20_WriteByte>
		//TL REGISTER - 30 РіСЂР°РґСѓСЃРѕРІ
		ds18b20_WriteByte(0x1E);
     5ea:	8e e1       	ldi	r24, 0x1E	; 30
     5ec:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <ds18b20_WriteByte>
		//Resolution 12 bit
		ds18b20_WriteByte(RESOLUTION_12BIT);
     5f0:	8f e7       	ldi	r24, 0x7F	; 127
     5f2:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <ds18b20_WriteByte>
			ds18b20_WriteByte(0x14);
			//Resolution 12 bit
			ds18b20_WriteByte(RESOLUTION_12BIT);
		}
	}
	return 0;
     5f6:	80 e0       	ldi	r24, 0x00	; 0
     5f8:	59 c0       	rjmp	.+178    	; 0x6ac <ds18b20_init+0x102>
     5fa:	08 e0       	ldi	r16, 0x08	; 8
     5fc:	10 e0       	ldi	r17, 0x00	; 0
	}
	else
	{
		for(i=1;i<=8;i++)
		{
			if(ds18b20_SearhRom(dt))
     5fe:	ce 01       	movw	r24, r28
     600:	01 96       	adiw	r24, 0x01	; 1
     602:	0e 94 44 02 	call	0x488	; 0x488 <ds18b20_SearhRom>
     606:	81 11       	cpse	r24, r1
     608:	05 c0       	rjmp	.+10     	; 0x614 <ds18b20_init+0x6a>
				Dev_Cnt++;
				memcpy(Dev_ID[Dev_Cnt-1],dt,sizeof(dt));
			}
			else break;
		}
		for(i=1;i<=Dev_Cnt;i++)
     60a:	80 91 b3 03 	lds	r24, 0x03B3	; 0x8003b3 <Dev_Cnt>
     60e:	81 11       	cpse	r24, r1
     610:	1a c0       	rjmp	.+52     	; 0x646 <ds18b20_init+0x9c>
     612:	4c c0       	rjmp	.+152    	; 0x6ac <ds18b20_init+0x102>
	{
		for(i=1;i<=8;i++)
		{
			if(ds18b20_SearhRom(dt))
			{
				Dev_Cnt++;
     614:	a0 91 b3 03 	lds	r26, 0x03B3	; 0x8003b3 <Dev_Cnt>
     618:	af 5f       	subi	r26, 0xFF	; 255
     61a:	a0 93 b3 03 	sts	0x03B3, r26	; 0x8003b3 <Dev_Cnt>
				memcpy(Dev_ID[Dev_Cnt-1],dt,sizeof(dt));
     61e:	b0 e0       	ldi	r27, 0x00	; 0
     620:	aa 0f       	add	r26, r26
     622:	bb 1f       	adc	r27, r27
     624:	aa 0f       	add	r26, r26
     626:	bb 1f       	adc	r27, r27
     628:	aa 0f       	add	r26, r26
     62a:	bb 1f       	adc	r27, r27
     62c:	a8 5a       	subi	r26, 0xA8	; 168
     62e:	bc 4f       	sbci	r27, 0xFC	; 252
     630:	88 e0       	ldi	r24, 0x08	; 8
     632:	fe 01       	movw	r30, r28
     634:	31 96       	adiw	r30, 0x01	; 1
     636:	01 90       	ld	r0, Z+
     638:	0d 92       	st	X+, r0
     63a:	8a 95       	dec	r24
     63c:	e1 f7       	brne	.-8      	; 0x636 <ds18b20_init+0x8c>
     63e:	01 50       	subi	r16, 0x01	; 1
     640:	11 09       	sbc	r17, r1
		//Resolution 12 bit
		ds18b20_WriteByte(RESOLUTION_12BIT);
	}
	else
	{
		for(i=1;i<=8;i++)
     642:	e9 f6       	brne	.-70     	; 0x5fe <ds18b20_init+0x54>
     644:	e2 cf       	rjmp	.-60     	; 0x60a <ds18b20_init+0x60>
     646:	00 e6       	ldi	r16, 0x60	; 96
     648:	13 e0       	ldi	r17, 0x03	; 3
				Dev_Cnt++;
				memcpy(Dev_ID[Dev_Cnt-1],dt,sizeof(dt));
			}
			else break;
		}
		for(i=1;i<=Dev_Cnt;i++)
     64a:	cc 24       	eor	r12, r12
     64c:	c3 94       	inc	r12
     64e:	d1 2c       	mov	r13, r1
		{
			if(!ds18b20_Reset()) return 1;
     650:	0e 94 bf 01 	call	0x37e	; 0x37e <ds18b20_Reset>
     654:	88 23       	and	r24, r24
     656:	49 f1       	breq	.+82     	; 0x6aa <ds18b20_init+0x100>
			//Match Rom
			ds18b20_WriteByte(0x55);
     658:	85 e5       	ldi	r24, 0x55	; 85
     65a:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <ds18b20_WriteByte>
     65e:	78 01       	movw	r14, r16
     660:	88 e0       	ldi	r24, 0x08	; 8
     662:	e8 0e       	add	r14, r24
     664:	f1 1c       	adc	r15, r1
			for(j=0;j<=7;j++)
			{
				ds18b20_WriteByte(Dev_ID[i-1][j]);
     666:	f8 01       	movw	r30, r16
     668:	81 91       	ld	r24, Z+
     66a:	8f 01       	movw	r16, r30
     66c:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <ds18b20_WriteByte>
		for(i=1;i<=Dev_Cnt;i++)
		{
			if(!ds18b20_Reset()) return 1;
			//Match Rom
			ds18b20_WriteByte(0x55);
			for(j=0;j<=7;j++)
     670:	0e 15       	cp	r16, r14
     672:	1f 05       	cpc	r17, r15
     674:	c1 f7       	brne	.-16     	; 0x666 <ds18b20_init+0xbc>
			{
				ds18b20_WriteByte(Dev_ID[i-1][j]);
			}
			//WRITE SCRATCHPAD
			ds18b20_WriteByte(0x4E);
     676:	8e e4       	ldi	r24, 0x4E	; 78
     678:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <ds18b20_WriteByte>
			//TH REGISTER - 30 РіСЂР°РґСѓСЃРѕРІ
			ds18b20_WriteByte(0x1E);
     67c:	8e e1       	ldi	r24, 0x1E	; 30
     67e:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <ds18b20_WriteByte>
			//TL REGISTER - 20 РіСЂР°РґСѓСЃРѕРІ
			ds18b20_WriteByte(0x14);
     682:	84 e1       	ldi	r24, 0x14	; 20
     684:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <ds18b20_WriteByte>
			//Resolution 12 bit
			ds18b20_WriteByte(RESOLUTION_12BIT);
     688:	8f e7       	ldi	r24, 0x7F	; 127
     68a:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <ds18b20_WriteByte>
				Dev_Cnt++;
				memcpy(Dev_ID[Dev_Cnt-1],dt,sizeof(dt));
			}
			else break;
		}
		for(i=1;i<=Dev_Cnt;i++)
     68e:	ff ef       	ldi	r31, 0xFF	; 255
     690:	cf 1a       	sub	r12, r31
     692:	df 0a       	sbc	r13, r31
     694:	87 01       	movw	r16, r14
     696:	80 91 b3 03 	lds	r24, 0x03B3	; 0x8003b3 <Dev_Cnt>
     69a:	90 e0       	ldi	r25, 0x00	; 0
     69c:	8c 15       	cp	r24, r12
     69e:	9d 05       	cpc	r25, r13
     6a0:	bc f6       	brge	.-82     	; 0x650 <ds18b20_init+0xa6>
			ds18b20_WriteByte(0x14);
			//Resolution 12 bit
			ds18b20_WriteByte(RESOLUTION_12BIT);
		}
	}
	return 0;
     6a2:	80 e0       	ldi	r24, 0x00	; 0
     6a4:	03 c0       	rjmp	.+6      	; 0x6ac <ds18b20_init+0x102>
	int i = 0, j=0;
	uint8_t dt[8];
	
	if(mode==SKIP_ROM)
	{		
		if(!ds18b20_Reset()) return 1;
     6a6:	81 e0       	ldi	r24, 0x01	; 1
     6a8:	01 c0       	rjmp	.+2      	; 0x6ac <ds18b20_init+0x102>
			}
			else break;
		}
		for(i=1;i<=Dev_Cnt;i++)
		{
			if(!ds18b20_Reset()) return 1;
     6aa:	81 e0       	ldi	r24, 0x01	; 1
			//Resolution 12 bit
			ds18b20_WriteByte(RESOLUTION_12BIT);
		}
	}
	return 0;
}
     6ac:	28 96       	adiw	r28, 0x08	; 8
     6ae:	0f b6       	in	r0, 0x3f	; 63
     6b0:	f8 94       	cli
     6b2:	de bf       	out	0x3e, r29	; 62
     6b4:	0f be       	out	0x3f, r0	; 63
     6b6:	cd bf       	out	0x3d, r28	; 61
     6b8:	df 91       	pop	r29
     6ba:	cf 91       	pop	r28
     6bc:	1f 91       	pop	r17
     6be:	0f 91       	pop	r16
     6c0:	ff 90       	pop	r15
     6c2:	ef 90       	pop	r14
     6c4:	df 90       	pop	r13
     6c6:	cf 90       	pop	r12
     6c8:	08 95       	ret

000006ca <ds18b20_MeasureTemperCmd>:
//----------------------------------------------------------
void ds18b20_MeasureTemperCmd(uint8_t mode, uint8_t DevNum)
{
     6ca:	0f 93       	push	r16
     6cc:	1f 93       	push	r17
     6ce:	cf 93       	push	r28
     6d0:	df 93       	push	r29
     6d2:	c8 2f       	mov	r28, r24
     6d4:	06 2f       	mov	r16, r22
	int i = 0;
	ds18b20_Reset();
     6d6:	0e 94 bf 01 	call	0x37e	; 0x37e <ds18b20_Reset>
	if(mode==SKIP_ROM)
     6da:	c1 11       	cpse	r28, r1
     6dc:	04 c0       	rjmp	.+8      	; 0x6e6 <ds18b20_MeasureTemperCmd+0x1c>
	{
		//SKIP ROM
		ds18b20_WriteByte(0xCC);
     6de:	8c ec       	ldi	r24, 0xCC	; 204
     6e0:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <ds18b20_WriteByte>
     6e4:	1b c0       	rjmp	.+54     	; 0x71c <ds18b20_MeasureTemperCmd+0x52>
	}
	else
	{
		//Match Rom
		ds18b20_WriteByte(0x55);
     6e6:	85 e5       	ldi	r24, 0x55	; 85
     6e8:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <ds18b20_WriteByte>
     6ec:	10 e0       	ldi	r17, 0x00	; 0
     6ee:	e8 01       	movw	r28, r16
     6f0:	cc 0f       	add	r28, r28
     6f2:	dd 1f       	adc	r29, r29
     6f4:	cc 0f       	add	r28, r28
     6f6:	dd 1f       	adc	r29, r29
     6f8:	cc 0f       	add	r28, r28
     6fa:	dd 1f       	adc	r29, r29
     6fc:	c8 5a       	subi	r28, 0xA8	; 168
     6fe:	dc 4f       	sbci	r29, 0xFC	; 252
     700:	00 0f       	add	r16, r16
     702:	11 1f       	adc	r17, r17
     704:	00 0f       	add	r16, r16
     706:	11 1f       	adc	r17, r17
     708:	00 0f       	add	r16, r16
     70a:	11 1f       	adc	r17, r17
     70c:	00 5a       	subi	r16, 0xA0	; 160
     70e:	1c 4f       	sbci	r17, 0xFC	; 252
		for(i=0;i<=7;i++)
		{
			ds18b20_WriteByte(Dev_ID[DevNum-1][i]);
     710:	89 91       	ld	r24, Y+
     712:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <ds18b20_WriteByte>
	}
	else
	{
		//Match Rom
		ds18b20_WriteByte(0x55);
		for(i=0;i<=7;i++)
     716:	c0 17       	cp	r28, r16
     718:	d1 07       	cpc	r29, r17
     71a:	d1 f7       	brne	.-12     	; 0x710 <ds18b20_MeasureTemperCmd+0x46>
		{
			ds18b20_WriteByte(Dev_ID[DevNum-1][i]);
		}
	}
	//CONVERT T
	ds18b20_WriteByte(0x44);
     71c:	84 e4       	ldi	r24, 0x44	; 68
     71e:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <ds18b20_WriteByte>
}
     722:	df 91       	pop	r29
     724:	cf 91       	pop	r28
     726:	1f 91       	pop	r17
     728:	0f 91       	pop	r16
     72a:	08 95       	ret

0000072c <ds18b20_ReadStratcpad>:
//----------------------------------------------------------
void ds18b20_ReadStratcpad(uint8_t mode, uint8_t *Data, uint8_t DevNum)
{
     72c:	ef 92       	push	r14
     72e:	ff 92       	push	r15
     730:	0f 93       	push	r16
     732:	1f 93       	push	r17
     734:	cf 93       	push	r28
     736:	df 93       	push	r29
     738:	c8 2f       	mov	r28, r24
     73a:	8b 01       	movw	r16, r22
     73c:	e4 2e       	mov	r14, r20
	uint8_t i;
	ds18b20_Reset();
     73e:	0e 94 bf 01 	call	0x37e	; 0x37e <ds18b20_Reset>
	if(mode==SKIP_ROM)
     742:	c1 11       	cpse	r28, r1
     744:	04 c0       	rjmp	.+8      	; 0x74e <ds18b20_ReadStratcpad+0x22>
	{
		//SKIP ROM
		ds18b20_WriteByte(0xCC);
     746:	8c ec       	ldi	r24, 0xCC	; 204
     748:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <ds18b20_WriteByte>
     74c:	1e c0       	rjmp	.+60     	; 0x78a <ds18b20_ReadStratcpad+0x5e>
	}
	else
	{
		//Match Rom
		ds18b20_WriteByte(0x55);
     74e:	85 e5       	ldi	r24, 0x55	; 85
     750:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <ds18b20_WriteByte>
     754:	f1 2c       	mov	r15, r1
     756:	e7 01       	movw	r28, r14
     758:	cc 0f       	add	r28, r28
     75a:	dd 1f       	adc	r29, r29
     75c:	cc 0f       	add	r28, r28
     75e:	dd 1f       	adc	r29, r29
     760:	cc 0f       	add	r28, r28
     762:	dd 1f       	adc	r29, r29
     764:	c8 5a       	subi	r28, 0xA8	; 168
     766:	dc 4f       	sbci	r29, 0xFC	; 252
     768:	c7 01       	movw	r24, r14
     76a:	88 0f       	add	r24, r24
     76c:	99 1f       	adc	r25, r25
     76e:	88 0f       	add	r24, r24
     770:	99 1f       	adc	r25, r25
     772:	88 0f       	add	r24, r24
     774:	99 1f       	adc	r25, r25
     776:	9c 01       	movw	r18, r24
     778:	20 5a       	subi	r18, 0xA0	; 160
     77a:	3c 4f       	sbci	r19, 0xFC	; 252
     77c:	79 01       	movw	r14, r18
		for(i=0;i<=7;i++)
		{
			ds18b20_WriteByte(Dev_ID[DevNum-1][i]);
     77e:	89 91       	ld	r24, Y+
     780:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <ds18b20_WriteByte>
	}
	else
	{
		//Match Rom
		ds18b20_WriteByte(0x55);
		for(i=0;i<=7;i++)
     784:	ce 15       	cp	r28, r14
     786:	df 05       	cpc	r29, r15
     788:	d1 f7       	brne	.-12     	; 0x77e <ds18b20_ReadStratcpad+0x52>
		{
			ds18b20_WriteByte(Dev_ID[DevNum-1][i]);
		}
	}
	//READ SCRATCHPAD
	ds18b20_WriteByte(0xBE);
     78a:	8e eb       	ldi	r24, 0xBE	; 190
     78c:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <ds18b20_WriteByte>
     790:	e8 01       	movw	r28, r16
     792:	07 5f       	subi	r16, 0xF7	; 247
     794:	1f 4f       	sbci	r17, 0xFF	; 255
	for(i=0;i<=8;i++)
	{
		Data[i] = ds18b20_ReadByte();
     796:	0e 94 2b 02 	call	0x456	; 0x456 <ds18b20_ReadByte>
     79a:	89 93       	st	Y+, r24
			ds18b20_WriteByte(Dev_ID[DevNum-1][i]);
		}
	}
	//READ SCRATCHPAD
	ds18b20_WriteByte(0xBE);
	for(i=0;i<=8;i++)
     79c:	c0 17       	cp	r28, r16
     79e:	d1 07       	cpc	r29, r17
     7a0:	d1 f7       	brne	.-12     	; 0x796 <ds18b20_ReadStratcpad+0x6a>
	{
		Data[i] = ds18b20_ReadByte();
	}
}
     7a2:	df 91       	pop	r29
     7a4:	cf 91       	pop	r28
     7a6:	1f 91       	pop	r17
     7a8:	0f 91       	pop	r16
     7aa:	ff 90       	pop	r15
     7ac:	ef 90       	pop	r14
     7ae:	08 95       	ret

000007b0 <ds18b20_GetSign>:
uint8_t ds18b20_GetSign(uint16_t dt)
{
	//С•СЂРѕРІРµСЂРёРј 11-Р№ Р±РёС‚
	if (dt&(1<<11)) return 1;
	else return 0;
}
     7b0:	93 fb       	bst	r25, 3
     7b2:	88 27       	eor	r24, r24
     7b4:	80 f9       	bld	r24, 0
     7b6:	08 95       	ret

000007b8 <main>:
float Cppm=0;

int main(void)
{
	
	adc_value=0;
     7b8:	10 92 a1 03 	sts	0x03A1, r1	; 0x8003a1 <adc_value+0x1>
     7bc:	10 92 a0 03 	sts	0x03A0, r1	; 0x8003a0 <adc_value>
//  	USART_ini(MYUBRR);
	mg12232_init();
     7c0:	0e 94 a2 06 	call	0xd44	; 0xd44 <mg12232_init>
	ADC_Init();
     7c4:	0e 94 50 01 	call	0x2a0	; 0x2a0 <ADC_Init>
	uint16_t temper_H;
// 	uint16_t temper_L;
	char c;
	uint8_t i;	
	uint8_t a;
	char status = ds18b20_init(NO_SKIP_ROM);
     7c8:	81 e0       	ldi	r24, 0x01	; 1
     7ca:	0e 94 d5 02 	call	0x5aa	; 0x5aa <ds18b20_init>
	sprintf (str1,"Init Status: %d\r\n",status);
     7ce:	1f 92       	push	r1
     7d0:	8f 93       	push	r24
     7d2:	82 e9       	ldi	r24, 0x92	; 146
     7d4:	92 e0       	ldi	r25, 0x02	; 2
     7d6:	9f 93       	push	r25
     7d8:	8f 93       	push	r24
     7da:	84 eb       	ldi	r24, 0xB4	; 180
     7dc:	93 e0       	ldi	r25, 0x03	; 3
     7de:	9f 93       	push	r25
     7e0:	8f 93       	push	r24
     7e2:	0e 94 97 0e 	call	0x1d2e	; 0x1d2e <sprintf>
	for (a=0;a<strlen(str1);a++)USART_Transmit(str1[a]);
     7e6:	0f 90       	pop	r0
     7e8:	0f 90       	pop	r0
     7ea:	0f 90       	pop	r0
     7ec:	0f 90       	pop	r0
     7ee:	0f 90       	pop	r0
     7f0:	0f 90       	pop	r0
     7f2:	c0 e0       	ldi	r28, 0x00	; 0
     7f4:	04 eb       	ldi	r16, 0xB4	; 180
     7f6:	13 e0       	ldi	r17, 0x03	; 3
     7f8:	08 c0       	rjmp	.+16     	; 0x80a <main+0x52>
     7fa:	ec 2f       	mov	r30, r28
     7fc:	f0 e0       	ldi	r31, 0x00	; 0
     7fe:	ec 54       	subi	r30, 0x4C	; 76
     800:	fc 4f       	sbci	r31, 0xFC	; 252
     802:	80 81       	ld	r24, Z
     804:	0e 94 b0 08 	call	0x1160	; 0x1160 <USART_Transmit>
     808:	cf 5f       	subi	r28, 0xFF	; 255
     80a:	f8 01       	movw	r30, r16
     80c:	01 90       	ld	r0, Z+
     80e:	00 20       	and	r0, r0
     810:	e9 f7       	brne	.-6      	; 0x80c <main+0x54>
     812:	31 97       	sbiw	r30, 0x01	; 1
     814:	e4 5b       	subi	r30, 0xB4	; 180
     816:	f3 40       	sbci	r31, 0x03	; 3
     818:	8c 2f       	mov	r24, r28
     81a:	90 e0       	ldi	r25, 0x00	; 0
     81c:	8e 17       	cp	r24, r30
     81e:	9f 07       	cpc	r25, r31
     820:	60 f3       	brcs	.-40     	; 0x7fa <main+0x42>
	sprintf(str1,"Dev count: %d\r\n", Dev_Cnt);
     822:	80 91 b3 03 	lds	r24, 0x03B3	; 0x8003b3 <Dev_Cnt>
     826:	1f 92       	push	r1
     828:	8f 93       	push	r24
     82a:	84 ea       	ldi	r24, 0xA4	; 164
     82c:	92 e0       	ldi	r25, 0x02	; 2
     82e:	9f 93       	push	r25
     830:	8f 93       	push	r24
     832:	84 eb       	ldi	r24, 0xB4	; 180
     834:	93 e0       	ldi	r25, 0x03	; 3
     836:	9f 93       	push	r25
     838:	8f 93       	push	r24
     83a:	0e 94 97 0e 	call	0x1d2e	; 0x1d2e <sprintf>
	for (a=0;a<strlen(str1);a++)USART_Transmit(str1[a]);
     83e:	0f 90       	pop	r0
     840:	0f 90       	pop	r0
     842:	0f 90       	pop	r0
     844:	0f 90       	pop	r0
     846:	0f 90       	pop	r0
     848:	0f 90       	pop	r0
     84a:	c0 e0       	ldi	r28, 0x00	; 0
     84c:	04 eb       	ldi	r16, 0xB4	; 180
     84e:	13 e0       	ldi	r17, 0x03	; 3
     850:	08 c0       	rjmp	.+16     	; 0x862 <main+0xaa>
     852:	ec 2f       	mov	r30, r28
     854:	f0 e0       	ldi	r31, 0x00	; 0
     856:	ec 54       	subi	r30, 0x4C	; 76
     858:	fc 4f       	sbci	r31, 0xFC	; 252
     85a:	80 81       	ld	r24, Z
     85c:	0e 94 b0 08 	call	0x1160	; 0x1160 <USART_Transmit>
     860:	cf 5f       	subi	r28, 0xFF	; 255
     862:	f8 01       	movw	r30, r16
     864:	01 90       	ld	r0, Z+
     866:	00 20       	and	r0, r0
     868:	e9 f7       	brne	.-6      	; 0x864 <main+0xac>
     86a:	31 97       	sbiw	r30, 0x01	; 1
     86c:	e4 5b       	subi	r30, 0xB4	; 180
     86e:	f3 40       	sbci	r31, 0x03	; 3
     870:	8c 2f       	mov	r24, r28
     872:	90 e0       	ldi	r25, 0x00	; 0
     874:	8e 17       	cp	r24, r30
     876:	9f 07       	cpc	r25, r31
     878:	60 f3       	brcs	.-40     	; 0x852 <main+0x9a>
	for(i=1;i<=Dev_Cnt;i++)
     87a:	80 91 b3 03 	lds	r24, 0x03B3	; 0x8003b3 <Dev_Cnt>
     87e:	88 23       	and	r24, r24
     880:	09 f4       	brne	.+2      	; 0x884 <main+0xcc>
     882:	30 c1       	rjmp	.+608    	; 0xae4 <__stack+0x1e5>
     884:	ff 24       	eor	r15, r15
     886:	f3 94       	inc	r15
	{
		sprintf(str1,"Device %d\r\n", i);
     888:	0f 2e       	mov	r0, r31
     88a:	f4 eb       	ldi	r31, 0xB4	; 180
     88c:	4f 2e       	mov	r4, r31
     88e:	f2 e0       	ldi	r31, 0x02	; 2
     890:	5f 2e       	mov	r5, r31
     892:	f0 2d       	mov	r31, r0
     894:	c4 eb       	ldi	r28, 0xB4	; 180
     896:	d3 e0       	ldi	r29, 0x03	; 3
		for (a=0;a<strlen(str1);a++)USART_Transmit(str1[a]);
		sprintf(str1,"ROM RAW: %02X %02X %02X %02X %02X %02X %02X %02X\r\n",
     898:	0f 2e       	mov	r0, r31
     89a:	f0 ec       	ldi	r31, 0xC0	; 192
     89c:	6f 2e       	mov	r6, r31
     89e:	f2 e0       	ldi	r31, 0x02	; 2
     8a0:	7f 2e       	mov	r7, r31
     8a2:	f0 2d       	mov	r31, r0
		Dev_ID[i-1][0], Dev_ID[i-1][1], Dev_ID[i-1][2], Dev_ID[i-1][3],
		Dev_ID[i-1][4], Dev_ID[i-1][5], Dev_ID[i-1][6], Dev_ID[i-1][7]);
		for (a=0;a<strlen(str1);a++)USART_Transmit(str1[a]);
		sprintf(str1,"Family CODE: 0x%02X\r\n", Dev_ID[i-1][0]);
     8a4:	0f 2e       	mov	r0, r31
     8a6:	f3 ef       	ldi	r31, 0xF3	; 243
     8a8:	8f 2e       	mov	r8, r31
     8aa:	f2 e0       	ldi	r31, 0x02	; 2
     8ac:	9f 2e       	mov	r9, r31
     8ae:	f0 2d       	mov	r31, r0
		for (a=0;a<strlen(str1);a++)USART_Transmit(str1[a]);
		sprintf(str1,"ROM CODE: 0x%02X%02X%02X%02X%02X%02X\r\n", Dev_ID[i-1][6], Dev_ID[i-1][5],
     8b0:	0f 2e       	mov	r0, r31
     8b2:	f9 e0       	ldi	r31, 0x09	; 9
     8b4:	af 2e       	mov	r10, r31
     8b6:	f3 e0       	ldi	r31, 0x03	; 3
     8b8:	bf 2e       	mov	r11, r31
     8ba:	f0 2d       	mov	r31, r0
		Dev_ID[i-1][4], Dev_ID[i-1][3], Dev_ID[i-1][2], Dev_ID[i-1][1]);
		for (a=0;a<strlen(str1);a++)USART_Transmit(str1[a]);
		sprintf(str1,"CRC: 0x%02X\r\n", Dev_ID[i-1][7]);
     8bc:	0f 2e       	mov	r0, r31
     8be:	f0 e3       	ldi	r31, 0x30	; 48
     8c0:	cf 2e       	mov	r12, r31
     8c2:	f3 e0       	ldi	r31, 0x03	; 3
     8c4:	df 2e       	mov	r13, r31
     8c6:	f0 2d       	mov	r31, r0
	for (a=0;a<strlen(str1);a++)USART_Transmit(str1[a]);
	sprintf(str1,"Dev count: %d\r\n", Dev_Cnt);
	for (a=0;a<strlen(str1);a++)USART_Transmit(str1[a]);
	for(i=1;i<=Dev_Cnt;i++)
	{
		sprintf(str1,"Device %d\r\n", i);
     8c8:	0f 2d       	mov	r16, r15
     8ca:	10 e0       	ldi	r17, 0x00	; 0
     8cc:	1f 92       	push	r1
     8ce:	ff 92       	push	r15
     8d0:	5f 92       	push	r5
     8d2:	4f 92       	push	r4
     8d4:	df 93       	push	r29
     8d6:	cf 93       	push	r28
     8d8:	0e 94 97 0e 	call	0x1d2e	; 0x1d2e <sprintf>
		for (a=0;a<strlen(str1);a++)USART_Transmit(str1[a]);
     8dc:	0f 90       	pop	r0
     8de:	0f 90       	pop	r0
     8e0:	0f 90       	pop	r0
     8e2:	0f 90       	pop	r0
     8e4:	0f 90       	pop	r0
     8e6:	0f 90       	pop	r0
     8e8:	e1 2c       	mov	r14, r1
     8ea:	08 c0       	rjmp	.+16     	; 0x8fc <main+0x144>
     8ec:	ee 2d       	mov	r30, r14
     8ee:	f0 e0       	ldi	r31, 0x00	; 0
     8f0:	ec 54       	subi	r30, 0x4C	; 76
     8f2:	fc 4f       	sbci	r31, 0xFC	; 252
     8f4:	80 81       	ld	r24, Z
     8f6:	0e 94 b0 08 	call	0x1160	; 0x1160 <USART_Transmit>
     8fa:	e3 94       	inc	r14
     8fc:	fe 01       	movw	r30, r28
     8fe:	01 90       	ld	r0, Z+
     900:	00 20       	and	r0, r0
     902:	e9 f7       	brne	.-6      	; 0x8fe <main+0x146>
     904:	31 97       	sbiw	r30, 0x01	; 1
     906:	e4 5b       	subi	r30, 0xB4	; 180
     908:	f3 40       	sbci	r31, 0x03	; 3
     90a:	8e 2d       	mov	r24, r14
     90c:	90 e0       	ldi	r25, 0x00	; 0
     90e:	8e 17       	cp	r24, r30
     910:	9f 07       	cpc	r25, r31
     912:	60 f3       	brcs	.-40     	; 0x8ec <main+0x134>
		sprintf(str1,"ROM RAW: %02X %02X %02X %02X %02X %02X %02X %02X\r\n",
		Dev_ID[i-1][0], Dev_ID[i-1][1], Dev_ID[i-1][2], Dev_ID[i-1][3],
		Dev_ID[i-1][4], Dev_ID[i-1][5], Dev_ID[i-1][6], Dev_ID[i-1][7]);
     914:	01 50       	subi	r16, 0x01	; 1
     916:	11 09       	sbc	r17, r1
     918:	f8 01       	movw	r30, r16
     91a:	ee 0f       	add	r30, r30
     91c:	ff 1f       	adc	r31, r31
     91e:	ee 0f       	add	r30, r30
     920:	ff 1f       	adc	r31, r31
     922:	ee 0f       	add	r30, r30
     924:	ff 1f       	adc	r31, r31
     926:	e0 5a       	subi	r30, 0xA0	; 160
     928:	fc 4f       	sbci	r31, 0xFC	; 252
	for (a=0;a<strlen(str1);a++)USART_Transmit(str1[a]);
	for(i=1;i<=Dev_Cnt;i++)
	{
		sprintf(str1,"Device %d\r\n", i);
		for (a=0;a<strlen(str1);a++)USART_Transmit(str1[a]);
		sprintf(str1,"ROM RAW: %02X %02X %02X %02X %02X %02X %02X %02X\r\n",
     92a:	87 81       	ldd	r24, Z+7	; 0x07
     92c:	1f 92       	push	r1
     92e:	8f 93       	push	r24
     930:	86 81       	ldd	r24, Z+6	; 0x06
     932:	1f 92       	push	r1
     934:	8f 93       	push	r24
     936:	85 81       	ldd	r24, Z+5	; 0x05
     938:	1f 92       	push	r1
     93a:	8f 93       	push	r24
     93c:	84 81       	ldd	r24, Z+4	; 0x04
     93e:	1f 92       	push	r1
     940:	8f 93       	push	r24
     942:	83 81       	ldd	r24, Z+3	; 0x03
     944:	1f 92       	push	r1
     946:	8f 93       	push	r24
     948:	82 81       	ldd	r24, Z+2	; 0x02
     94a:	1f 92       	push	r1
     94c:	8f 93       	push	r24
     94e:	81 81       	ldd	r24, Z+1	; 0x01
     950:	1f 92       	push	r1
     952:	8f 93       	push	r24
     954:	80 81       	ld	r24, Z
     956:	1f 92       	push	r1
     958:	8f 93       	push	r24
     95a:	7f 92       	push	r7
     95c:	6f 92       	push	r6
     95e:	df 93       	push	r29
     960:	cf 93       	push	r28
     962:	0e 94 97 0e 	call	0x1d2e	; 0x1d2e <sprintf>
		Dev_ID[i-1][0], Dev_ID[i-1][1], Dev_ID[i-1][2], Dev_ID[i-1][3],
		Dev_ID[i-1][4], Dev_ID[i-1][5], Dev_ID[i-1][6], Dev_ID[i-1][7]);
		for (a=0;a<strlen(str1);a++)USART_Transmit(str1[a]);
     966:	8d b7       	in	r24, 0x3d	; 61
     968:	9e b7       	in	r25, 0x3e	; 62
     96a:	44 96       	adiw	r24, 0x14	; 20
     96c:	0f b6       	in	r0, 0x3f	; 63
     96e:	f8 94       	cli
     970:	9e bf       	out	0x3e, r25	; 62
     972:	0f be       	out	0x3f, r0	; 63
     974:	8d bf       	out	0x3d, r24	; 61
     976:	e1 2c       	mov	r14, r1
     978:	08 c0       	rjmp	.+16     	; 0x98a <__stack+0x8b>
     97a:	ee 2d       	mov	r30, r14
     97c:	f0 e0       	ldi	r31, 0x00	; 0
     97e:	ec 54       	subi	r30, 0x4C	; 76
     980:	fc 4f       	sbci	r31, 0xFC	; 252
     982:	80 81       	ld	r24, Z
     984:	0e 94 b0 08 	call	0x1160	; 0x1160 <USART_Transmit>
     988:	e3 94       	inc	r14
     98a:	fe 01       	movw	r30, r28
     98c:	01 90       	ld	r0, Z+
     98e:	00 20       	and	r0, r0
     990:	e9 f7       	brne	.-6      	; 0x98c <__stack+0x8d>
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	e4 5b       	subi	r30, 0xB4	; 180
     996:	f3 40       	sbci	r31, 0x03	; 3
     998:	8e 2d       	mov	r24, r14
     99a:	90 e0       	ldi	r25, 0x00	; 0
     99c:	8e 17       	cp	r24, r30
     99e:	9f 07       	cpc	r25, r31
     9a0:	60 f3       	brcs	.-40     	; 0x97a <__stack+0x7b>
		sprintf(str1,"Family CODE: 0x%02X\r\n", Dev_ID[i-1][0]);
     9a2:	f8 01       	movw	r30, r16
     9a4:	ee 0f       	add	r30, r30
     9a6:	ff 1f       	adc	r31, r31
     9a8:	ee 0f       	add	r30, r30
     9aa:	ff 1f       	adc	r31, r31
     9ac:	ee 0f       	add	r30, r30
     9ae:	ff 1f       	adc	r31, r31
     9b0:	e0 5a       	subi	r30, 0xA0	; 160
     9b2:	fc 4f       	sbci	r31, 0xFC	; 252
     9b4:	80 81       	ld	r24, Z
     9b6:	1f 92       	push	r1
     9b8:	8f 93       	push	r24
     9ba:	9f 92       	push	r9
     9bc:	8f 92       	push	r8
     9be:	df 93       	push	r29
     9c0:	cf 93       	push	r28
     9c2:	0e 94 97 0e 	call	0x1d2e	; 0x1d2e <sprintf>
		for (a=0;a<strlen(str1);a++)USART_Transmit(str1[a]);
     9c6:	0f 90       	pop	r0
     9c8:	0f 90       	pop	r0
     9ca:	0f 90       	pop	r0
     9cc:	0f 90       	pop	r0
     9ce:	0f 90       	pop	r0
     9d0:	0f 90       	pop	r0
     9d2:	e1 2c       	mov	r14, r1
     9d4:	08 c0       	rjmp	.+16     	; 0x9e6 <__stack+0xe7>
     9d6:	ee 2d       	mov	r30, r14
     9d8:	f0 e0       	ldi	r31, 0x00	; 0
     9da:	ec 54       	subi	r30, 0x4C	; 76
     9dc:	fc 4f       	sbci	r31, 0xFC	; 252
     9de:	80 81       	ld	r24, Z
     9e0:	0e 94 b0 08 	call	0x1160	; 0x1160 <USART_Transmit>
     9e4:	e3 94       	inc	r14
     9e6:	fe 01       	movw	r30, r28
     9e8:	01 90       	ld	r0, Z+
     9ea:	00 20       	and	r0, r0
     9ec:	e9 f7       	brne	.-6      	; 0x9e8 <__stack+0xe9>
     9ee:	31 97       	sbiw	r30, 0x01	; 1
     9f0:	e4 5b       	subi	r30, 0xB4	; 180
     9f2:	f3 40       	sbci	r31, 0x03	; 3
     9f4:	8e 2d       	mov	r24, r14
     9f6:	90 e0       	ldi	r25, 0x00	; 0
     9f8:	8e 17       	cp	r24, r30
     9fa:	9f 07       	cpc	r25, r31
     9fc:	60 f3       	brcs	.-40     	; 0x9d6 <__stack+0xd7>
		sprintf(str1,"ROM CODE: 0x%02X%02X%02X%02X%02X%02X\r\n", Dev_ID[i-1][6], Dev_ID[i-1][5],
		Dev_ID[i-1][4], Dev_ID[i-1][3], Dev_ID[i-1][2], Dev_ID[i-1][1]);
     9fe:	f8 01       	movw	r30, r16
     a00:	ee 0f       	add	r30, r30
     a02:	ff 1f       	adc	r31, r31
     a04:	ee 0f       	add	r30, r30
     a06:	ff 1f       	adc	r31, r31
     a08:	ee 0f       	add	r30, r30
     a0a:	ff 1f       	adc	r31, r31
     a0c:	e0 5a       	subi	r30, 0xA0	; 160
     a0e:	fc 4f       	sbci	r31, 0xFC	; 252
		Dev_ID[i-1][0], Dev_ID[i-1][1], Dev_ID[i-1][2], Dev_ID[i-1][3],
		Dev_ID[i-1][4], Dev_ID[i-1][5], Dev_ID[i-1][6], Dev_ID[i-1][7]);
		for (a=0;a<strlen(str1);a++)USART_Transmit(str1[a]);
		sprintf(str1,"Family CODE: 0x%02X\r\n", Dev_ID[i-1][0]);
		for (a=0;a<strlen(str1);a++)USART_Transmit(str1[a]);
		sprintf(str1,"ROM CODE: 0x%02X%02X%02X%02X%02X%02X\r\n", Dev_ID[i-1][6], Dev_ID[i-1][5],
     a10:	81 81       	ldd	r24, Z+1	; 0x01
     a12:	1f 92       	push	r1
     a14:	8f 93       	push	r24
     a16:	82 81       	ldd	r24, Z+2	; 0x02
     a18:	1f 92       	push	r1
     a1a:	8f 93       	push	r24
     a1c:	83 81       	ldd	r24, Z+3	; 0x03
     a1e:	1f 92       	push	r1
     a20:	8f 93       	push	r24
     a22:	84 81       	ldd	r24, Z+4	; 0x04
     a24:	1f 92       	push	r1
     a26:	8f 93       	push	r24
     a28:	85 81       	ldd	r24, Z+5	; 0x05
     a2a:	1f 92       	push	r1
     a2c:	8f 93       	push	r24
     a2e:	86 81       	ldd	r24, Z+6	; 0x06
     a30:	1f 92       	push	r1
     a32:	8f 93       	push	r24
     a34:	bf 92       	push	r11
     a36:	af 92       	push	r10
     a38:	df 93       	push	r29
     a3a:	cf 93       	push	r28
     a3c:	0e 94 97 0e 	call	0x1d2e	; 0x1d2e <sprintf>
		Dev_ID[i-1][4], Dev_ID[i-1][3], Dev_ID[i-1][2], Dev_ID[i-1][1]);
		for (a=0;a<strlen(str1);a++)USART_Transmit(str1[a]);
     a40:	8d b7       	in	r24, 0x3d	; 61
     a42:	9e b7       	in	r25, 0x3e	; 62
     a44:	40 96       	adiw	r24, 0x10	; 16
     a46:	0f b6       	in	r0, 0x3f	; 63
     a48:	f8 94       	cli
     a4a:	9e bf       	out	0x3e, r25	; 62
     a4c:	0f be       	out	0x3f, r0	; 63
     a4e:	8d bf       	out	0x3d, r24	; 61
     a50:	e1 2c       	mov	r14, r1
     a52:	08 c0       	rjmp	.+16     	; 0xa64 <__stack+0x165>
     a54:	ee 2d       	mov	r30, r14
     a56:	f0 e0       	ldi	r31, 0x00	; 0
     a58:	ec 54       	subi	r30, 0x4C	; 76
     a5a:	fc 4f       	sbci	r31, 0xFC	; 252
     a5c:	80 81       	ld	r24, Z
     a5e:	0e 94 b0 08 	call	0x1160	; 0x1160 <USART_Transmit>
     a62:	e3 94       	inc	r14
     a64:	fe 01       	movw	r30, r28
     a66:	01 90       	ld	r0, Z+
     a68:	00 20       	and	r0, r0
     a6a:	e9 f7       	brne	.-6      	; 0xa66 <__stack+0x167>
     a6c:	31 97       	sbiw	r30, 0x01	; 1
     a6e:	e4 5b       	subi	r30, 0xB4	; 180
     a70:	f3 40       	sbci	r31, 0x03	; 3
     a72:	8e 2d       	mov	r24, r14
     a74:	90 e0       	ldi	r25, 0x00	; 0
     a76:	8e 17       	cp	r24, r30
     a78:	9f 07       	cpc	r25, r31
     a7a:	60 f3       	brcs	.-40     	; 0xa54 <__stack+0x155>
		sprintf(str1,"CRC: 0x%02X\r\n", Dev_ID[i-1][7]);
     a7c:	f8 01       	movw	r30, r16
     a7e:	ee 0f       	add	r30, r30
     a80:	ff 1f       	adc	r31, r31
     a82:	ee 0f       	add	r30, r30
     a84:	ff 1f       	adc	r31, r31
     a86:	ee 0f       	add	r30, r30
     a88:	ff 1f       	adc	r31, r31
     a8a:	e0 5a       	subi	r30, 0xA0	; 160
     a8c:	fc 4f       	sbci	r31, 0xFC	; 252
     a8e:	87 81       	ldd	r24, Z+7	; 0x07
     a90:	1f 92       	push	r1
     a92:	8f 93       	push	r24
     a94:	df 92       	push	r13
     a96:	cf 92       	push	r12
     a98:	df 93       	push	r29
     a9a:	cf 93       	push	r28
     a9c:	0e 94 97 0e 	call	0x1d2e	; 0x1d2e <sprintf>
		for (a=0;a<strlen(str1);a++)USART_Transmit(str1[a]);
     aa0:	0f 90       	pop	r0
     aa2:	0f 90       	pop	r0
     aa4:	0f 90       	pop	r0
     aa6:	0f 90       	pop	r0
     aa8:	0f 90       	pop	r0
     aaa:	0f 90       	pop	r0
     aac:	10 e0       	ldi	r17, 0x00	; 0
     aae:	08 c0       	rjmp	.+16     	; 0xac0 <__stack+0x1c1>
     ab0:	e1 2f       	mov	r30, r17
     ab2:	f0 e0       	ldi	r31, 0x00	; 0
     ab4:	ec 54       	subi	r30, 0x4C	; 76
     ab6:	fc 4f       	sbci	r31, 0xFC	; 252
     ab8:	80 81       	ld	r24, Z
     aba:	0e 94 b0 08 	call	0x1160	; 0x1160 <USART_Transmit>
     abe:	1f 5f       	subi	r17, 0xFF	; 255
     ac0:	fe 01       	movw	r30, r28
     ac2:	01 90       	ld	r0, Z+
     ac4:	00 20       	and	r0, r0
     ac6:	e9 f7       	brne	.-6      	; 0xac2 <__stack+0x1c3>
     ac8:	31 97       	sbiw	r30, 0x01	; 1
     aca:	e4 5b       	subi	r30, 0xB4	; 180
     acc:	f3 40       	sbci	r31, 0x03	; 3
     ace:	81 2f       	mov	r24, r17
     ad0:	90 e0       	ldi	r25, 0x00	; 0
     ad2:	8e 17       	cp	r24, r30
     ad4:	9f 07       	cpc	r25, r31
     ad6:	60 f3       	brcs	.-40     	; 0xab0 <__stack+0x1b1>
	char status = ds18b20_init(NO_SKIP_ROM);
	sprintf (str1,"Init Status: %d\r\n",status);
	for (a=0;a<strlen(str1);a++)USART_Transmit(str1[a]);
	sprintf(str1,"Dev count: %d\r\n", Dev_Cnt);
	for (a=0;a<strlen(str1);a++)USART_Transmit(str1[a]);
	for(i=1;i<=Dev_Cnt;i++)
     ad8:	f3 94       	inc	r15
     ada:	80 91 b3 03 	lds	r24, 0x03B3	; 0x8003b3 <Dev_Cnt>
     ade:	8f 15       	cp	r24, r15
     ae0:	08 f0       	brcs	.+2      	; 0xae4 <__stack+0x1e5>
     ae2:	f2 ce       	rjmp	.-540    	; 0x8c8 <main+0x110>
				command_write(CMD_COLUMN+1,3);
			}
			uint8_t chip;
			if(i==2||i==4||i==6){chip=2;command_write(CMD_COLUMN+18,2);}
			else chip=1;
			sprintf(str1,"%d=%c%d", i, c, temper_H);
     ae4:	0f 2e       	mov	r0, r31
     ae6:	fe e3       	ldi	r31, 0x3E	; 62
     ae8:	ef 2e       	mov	r14, r31
     aea:	f3 e0       	ldi	r31, 0x03	; 3
     aec:	ff 2e       	mov	r15, r31
     aee:	f0 2d       	mov	r31, r0
     af0:	04 eb       	ldi	r16, 0xB4	; 180
     af2:	13 e0       	ldi	r17, 0x03	; 3
// 			for (a=0;a<strlen(str1);a++)USART_Transmit(str1[a]);
		}
//		n=(float)adc_value*5000/1024;
		Cppm=(adc_value-82)*4.86*3.125;
		dht11_start();
		sprintf(str1,"T=%d H=%d ADC=%.f\r\n", dht11_temp()+3, dht11_humid(), Cppm);
     af4:	0f 2e       	mov	r0, r31
     af6:	f6 e4       	ldi	r31, 0x46	; 70
     af8:	cf 2e       	mov	r12, r31
     afa:	f3 e0       	ldi	r31, 0x03	; 3
     afc:	df 2e       	mov	r13, r31
     afe:	f0 2d       	mov	r31, r0
		for (a=0;a<strlen(str1);a++)USART_Transmit(str1[a]);
	}
	
    while (1) 
    {
		sei();
     b00:	78 94       	sei
// 		for(i=1;i<=Dev_Cnt;i++)
// 		{
// 		}
		clear_lcd();
     b02:	0e 94 8a 06 	call	0xd14	; 0xd14 <clear_lcd>
		ds18b20_MeasureTemperCmd(SKIP_ROM, 0);
     b06:	60 e0       	ldi	r22, 0x00	; 0
     b08:	80 e0       	ldi	r24, 0x00	; 0
     b0a:	0e 94 65 03 	call	0x6ca	; 0x6ca <ds18b20_MeasureTemperCmd>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     b0e:	8f ef       	ldi	r24, 0xFF	; 255
     b10:	9f e0       	ldi	r25, 0x0F	; 15
     b12:	27 e2       	ldi	r18, 0x27	; 39
     b14:	81 50       	subi	r24, 0x01	; 1
     b16:	90 40       	sbci	r25, 0x00	; 0
     b18:	20 40       	sbci	r18, 0x00	; 0
     b1a:	e1 f7       	brne	.-8      	; 0xb14 <__stack+0x215>
     b1c:	00 c0       	rjmp	.+0      	; 0xb1e <__stack+0x21f>
     b1e:	00 00       	nop
		_delay_ms(800);
		for(i=1;i<=Dev_Cnt;i++)
     b20:	80 91 b3 03 	lds	r24, 0x03B3	; 0x8003b3 <Dev_Cnt>
     b24:	88 23       	and	r24, r24
     b26:	09 f4       	brne	.+2      	; 0xb2a <__stack+0x22b>
     b28:	87 c0       	rjmp	.+270    	; 0xc38 <__stack+0x339>
     b2a:	bb 24       	eor	r11, r11
     b2c:	b3 94       	inc	r11
		{
			ds18b20_ReadStratcpad(NO_SKIP_ROM, dt, i);
     b2e:	4b 2d       	mov	r20, r11
     b30:	64 ef       	ldi	r22, 0xF4	; 244
     b32:	73 e0       	ldi	r23, 0x03	; 3
     b34:	81 e0       	ldi	r24, 0x01	; 1
     b36:	0e 94 96 03 	call	0x72c	; 0x72c <ds18b20_ReadStratcpad>
// 			sprintf(str1,"STRATHPAD %d: %02X %02X %02X %02X %02X %02X %02X %02X %02X; ",
// 			i, dt[0], dt[1], dt[2], dt[3], dt[4], dt[5], dt[6], dt[7], dt[8]);
// 			for (a=0;a<strlen(str1);a++)USART_Transmit(str1[a]);
			raw_temper = ((uint16_t)dt[1]<<8)|dt[0];
     b3a:	e4 ef       	ldi	r30, 0xF4	; 244
     b3c:	f3 e0       	ldi	r31, 0x03	; 3
     b3e:	81 80       	ldd	r8, Z+1	; 0x01
     b40:	91 2c       	mov	r9, r1
     b42:	98 2c       	mov	r9, r8
     b44:	88 24       	eor	r8, r8
     b46:	80 81       	ld	r24, Z
     b48:	88 2a       	or	r8, r24
			if(ds18b20_GetSign(raw_temper)) c='-';
     b4a:	c4 01       	movw	r24, r8
     b4c:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <ds18b20_GetSign>
     b50:	81 11       	cpse	r24, r1
     b52:	02 c0       	rjmp	.+4      	; 0xb58 <__stack+0x259>
			else c='+';
     b54:	cb e2       	ldi	r28, 0x2B	; 43
     b56:	01 c0       	rjmp	.+2      	; 0xb5a <__stack+0x25b>
			ds18b20_ReadStratcpad(NO_SKIP_ROM, dt, i);
// 			sprintf(str1,"STRATHPAD %d: %02X %02X %02X %02X %02X %02X %02X %02X %02X; ",
// 			i, dt[0], dt[1], dt[2], dt[3], dt[4], dt[5], dt[6], dt[7], dt[8]);
// 			for (a=0;a<strlen(str1);a++)USART_Transmit(str1[a]);
			raw_temper = ((uint16_t)dt[1]<<8)|dt[0];
			if(ds18b20_GetSign(raw_temper)) c='-';
     b58:	cd e2       	ldi	r28, 0x2D	; 45
			else c='+';
// 			float t=ds18b20_Convert(raw_temper);
			temper_H = (raw_temper&0x0fff)>>4;
     b5a:	8f e0       	ldi	r24, 0x0F	; 15
     b5c:	98 22       	and	r9, r24
     b5e:	96 94       	lsr	r9
     b60:	87 94       	ror	r8
     b62:	96 94       	lsr	r9
     b64:	87 94       	ror	r8
     b66:	96 94       	lsr	r9
     b68:	87 94       	ror	r8
     b6a:	96 94       	lsr	r9
     b6c:	87 94       	ror	r8
// 			temper_L = (raw_temper&0x000f)*625;
			if (i==1){
     b6e:	91 e0       	ldi	r25, 0x01	; 1
     b70:	b9 12       	cpse	r11, r25
     b72:	09 c0       	rjmp	.+18     	; 0xb86 <__stack+0x287>
				command_write(CMD_PAGE+1,3);
     b74:	63 e0       	ldi	r22, 0x03	; 3
     b76:	89 eb       	ldi	r24, 0xB9	; 185
     b78:	0e 94 6e 06 	call	0xcdc	; 0xcdc <command_write>
				command_write(CMD_COLUMN+1,3);
     b7c:	63 e0       	ldi	r22, 0x03	; 3
     b7e:	84 e1       	ldi	r24, 0x14	; 20
     b80:	0e 94 6e 06 	call	0xcdc	; 0xcdc <command_write>
     b84:	1a c0       	rjmp	.+52     	; 0xbba <__stack+0x2bb>
			}
			if (i==3){
     b86:	23 e0       	ldi	r18, 0x03	; 3
     b88:	b2 12       	cpse	r11, r18
     b8a:	0a c0       	rjmp	.+20     	; 0xba0 <__stack+0x2a1>
				command_write(CMD_PAGE+2,3);
     b8c:	63 e0       	ldi	r22, 0x03	; 3
     b8e:	8a eb       	ldi	r24, 0xBA	; 186
     b90:	0e 94 6e 06 	call	0xcdc	; 0xcdc <command_write>
				command_write(CMD_COLUMN+1,3);
     b94:	63 e0       	ldi	r22, 0x03	; 3
     b96:	84 e1       	ldi	r24, 0x14	; 20
     b98:	0e 94 6e 06 	call	0xcdc	; 0xcdc <command_write>
				command_write(CMD_PAGE+3,3);
				command_write(CMD_COLUMN+1,3);
			}
			uint8_t chip;
			if(i==2||i==4||i==6){chip=2;command_write(CMD_COLUMN+18,2);}
			else chip=1;
     b9c:	d1 e0       	ldi	r29, 0x01	; 1
     b9e:	1b c0       	rjmp	.+54     	; 0xbd6 <__stack+0x2d7>
				command_write(CMD_COLUMN+1,3);
			}
			if (i==3){
				command_write(CMD_PAGE+2,3);
				command_write(CMD_COLUMN+1,3);
			}if (i==5){
     ba0:	85 e0       	ldi	r24, 0x05	; 5
     ba2:	b8 12       	cpse	r11, r24
     ba4:	0a c0       	rjmp	.+20     	; 0xbba <__stack+0x2bb>
				command_write(CMD_PAGE+3,3);
     ba6:	63 e0       	ldi	r22, 0x03	; 3
     ba8:	8b eb       	ldi	r24, 0xBB	; 187
     baa:	0e 94 6e 06 	call	0xcdc	; 0xcdc <command_write>
				command_write(CMD_COLUMN+1,3);
     bae:	63 e0       	ldi	r22, 0x03	; 3
     bb0:	84 e1       	ldi	r24, 0x14	; 20
     bb2:	0e 94 6e 06 	call	0xcdc	; 0xcdc <command_write>
			}
			uint8_t chip;
			if(i==2||i==4||i==6){chip=2;command_write(CMD_COLUMN+18,2);}
			else chip=1;
     bb6:	d1 e0       	ldi	r29, 0x01	; 1
     bb8:	0e c0       	rjmp	.+28     	; 0xbd6 <__stack+0x2d7>
			}if (i==5){
				command_write(CMD_PAGE+3,3);
				command_write(CMD_COLUMN+1,3);
			}
			uint8_t chip;
			if(i==2||i==4||i==6){chip=2;command_write(CMD_COLUMN+18,2);}
     bba:	8b 2d       	mov	r24, r11
     bbc:	8b 7f       	andi	r24, 0xFB	; 251
     bbe:	82 30       	cpi	r24, 0x02	; 2
     bc0:	19 f0       	breq	.+6      	; 0xbc8 <__stack+0x2c9>
     bc2:	94 e0       	ldi	r25, 0x04	; 4
     bc4:	b9 12       	cpse	r11, r25
     bc6:	06 c0       	rjmp	.+12     	; 0xbd4 <__stack+0x2d5>
     bc8:	62 e0       	ldi	r22, 0x02	; 2
     bca:	85 e2       	ldi	r24, 0x25	; 37
     bcc:	0e 94 6e 06 	call	0xcdc	; 0xcdc <command_write>
     bd0:	d2 e0       	ldi	r29, 0x02	; 2
     bd2:	01 c0       	rjmp	.+2      	; 0xbd6 <__stack+0x2d7>
			else chip=1;
     bd4:	d1 e0       	ldi	r29, 0x01	; 1
			sprintf(str1,"%d=%c%d", i, c, temper_H);
     bd6:	9f 92       	push	r9
     bd8:	8f 92       	push	r8
     bda:	1f 92       	push	r1
     bdc:	cf 93       	push	r28
     bde:	1f 92       	push	r1
     be0:	bf 92       	push	r11
     be2:	ff 92       	push	r15
     be4:	ef 92       	push	r14
     be6:	1f 93       	push	r17
     be8:	0f 93       	push	r16
     bea:	0e 94 97 0e 	call	0x1d2e	; 0x1d2e <sprintf>
			for (a=0;a<strlen(str1);a++)number_write(str1[a],chip);
     bee:	8d b7       	in	r24, 0x3d	; 61
     bf0:	9e b7       	in	r25, 0x3e	; 62
     bf2:	0a 96       	adiw	r24, 0x0a	; 10
     bf4:	0f b6       	in	r0, 0x3f	; 63
     bf6:	f8 94       	cli
     bf8:	9e bf       	out	0x3e, r25	; 62
     bfa:	0f be       	out	0x3f, r0	; 63
     bfc:	8d bf       	out	0x3d, r24	; 61
     bfe:	c0 e0       	ldi	r28, 0x00	; 0
     c00:	09 c0       	rjmp	.+18     	; 0xc14 <__stack+0x315>
     c02:	ec 2f       	mov	r30, r28
     c04:	f0 e0       	ldi	r31, 0x00	; 0
     c06:	ec 54       	subi	r30, 0x4C	; 76
     c08:	fc 4f       	sbci	r31, 0xFC	; 252
     c0a:	6d 2f       	mov	r22, r29
     c0c:	80 81       	ld	r24, Z
     c0e:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <number_write>
     c12:	cf 5f       	subi	r28, 0xFF	; 255
     c14:	f8 01       	movw	r30, r16
     c16:	01 90       	ld	r0, Z+
     c18:	00 20       	and	r0, r0
     c1a:	e9 f7       	brne	.-6      	; 0xc16 <__stack+0x317>
     c1c:	31 97       	sbiw	r30, 0x01	; 1
     c1e:	e4 5b       	subi	r30, 0xB4	; 180
     c20:	f3 40       	sbci	r31, 0x03	; 3
     c22:	8c 2f       	mov	r24, r28
     c24:	90 e0       	ldi	r25, 0x00	; 0
     c26:	8e 17       	cp	r24, r30
     c28:	9f 07       	cpc	r25, r31
     c2a:	58 f3       	brcs	.-42     	; 0xc02 <__stack+0x303>
// 		{
// 		}
		clear_lcd();
		ds18b20_MeasureTemperCmd(SKIP_ROM, 0);
		_delay_ms(800);
		for(i=1;i<=Dev_Cnt;i++)
     c2c:	b3 94       	inc	r11
     c2e:	80 91 b3 03 	lds	r24, 0x03B3	; 0x8003b3 <Dev_Cnt>
     c32:	8b 15       	cp	r24, r11
     c34:	08 f0       	brcs	.+2      	; 0xc38 <__stack+0x339>
     c36:	7b cf       	rjmp	.-266    	; 0xb2e <__stack+0x22f>
			for (a=0;a<strlen(str1);a++)number_write(str1[a],chip);
// 			sprintf(str1,"Raw t: 0x%04X; t: %c%.3f\r\n", raw_temper, c, t);
// 			for (a=0;a<strlen(str1);a++)USART_Transmit(str1[a]);
		}
//		n=(float)adc_value*5000/1024;
		Cppm=(adc_value-82)*4.86*3.125;
     c38:	60 91 a0 03 	lds	r22, 0x03A0	; 0x8003a0 <adc_value>
     c3c:	70 91 a1 03 	lds	r23, 0x03A1	; 0x8003a1 <adc_value+0x1>
     c40:	62 55       	subi	r22, 0x52	; 82
     c42:	71 09       	sbc	r23, r1
     c44:	80 e0       	ldi	r24, 0x00	; 0
     c46:	90 e0       	ldi	r25, 0x00	; 0
     c48:	0e 94 b8 08 	call	0x1170	; 0x1170 <__floatunsisf>
     c4c:	2f e1       	ldi	r18, 0x1F	; 31
     c4e:	35 e8       	ldi	r19, 0x85	; 133
     c50:	4b e9       	ldi	r20, 0x9B	; 155
     c52:	50 e4       	ldi	r21, 0x40	; 64
     c54:	0e 94 46 09 	call	0x128c	; 0x128c <__mulsf3>
     c58:	20 e0       	ldi	r18, 0x00	; 0
     c5a:	30 e0       	ldi	r19, 0x00	; 0
     c5c:	48 e4       	ldi	r20, 0x48	; 72
     c5e:	50 e4       	ldi	r21, 0x40	; 64
     c60:	0e 94 46 09 	call	0x128c	; 0x128c <__mulsf3>
     c64:	60 93 5c 03 	sts	0x035C, r22	; 0x80035c <Cppm>
     c68:	70 93 5d 03 	sts	0x035D, r23	; 0x80035d <Cppm+0x1>
     c6c:	80 93 5e 03 	sts	0x035E, r24	; 0x80035e <Cppm+0x2>
     c70:	90 93 5f 03 	sts	0x035F, r25	; 0x80035f <Cppm+0x3>
		dht11_start();
     c74:	0e 94 75 01 	call	0x2ea	; 0x2ea <dht11_start>
		sprintf(str1,"T=%d H=%d ADC=%.f\r\n", dht11_temp()+3, dht11_humid(), Cppm);
     c78:	d0 91 5c 03 	lds	r29, 0x035C	; 0x80035c <Cppm>
     c7c:	b0 90 5d 03 	lds	r11, 0x035D	; 0x80035d <Cppm+0x1>
     c80:	90 90 5e 03 	lds	r9, 0x035E	; 0x80035e <Cppm+0x2>
     c84:	80 90 5f 03 	lds	r8, 0x035F	; 0x80035f <Cppm+0x3>
     c88:	0e 94 bc 01 	call	0x378	; 0x378 <dht11_humid>
     c8c:	c8 2f       	mov	r28, r24
     c8e:	0e 94 b9 01 	call	0x372	; 0x372 <dht11_temp>
     c92:	8f 92       	push	r8
     c94:	9f 92       	push	r9
     c96:	bf 92       	push	r11
     c98:	df 93       	push	r29
     c9a:	1f 92       	push	r1
     c9c:	cf 93       	push	r28
     c9e:	90 e0       	ldi	r25, 0x00	; 0
     ca0:	03 96       	adiw	r24, 0x03	; 3
     ca2:	9f 93       	push	r25
     ca4:	8f 93       	push	r24
     ca6:	df 92       	push	r13
     ca8:	cf 92       	push	r12
     caa:	1f 93       	push	r17
     cac:	0f 93       	push	r16
     cae:	0e 94 97 0e 	call	0x1d2e	; 0x1d2e <sprintf>
// 		for (a=0;a<strlen(str1);a++)USART_Transmit(str1[a]);
		mg12232_string_write(str1);
     cb2:	c8 01       	movw	r24, r16
     cb4:	0e 94 42 08 	call	0x1084	; 0x1084 <mg12232_string_write>
     cb8:	9f ef       	ldi	r25, 0xFF	; 255
     cba:	2b e7       	ldi	r18, 0x7B	; 123
     cbc:	82 e9       	ldi	r24, 0x92	; 146
     cbe:	91 50       	subi	r25, 0x01	; 1
     cc0:	20 40       	sbci	r18, 0x00	; 0
     cc2:	80 40       	sbci	r24, 0x00	; 0
     cc4:	e1 f7       	brne	.-8      	; 0xcbe <__stack+0x3bf>
     cc6:	00 c0       	rjmp	.+0      	; 0xcc8 <__stack+0x3c9>
     cc8:	00 00       	nop
     cca:	8d b7       	in	r24, 0x3d	; 61
     ccc:	9e b7       	in	r25, 0x3e	; 62
     cce:	0c 96       	adiw	r24, 0x0c	; 12
     cd0:	0f b6       	in	r0, 0x3f	; 63
     cd2:	f8 94       	cli
     cd4:	9e bf       	out	0x3e, r25	; 62
     cd6:	0f be       	out	0x3f, r0	; 63
     cd8:	8d bf       	out	0x3d, r24	; 61
     cda:	12 cf       	rjmp	.-476    	; 0xb00 <__stack+0x201>

00000cdc <command_write>:
	command_write(CMD_COLUMN+0,3);
	command_write(CMD_START_LINE+0,3);
}

void command_write(uint8_t data, uint8_t chip){
	DATA_DDR=0xff;
     cdc:	9f ef       	ldi	r25, 0xFF	; 255
     cde:	9a b9       	out	0x0a, r25	; 10
	DATA_PORT=data;
     ce0:	8b b9       	out	0x0b, r24	; 11
	A0_PORT &=~(1<<A0_PIN_NUM);
     ce2:	2a 98       	cbi	0x05, 2	; 5
	if(chip&1) CS1_PORT |=(1<<CS1_PIN_NUM);
     ce4:	60 fd       	sbrc	r22, 0
     ce6:	28 9a       	sbi	0x05, 0	; 5
	if(chip&2) CS2_PORT |=(1<<CS2_PIN_NUM);
     ce8:	61 fd       	sbrc	r22, 1
     cea:	29 9a       	sbi	0x05, 1	; 5
	CS1_PORT &=~((1<<CS1_PIN_NUM)|(1<<CS2_PIN_NUM));
     cec:	85 b1       	in	r24, 0x05	; 5
     cee:	8c 7f       	andi	r24, 0xFC	; 252
     cf0:	85 b9       	out	0x05, r24	; 5
	DATA_PORT=0;
     cf2:	1b b8       	out	0x0b, r1	; 11
	DATA_DDR=0;
     cf4:	1a b8       	out	0x0a, r1	; 10
     cf6:	08 95       	ret

00000cf8 <data_write>:
}

void data_write(uint8_t data, uint8_t chip){
	DATA_DDR=0xff;
     cf8:	9f ef       	ldi	r25, 0xFF	; 255
     cfa:	9a b9       	out	0x0a, r25	; 10
	DATA_PORT=data;
     cfc:	8b b9       	out	0x0b, r24	; 11
	A0_PORT |=(1<<A0_PIN_NUM);
     cfe:	2a 9a       	sbi	0x05, 2	; 5
	if(chip&1) CS1_PORT |=(1<<CS1_PIN_NUM);
     d00:	60 fd       	sbrc	r22, 0
     d02:	28 9a       	sbi	0x05, 0	; 5
	if(chip&2) CS2_PORT |=(1<<CS2_PIN_NUM);
     d04:	61 fd       	sbrc	r22, 1
     d06:	29 9a       	sbi	0x05, 1	; 5
	CS1_PORT &= ~((1 << CS1_PIN_NUM)|(1 << CS2_PIN_NUM));
     d08:	85 b1       	in	r24, 0x05	; 5
     d0a:	8c 7f       	andi	r24, 0xFC	; 252
     d0c:	85 b9       	out	0x05, r24	; 5
	DATA_PORT=0;
     d0e:	1b b8       	out	0x0b, r1	; 11
	DATA_DDR=0;
     d10:	1a b8       	out	0x0a, r1	; 10
     d12:	08 95       	ret

00000d14 <clear_lcd>:
}
void clear_lcd(void){
     d14:	cf 93       	push	r28
     d16:	df 93       	push	r29
     d18:	d8 eb       	ldi	r29, 0xB8	; 184
	for (uint8_t page = 0; page < 4; page++) {
		command_write(CMD_PAGE + page, 3);
     d1a:	63 e0       	ldi	r22, 0x03	; 3
     d1c:	8d 2f       	mov	r24, r29
     d1e:	0e 94 6e 06 	call	0xcdc	; 0xcdc <command_write>
		command_write(CMD_COLUMN + 0, 3);
     d22:	63 e0       	ldi	r22, 0x03	; 3
     d24:	83 e1       	ldi	r24, 0x13	; 19
     d26:	0e 94 6e 06 	call	0xcdc	; 0xcdc <command_write>
     d2a:	cd e3       	ldi	r28, 0x3D	; 61
		for (uint8_t x = 0; x < 61; x++) {
			data_write(0, 3);
     d2c:	63 e0       	ldi	r22, 0x03	; 3
     d2e:	80 e0       	ldi	r24, 0x00	; 0
     d30:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <data_write>
     d34:	c1 50       	subi	r28, 0x01	; 1
}
void clear_lcd(void){
	for (uint8_t page = 0; page < 4; page++) {
		command_write(CMD_PAGE + page, 3);
		command_write(CMD_COLUMN + 0, 3);
		for (uint8_t x = 0; x < 61; x++) {
     d36:	d1 f7       	brne	.-12     	; 0xd2c <clear_lcd+0x18>
     d38:	df 5f       	subi	r29, 0xFF	; 255
	CS1_PORT &= ~((1 << CS1_PIN_NUM)|(1 << CS2_PIN_NUM));
	DATA_PORT=0;
	DATA_DDR=0;
}
void clear_lcd(void){
	for (uint8_t page = 0; page < 4; page++) {
     d3a:	dc 3b       	cpi	r29, 0xBC	; 188
     d3c:	71 f7       	brne	.-36     	; 0xd1a <clear_lcd+0x6>
		command_write(CMD_COLUMN + 0, 3);
		for (uint8_t x = 0; x < 61; x++) {
			data_write(0, 3);
		}
	}
}
     d3e:	df 91       	pop	r29
     d40:	cf 91       	pop	r28
     d42:	08 95       	ret

00000d44 <mg12232_init>:
#include "mg12232.h"


void mg12232_init(void){
	DATA_DDR= 0xff;
     d44:	8f ef       	ldi	r24, 0xFF	; 255
     d46:	8a b9       	out	0x0a, r24	; 10
	DATA_PORT=0xff;
     d48:	8b b9       	out	0x0b, r24	; 11
	DDRB=0x07;
     d4a:	87 e0       	ldi	r24, 0x07	; 7
     d4c:	84 b9       	out	0x04, r24	; 4
	PORTB=0x07;
     d4e:	85 b9       	out	0x05, r24	; 5
	PORTB=0x04;
     d50:	94 e0       	ldi	r25, 0x04	; 4
     d52:	95 b9       	out	0x05, r25	; 5
	PORTB=0x07;
     d54:	85 b9       	out	0x05, r24	; 5
	PORTB=0x04;
     d56:	95 b9       	out	0x05, r25	; 5
	PORTB=0x07;
     d58:	85 b9       	out	0x05, r24	; 5
	PORTB=0x00;
     d5a:	15 b8       	out	0x05, r1	; 5
	command_write(CMD_RESET,3);
     d5c:	63 e0       	ldi	r22, 0x03	; 3
     d5e:	82 ee       	ldi	r24, 0xE2	; 226
     d60:	0e 94 6e 06 	call	0xcdc	; 0xcdc <command_write>
	command_write(CMD_DUTY_CYCLE_32,3);
     d64:	63 e0       	ldi	r22, 0x03	; 3
     d66:	89 ea       	ldi	r24, 0xA9	; 169
     d68:	0e 94 6e 06 	call	0xcdc	; 0xcdc <command_write>
	command_write(CMD_STATIC_DRIVE_OFF,3);
     d6c:	63 e0       	ldi	r22, 0x03	; 3
     d6e:	84 ea       	ldi	r24, 0xA4	; 164
     d70:	0e 94 6e 06 	call	0xcdc	; 0xcdc <command_write>
	command_write(CMD_ADC_CCW,3);
     d74:	63 e0       	ldi	r22, 0x03	; 3
     d76:	81 ea       	ldi	r24, 0xA1	; 161
     d78:	0e 94 6e 06 	call	0xcdc	; 0xcdc <command_write>
	command_write(CMD_DISPLAY_ON,3);
     d7c:	63 e0       	ldi	r22, 0x03	; 3
     d7e:	8f ea       	ldi	r24, 0xAF	; 175
     d80:	0e 94 6e 06 	call	0xcdc	; 0xcdc <command_write>
	clear_lcd();
     d84:	0e 94 8a 06 	call	0xd14	; 0xd14 <clear_lcd>
	command_write(CMD_PAGE+0,3);
     d88:	63 e0       	ldi	r22, 0x03	; 3
     d8a:	88 eb       	ldi	r24, 0xB8	; 184
     d8c:	0e 94 6e 06 	call	0xcdc	; 0xcdc <command_write>
	command_write(CMD_COLUMN+0,3);
     d90:	63 e0       	ldi	r22, 0x03	; 3
     d92:	83 e1       	ldi	r24, 0x13	; 19
     d94:	0e 94 6e 06 	call	0xcdc	; 0xcdc <command_write>
	command_write(CMD_START_LINE+0,3);
     d98:	63 e0       	ldi	r22, 0x03	; 3
     d9a:	8f ed       	ldi	r24, 0xDF	; 223
     d9c:	0e 94 6e 06 	call	0xcdc	; 0xcdc <command_write>
     da0:	08 95       	ret

00000da2 <simbol_write>:
		for (uint8_t x = 0; x < 61; x++) {
			data_write(0, 3);
		}
	}
}
void simbol_write(unsigned char simbol[], uint8_t chip){
     da2:	ff 92       	push	r15
     da4:	0f 93       	push	r16
     da6:	1f 93       	push	r17
     da8:	cf 93       	push	r28
     daa:	df 93       	push	r29
     dac:	f6 2e       	mov	r15, r22
     dae:	ec 01       	movw	r28, r24
     db0:	8c 01       	movw	r16, r24
     db2:	0a 5f       	subi	r16, 0xFA	; 250
     db4:	1f 4f       	sbci	r17, 0xFF	; 255
	for (unsigned char a=0; a<6;a++)
	{
		data_write(simbol[a],chip);
     db6:	6f 2d       	mov	r22, r15
     db8:	89 91       	ld	r24, Y+
     dba:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <data_write>
			data_write(0, 3);
		}
	}
}
void simbol_write(unsigned char simbol[], uint8_t chip){
	for (unsigned char a=0; a<6;a++)
     dbe:	c0 17       	cp	r28, r16
     dc0:	d1 07       	cpc	r29, r17
     dc2:	c9 f7       	brne	.-14     	; 0xdb6 <simbol_write+0x14>
	{
		data_write(simbol[a],chip);
	}
}
     dc4:	df 91       	pop	r29
     dc6:	cf 91       	pop	r28
     dc8:	1f 91       	pop	r17
     dca:	0f 91       	pop	r16
     dcc:	ff 90       	pop	r15
     dce:	08 95       	ret

00000dd0 <number_write>:
	{0b00000000, 0b00001000, 0b00001000, 0b00001000, 0b00000000, 0x0},	//-
	{0b00000000, 0b00001000, 0b00011100, 0b00001000, 0b00000000, 0x0}		//+
};

void number_write(char t, uint8_t chip){
	switch(t){
     dd0:	90 e0       	ldi	r25, 0x00	; 0
     dd2:	fc 01       	movw	r30, r24
     dd4:	b0 97       	sbiw	r30, 0x20	; 32
     dd6:	eb 35       	cpi	r30, 0x5B	; 91
     dd8:	f1 05       	cpc	r31, r1
     dda:	08 f0       	brcs	.+2      	; 0xdde <number_write+0xe>
     ddc:	52 c1       	rjmp	.+676    	; 0x1082 <number_write+0x2b2>
     dde:	ec 5c       	subi	r30, 0xCC	; 204
     de0:	ff 4f       	sbci	r31, 0xFF	; 255
     de2:	0c 94 30 0d 	jmp	0x1a60	; 0x1a60 <__tablejump2__>
		case '0' : simbol_write(numbers[0],chip);break;
     de6:	80 e0       	ldi	r24, 0x00	; 0
     de8:	91 e0       	ldi	r25, 0x01	; 1
     dea:	0e 94 d1 06 	call	0xda2	; 0xda2 <simbol_write>
     dee:	08 95       	ret
		case '1' : simbol_write(numbers[1],chip);break;
     df0:	86 e0       	ldi	r24, 0x06	; 6
     df2:	91 e0       	ldi	r25, 0x01	; 1
     df4:	0e 94 d1 06 	call	0xda2	; 0xda2 <simbol_write>
     df8:	08 95       	ret
		case '2' : simbol_write(numbers[2],chip);break;
     dfa:	8c e0       	ldi	r24, 0x0C	; 12
     dfc:	91 e0       	ldi	r25, 0x01	; 1
     dfe:	0e 94 d1 06 	call	0xda2	; 0xda2 <simbol_write>
     e02:	08 95       	ret
		case '3' : simbol_write(numbers[3],chip);break;
     e04:	82 e1       	ldi	r24, 0x12	; 18
     e06:	91 e0       	ldi	r25, 0x01	; 1
     e08:	0e 94 d1 06 	call	0xda2	; 0xda2 <simbol_write>
     e0c:	08 95       	ret
		case '4' : simbol_write(numbers[4],chip);break;
     e0e:	88 e1       	ldi	r24, 0x18	; 24
     e10:	91 e0       	ldi	r25, 0x01	; 1
     e12:	0e 94 d1 06 	call	0xda2	; 0xda2 <simbol_write>
     e16:	08 95       	ret
		case '5' : simbol_write(numbers[5],chip);break;
     e18:	8e e1       	ldi	r24, 0x1E	; 30
     e1a:	91 e0       	ldi	r25, 0x01	; 1
     e1c:	0e 94 d1 06 	call	0xda2	; 0xda2 <simbol_write>
     e20:	08 95       	ret
		case '6' : simbol_write(numbers[6],chip);break;
     e22:	84 e2       	ldi	r24, 0x24	; 36
     e24:	91 e0       	ldi	r25, 0x01	; 1
     e26:	0e 94 d1 06 	call	0xda2	; 0xda2 <simbol_write>
     e2a:	08 95       	ret
		case '7' : simbol_write(numbers[7],chip);break;
     e2c:	8a e2       	ldi	r24, 0x2A	; 42
     e2e:	91 e0       	ldi	r25, 0x01	; 1
     e30:	0e 94 d1 06 	call	0xda2	; 0xda2 <simbol_write>
     e34:	08 95       	ret
		case '8' : simbol_write(numbers[8],chip);break;
     e36:	80 e3       	ldi	r24, 0x30	; 48
     e38:	91 e0       	ldi	r25, 0x01	; 1
     e3a:	0e 94 d1 06 	call	0xda2	; 0xda2 <simbol_write>
     e3e:	08 95       	ret
		case '9' : simbol_write(numbers[9],chip);break;
     e40:	86 e3       	ldi	r24, 0x36	; 54
     e42:	91 e0       	ldi	r25, 0x01	; 1
     e44:	0e 94 d1 06 	call	0xda2	; 0xda2 <simbol_write>
     e48:	08 95       	ret
		case '=' : simbol_write(numbers[10],chip);break;
     e4a:	8c e3       	ldi	r24, 0x3C	; 60
     e4c:	91 e0       	ldi	r25, 0x01	; 1
     e4e:	0e 94 d1 06 	call	0xda2	; 0xda2 <simbol_write>
     e52:	08 95       	ret
		case 'A' : simbol_write(numbers[11],chip);break;
     e54:	82 e4       	ldi	r24, 0x42	; 66
     e56:	91 e0       	ldi	r25, 0x01	; 1
     e58:	0e 94 d1 06 	call	0xda2	; 0xda2 <simbol_write>
     e5c:	08 95       	ret
		case 'B' : simbol_write(numbers[12],chip);break;
     e5e:	88 e4       	ldi	r24, 0x48	; 72
     e60:	91 e0       	ldi	r25, 0x01	; 1
     e62:	0e 94 d1 06 	call	0xda2	; 0xda2 <simbol_write>
     e66:	08 95       	ret
		case 'C' : simbol_write(numbers[13],chip);break;
     e68:	8e e4       	ldi	r24, 0x4E	; 78
     e6a:	91 e0       	ldi	r25, 0x01	; 1
     e6c:	0e 94 d1 06 	call	0xda2	; 0xda2 <simbol_write>
     e70:	08 95       	ret
		case 'D' : simbol_write(numbers[14],chip);break;
     e72:	84 e5       	ldi	r24, 0x54	; 84
     e74:	91 e0       	ldi	r25, 0x01	; 1
     e76:	0e 94 d1 06 	call	0xda2	; 0xda2 <simbol_write>
     e7a:	08 95       	ret
		case 'E' : simbol_write(numbers[15],chip);break;
     e7c:	8a e5       	ldi	r24, 0x5A	; 90
     e7e:	91 e0       	ldi	r25, 0x01	; 1
     e80:	0e 94 d1 06 	call	0xda2	; 0xda2 <simbol_write>
     e84:	08 95       	ret
		case 'F' : simbol_write(numbers[16],chip);break;
     e86:	80 e6       	ldi	r24, 0x60	; 96
     e88:	91 e0       	ldi	r25, 0x01	; 1
     e8a:	0e 94 d1 06 	call	0xda2	; 0xda2 <simbol_write>
     e8e:	08 95       	ret
		case 'G' : simbol_write(numbers[17],chip);break;
     e90:	86 e6       	ldi	r24, 0x66	; 102
     e92:	91 e0       	ldi	r25, 0x01	; 1
     e94:	0e 94 d1 06 	call	0xda2	; 0xda2 <simbol_write>
     e98:	08 95       	ret
		case 'H' : simbol_write(numbers[18],chip);break;
     e9a:	8c e6       	ldi	r24, 0x6C	; 108
     e9c:	91 e0       	ldi	r25, 0x01	; 1
     e9e:	0e 94 d1 06 	call	0xda2	; 0xda2 <simbol_write>
     ea2:	08 95       	ret
		case 'I' : simbol_write(numbers[19],chip);break;
     ea4:	82 e7       	ldi	r24, 0x72	; 114
     ea6:	91 e0       	ldi	r25, 0x01	; 1
     ea8:	0e 94 d1 06 	call	0xda2	; 0xda2 <simbol_write>
     eac:	08 95       	ret
		case 'J' : simbol_write(numbers[20],chip);break;
     eae:	88 e7       	ldi	r24, 0x78	; 120
     eb0:	91 e0       	ldi	r25, 0x01	; 1
     eb2:	0e 94 d1 06 	call	0xda2	; 0xda2 <simbol_write>
     eb6:	08 95       	ret
		case 'K' : simbol_write(numbers[21],chip);break;
     eb8:	8e e7       	ldi	r24, 0x7E	; 126
     eba:	91 e0       	ldi	r25, 0x01	; 1
     ebc:	0e 94 d1 06 	call	0xda2	; 0xda2 <simbol_write>
     ec0:	08 95       	ret
		case 'L' : simbol_write(numbers[22],chip);break;
     ec2:	84 e8       	ldi	r24, 0x84	; 132
     ec4:	91 e0       	ldi	r25, 0x01	; 1
     ec6:	0e 94 d1 06 	call	0xda2	; 0xda2 <simbol_write>
     eca:	08 95       	ret
		case 'M' : simbol_write(numbers[23],chip);break;
     ecc:	8a e8       	ldi	r24, 0x8A	; 138
     ece:	91 e0       	ldi	r25, 0x01	; 1
     ed0:	0e 94 d1 06 	call	0xda2	; 0xda2 <simbol_write>
     ed4:	08 95       	ret
		case 'N' : simbol_write(numbers[24],chip);break;
     ed6:	80 e9       	ldi	r24, 0x90	; 144
     ed8:	91 e0       	ldi	r25, 0x01	; 1
     eda:	0e 94 d1 06 	call	0xda2	; 0xda2 <simbol_write>
     ede:	08 95       	ret
		case 'O' : simbol_write(numbers[25],chip);break;
     ee0:	86 e9       	ldi	r24, 0x96	; 150
     ee2:	91 e0       	ldi	r25, 0x01	; 1
     ee4:	0e 94 d1 06 	call	0xda2	; 0xda2 <simbol_write>
     ee8:	08 95       	ret
		case 'P' : simbol_write(numbers[26],chip);break;
     eea:	8c e9       	ldi	r24, 0x9C	; 156
     eec:	91 e0       	ldi	r25, 0x01	; 1
     eee:	0e 94 d1 06 	call	0xda2	; 0xda2 <simbol_write>
     ef2:	08 95       	ret
		case 'Q' : simbol_write(numbers[27],chip);break;
     ef4:	82 ea       	ldi	r24, 0xA2	; 162
     ef6:	91 e0       	ldi	r25, 0x01	; 1
     ef8:	0e 94 d1 06 	call	0xda2	; 0xda2 <simbol_write>
     efc:	08 95       	ret
		case 'R' : simbol_write(numbers[28],chip);break;
     efe:	88 ea       	ldi	r24, 0xA8	; 168
     f00:	91 e0       	ldi	r25, 0x01	; 1
     f02:	0e 94 d1 06 	call	0xda2	; 0xda2 <simbol_write>
     f06:	08 95       	ret
		case 'S' : simbol_write(numbers[29],chip);break;
     f08:	8e ea       	ldi	r24, 0xAE	; 174
     f0a:	91 e0       	ldi	r25, 0x01	; 1
     f0c:	0e 94 d1 06 	call	0xda2	; 0xda2 <simbol_write>
     f10:	08 95       	ret
		case 'T' : simbol_write(numbers[30],chip);break;
     f12:	84 eb       	ldi	r24, 0xB4	; 180
     f14:	91 e0       	ldi	r25, 0x01	; 1
     f16:	0e 94 d1 06 	call	0xda2	; 0xda2 <simbol_write>
     f1a:	08 95       	ret
		case 'U' : simbol_write(numbers[31],chip);break;
     f1c:	8a eb       	ldi	r24, 0xBA	; 186
     f1e:	91 e0       	ldi	r25, 0x01	; 1
     f20:	0e 94 d1 06 	call	0xda2	; 0xda2 <simbol_write>
     f24:	08 95       	ret
		case 'V' : simbol_write(numbers[32],chip);break;
     f26:	80 ec       	ldi	r24, 0xC0	; 192
     f28:	91 e0       	ldi	r25, 0x01	; 1
     f2a:	0e 94 d1 06 	call	0xda2	; 0xda2 <simbol_write>
     f2e:	08 95       	ret
		case 'W' : simbol_write(numbers[33],chip);break;
     f30:	86 ec       	ldi	r24, 0xC6	; 198
     f32:	91 e0       	ldi	r25, 0x01	; 1
     f34:	0e 94 d1 06 	call	0xda2	; 0xda2 <simbol_write>
     f38:	08 95       	ret
		case 'X' : simbol_write(numbers[34],chip);break;
     f3a:	8c ec       	ldi	r24, 0xCC	; 204
     f3c:	91 e0       	ldi	r25, 0x01	; 1
     f3e:	0e 94 d1 06 	call	0xda2	; 0xda2 <simbol_write>
     f42:	08 95       	ret
		case 'Y' : simbol_write(numbers[35],chip);break;
     f44:	82 ed       	ldi	r24, 0xD2	; 210
     f46:	91 e0       	ldi	r25, 0x01	; 1
     f48:	0e 94 d1 06 	call	0xda2	; 0xda2 <simbol_write>
     f4c:	08 95       	ret
		case 'Z' : simbol_write(numbers[36],chip);break;
     f4e:	88 ed       	ldi	r24, 0xD8	; 216
     f50:	91 e0       	ldi	r25, 0x01	; 1
     f52:	0e 94 d1 06 	call	0xda2	; 0xda2 <simbol_write>
     f56:	08 95       	ret
		case 'a' : simbol_write(numbers[37],chip);break;
     f58:	8e ed       	ldi	r24, 0xDE	; 222
     f5a:	91 e0       	ldi	r25, 0x01	; 1
     f5c:	0e 94 d1 06 	call	0xda2	; 0xda2 <simbol_write>
     f60:	08 95       	ret
		case 'b' : simbol_write(numbers[38],chip);break;
     f62:	84 ee       	ldi	r24, 0xE4	; 228
     f64:	91 e0       	ldi	r25, 0x01	; 1
     f66:	0e 94 d1 06 	call	0xda2	; 0xda2 <simbol_write>
     f6a:	08 95       	ret
		case 'c' : simbol_write(numbers[39],chip);break;
     f6c:	8a ee       	ldi	r24, 0xEA	; 234
     f6e:	91 e0       	ldi	r25, 0x01	; 1
     f70:	0e 94 d1 06 	call	0xda2	; 0xda2 <simbol_write>
     f74:	08 95       	ret
		case 'd' : simbol_write(numbers[40],chip);break;
     f76:	80 ef       	ldi	r24, 0xF0	; 240
     f78:	91 e0       	ldi	r25, 0x01	; 1
     f7a:	0e 94 d1 06 	call	0xda2	; 0xda2 <simbol_write>
     f7e:	08 95       	ret
		case 'e' : simbol_write(numbers[41],chip);break;
     f80:	86 ef       	ldi	r24, 0xF6	; 246
     f82:	91 e0       	ldi	r25, 0x01	; 1
     f84:	0e 94 d1 06 	call	0xda2	; 0xda2 <simbol_write>
     f88:	08 95       	ret
		case 'f' : simbol_write(numbers[42],chip);break;
     f8a:	8c ef       	ldi	r24, 0xFC	; 252
     f8c:	91 e0       	ldi	r25, 0x01	; 1
     f8e:	0e 94 d1 06 	call	0xda2	; 0xda2 <simbol_write>
     f92:	08 95       	ret
		case 'g' : simbol_write(numbers[43],chip);break;
     f94:	82 e0       	ldi	r24, 0x02	; 2
     f96:	92 e0       	ldi	r25, 0x02	; 2
     f98:	0e 94 d1 06 	call	0xda2	; 0xda2 <simbol_write>
     f9c:	08 95       	ret
		case 'h' : simbol_write(numbers[44],chip);break;
     f9e:	88 e0       	ldi	r24, 0x08	; 8
     fa0:	92 e0       	ldi	r25, 0x02	; 2
     fa2:	0e 94 d1 06 	call	0xda2	; 0xda2 <simbol_write>
     fa6:	08 95       	ret
		case 'i' : simbol_write(numbers[45],chip);break;
     fa8:	8e e0       	ldi	r24, 0x0E	; 14
     faa:	92 e0       	ldi	r25, 0x02	; 2
     fac:	0e 94 d1 06 	call	0xda2	; 0xda2 <simbol_write>
     fb0:	08 95       	ret
		case 'j' : simbol_write(numbers[46],chip);break;
     fb2:	84 e1       	ldi	r24, 0x14	; 20
     fb4:	92 e0       	ldi	r25, 0x02	; 2
     fb6:	0e 94 d1 06 	call	0xda2	; 0xda2 <simbol_write>
     fba:	08 95       	ret
		case 'k' : simbol_write(numbers[47],chip);break;
     fbc:	8a e1       	ldi	r24, 0x1A	; 26
     fbe:	92 e0       	ldi	r25, 0x02	; 2
     fc0:	0e 94 d1 06 	call	0xda2	; 0xda2 <simbol_write>
     fc4:	08 95       	ret
		case 'l' : simbol_write(numbers[48],chip);break;
     fc6:	80 e2       	ldi	r24, 0x20	; 32
     fc8:	92 e0       	ldi	r25, 0x02	; 2
     fca:	0e 94 d1 06 	call	0xda2	; 0xda2 <simbol_write>
     fce:	08 95       	ret
		case 'm' : simbol_write(numbers[49],chip);break;
     fd0:	86 e2       	ldi	r24, 0x26	; 38
     fd2:	92 e0       	ldi	r25, 0x02	; 2
     fd4:	0e 94 d1 06 	call	0xda2	; 0xda2 <simbol_write>
     fd8:	08 95       	ret
		case 'n' : simbol_write(numbers[50],chip);break;
     fda:	8c e2       	ldi	r24, 0x2C	; 44
     fdc:	92 e0       	ldi	r25, 0x02	; 2
     fde:	0e 94 d1 06 	call	0xda2	; 0xda2 <simbol_write>
     fe2:	08 95       	ret
		case 'o' : simbol_write(numbers[51],chip);break;
     fe4:	82 e3       	ldi	r24, 0x32	; 50
     fe6:	92 e0       	ldi	r25, 0x02	; 2
     fe8:	0e 94 d1 06 	call	0xda2	; 0xda2 <simbol_write>
     fec:	08 95       	ret
		case 'p' : simbol_write(numbers[52],chip);break;
     fee:	88 e3       	ldi	r24, 0x38	; 56
     ff0:	92 e0       	ldi	r25, 0x02	; 2
     ff2:	0e 94 d1 06 	call	0xda2	; 0xda2 <simbol_write>
     ff6:	08 95       	ret
		case 'q' : simbol_write(numbers[53],chip);break;
     ff8:	8e e3       	ldi	r24, 0x3E	; 62
     ffa:	92 e0       	ldi	r25, 0x02	; 2
     ffc:	0e 94 d1 06 	call	0xda2	; 0xda2 <simbol_write>
    1000:	08 95       	ret
		case 'r' : simbol_write(numbers[54],chip);break;
    1002:	84 e4       	ldi	r24, 0x44	; 68
    1004:	92 e0       	ldi	r25, 0x02	; 2
    1006:	0e 94 d1 06 	call	0xda2	; 0xda2 <simbol_write>
    100a:	08 95       	ret
		case 's' : simbol_write(numbers[55],chip);break;
    100c:	8a e4       	ldi	r24, 0x4A	; 74
    100e:	92 e0       	ldi	r25, 0x02	; 2
    1010:	0e 94 d1 06 	call	0xda2	; 0xda2 <simbol_write>
    1014:	08 95       	ret
		case 't' : simbol_write(numbers[56],chip);break;
    1016:	80 e5       	ldi	r24, 0x50	; 80
    1018:	92 e0       	ldi	r25, 0x02	; 2
    101a:	0e 94 d1 06 	call	0xda2	; 0xda2 <simbol_write>
    101e:	08 95       	ret
		case 'u' : simbol_write(numbers[57],chip);break;
    1020:	86 e5       	ldi	r24, 0x56	; 86
    1022:	92 e0       	ldi	r25, 0x02	; 2
    1024:	0e 94 d1 06 	call	0xda2	; 0xda2 <simbol_write>
    1028:	08 95       	ret
		case 'v' : simbol_write(numbers[58],chip);break;
    102a:	8c e5       	ldi	r24, 0x5C	; 92
    102c:	92 e0       	ldi	r25, 0x02	; 2
    102e:	0e 94 d1 06 	call	0xda2	; 0xda2 <simbol_write>
    1032:	08 95       	ret
		case 'w' : simbol_write(numbers[59],chip);break;
    1034:	82 e6       	ldi	r24, 0x62	; 98
    1036:	92 e0       	ldi	r25, 0x02	; 2
    1038:	0e 94 d1 06 	call	0xda2	; 0xda2 <simbol_write>
    103c:	08 95       	ret
		case 'x' : simbol_write(numbers[60],chip);break;
    103e:	88 e6       	ldi	r24, 0x68	; 104
    1040:	92 e0       	ldi	r25, 0x02	; 2
    1042:	0e 94 d1 06 	call	0xda2	; 0xda2 <simbol_write>
    1046:	08 95       	ret
		case 'y' : simbol_write(numbers[61],chip);break;
    1048:	8e e6       	ldi	r24, 0x6E	; 110
    104a:	92 e0       	ldi	r25, 0x02	; 2
    104c:	0e 94 d1 06 	call	0xda2	; 0xda2 <simbol_write>
    1050:	08 95       	ret
		case 'z' : simbol_write(numbers[62],chip);break;
    1052:	84 e7       	ldi	r24, 0x74	; 116
    1054:	92 e0       	ldi	r25, 0x02	; 2
    1056:	0e 94 d1 06 	call	0xda2	; 0xda2 <simbol_write>
    105a:	08 95       	ret
		case '.' : simbol_write(numbers[63],chip);break;
    105c:	8a e7       	ldi	r24, 0x7A	; 122
    105e:	92 e0       	ldi	r25, 0x02	; 2
    1060:	0e 94 d1 06 	call	0xda2	; 0xda2 <simbol_write>
    1064:	08 95       	ret
		case ' ' : simbol_write(numbers[64],chip);break;
    1066:	80 e8       	ldi	r24, 0x80	; 128
    1068:	92 e0       	ldi	r25, 0x02	; 2
    106a:	0e 94 d1 06 	call	0xda2	; 0xda2 <simbol_write>
    106e:	08 95       	ret
		case '-' : simbol_write(numbers[65],chip);break;
    1070:	86 e8       	ldi	r24, 0x86	; 134
    1072:	92 e0       	ldi	r25, 0x02	; 2
    1074:	0e 94 d1 06 	call	0xda2	; 0xda2 <simbol_write>
    1078:	08 95       	ret
		case '+' : simbol_write(numbers[66],chip);break;
    107a:	8c e8       	ldi	r24, 0x8C	; 140
    107c:	92 e0       	ldi	r25, 0x02	; 2
    107e:	0e 94 d1 06 	call	0xda2	; 0xda2 <simbol_write>
    1082:	08 95       	ret

00001084 <mg12232_string_write>:
	for (unsigned char a=0; a<6;a++)
	{
		data_write(simbol[a],chip);
	}
}
void mg12232_string_write(char str[]){
    1084:	df 92       	push	r13
    1086:	ef 92       	push	r14
    1088:	ff 92       	push	r15
    108a:	0f 93       	push	r16
    108c:	1f 93       	push	r17
    108e:	cf 93       	push	r28
    1090:	df 93       	push	r29
    1092:	7c 01       	movw	r14, r24
	uint8_t a;
	uint8_t chip;
	for (a=0;a<strlen(str);a++){		
    1094:	c0 e0       	ldi	r28, 0x00	; 0
		}
		if (a==60){
			command_write(CMD_PAGE+3,3);
			command_write(CMD_COLUMN+1,3);
		}
		if ((a>=10 && a<=19)||(a>=30 && a<=39)||(a>=50 && a<=59)||(a>=70 && a<=79))chip=2;
    1096:	d2 e0       	ldi	r29, 0x02	; 2
		else chip=1;
    1098:	dd 24       	eor	r13, r13
    109a:	d3 94       	inc	r13
	}
}
void mg12232_string_write(char str[]){
	uint8_t a;
	uint8_t chip;
	for (a=0;a<strlen(str);a++){		
    109c:	4c c0       	rjmp	.+152    	; 0x1136 <mg12232_string_write+0xb2>
		if (a==0){
    109e:	c1 11       	cpse	r28, r1
    10a0:	09 c0       	rjmp	.+18     	; 0x10b4 <mg12232_string_write+0x30>
			command_write(CMD_PAGE+0,3);
    10a2:	63 e0       	ldi	r22, 0x03	; 3
    10a4:	88 eb       	ldi	r24, 0xB8	; 184
    10a6:	0e 94 6e 06 	call	0xcdc	; 0xcdc <command_write>
			command_write(CMD_COLUMN+1,3);
    10aa:	63 e0       	ldi	r22, 0x03	; 3
    10ac:	84 e1       	ldi	r24, 0x14	; 20
    10ae:	0e 94 6e 06 	call	0xcdc	; 0xcdc <command_write>
    10b2:	16 c0       	rjmp	.+44     	; 0x10e0 <mg12232_string_write+0x5c>
		}
		if (a==20){
    10b4:	c4 31       	cpi	r28, 0x14	; 20
    10b6:	49 f4       	brne	.+18     	; 0x10ca <mg12232_string_write+0x46>
			command_write(CMD_PAGE+1,3);
    10b8:	63 e0       	ldi	r22, 0x03	; 3
    10ba:	89 eb       	ldi	r24, 0xB9	; 185
    10bc:	0e 94 6e 06 	call	0xcdc	; 0xcdc <command_write>
			command_write(CMD_COLUMN+1,3);
    10c0:	63 e0       	ldi	r22, 0x03	; 3
    10c2:	84 e1       	ldi	r24, 0x14	; 20
    10c4:	0e 94 6e 06 	call	0xcdc	; 0xcdc <command_write>
    10c8:	16 c0       	rjmp	.+44     	; 0x10f6 <mg12232_string_write+0x72>
		}
		if (a==40){
    10ca:	c8 32       	cpi	r28, 0x28	; 40
    10cc:	49 f4       	brne	.+18     	; 0x10e0 <mg12232_string_write+0x5c>
			command_write(CMD_PAGE+2,3);
    10ce:	63 e0       	ldi	r22, 0x03	; 3
    10d0:	8a eb       	ldi	r24, 0xBA	; 186
    10d2:	0e 94 6e 06 	call	0xcdc	; 0xcdc <command_write>
			command_write(CMD_COLUMN+1,3);
    10d6:	63 e0       	ldi	r22, 0x03	; 3
    10d8:	84 e1       	ldi	r24, 0x14	; 20
    10da:	0e 94 6e 06 	call	0xcdc	; 0xcdc <command_write>
    10de:	0f c0       	rjmp	.+30     	; 0x10fe <mg12232_string_write+0x7a>
		}
		if (a==60){
    10e0:	cc 33       	cpi	r28, 0x3C	; 60
    10e2:	49 f4       	brne	.+18     	; 0x10f6 <mg12232_string_write+0x72>
			command_write(CMD_PAGE+3,3);
    10e4:	63 e0       	ldi	r22, 0x03	; 3
    10e6:	8b eb       	ldi	r24, 0xBB	; 187
    10e8:	0e 94 6e 06 	call	0xcdc	; 0xcdc <command_write>
			command_write(CMD_COLUMN+1,3);
    10ec:	63 e0       	ldi	r22, 0x03	; 3
    10ee:	84 e1       	ldi	r24, 0x14	; 20
    10f0:	0e 94 6e 06 	call	0xcdc	; 0xcdc <command_write>
    10f4:	08 c0       	rjmp	.+16     	; 0x1106 <mg12232_string_write+0x82>
		}
		if ((a>=10 && a<=19)||(a>=30 && a<=39)||(a>=50 && a<=59)||(a>=70 && a<=79))chip=2;
    10f6:	86 ef       	ldi	r24, 0xF6	; 246
    10f8:	8c 0f       	add	r24, r28
    10fa:	8a 30       	cpi	r24, 0x0A	; 10
    10fc:	70 f0       	brcs	.+28     	; 0x111a <mg12232_string_write+0x96>
    10fe:	82 ee       	ldi	r24, 0xE2	; 226
    1100:	8c 0f       	add	r24, r28
    1102:	8a 30       	cpi	r24, 0x0A	; 10
    1104:	60 f0       	brcs	.+24     	; 0x111e <mg12232_string_write+0x9a>
    1106:	8e ec       	ldi	r24, 0xCE	; 206
    1108:	8c 0f       	add	r24, r28
    110a:	8a 30       	cpi	r24, 0x0A	; 10
    110c:	50 f0       	brcs	.+20     	; 0x1122 <mg12232_string_write+0x9e>
    110e:	8a eb       	ldi	r24, 0xBA	; 186
    1110:	8c 0f       	add	r24, r28
    1112:	8a 30       	cpi	r24, 0x0A	; 10
    1114:	40 f0       	brcs	.+16     	; 0x1126 <mg12232_string_write+0xa2>
		else chip=1;
    1116:	6d 2d       	mov	r22, r13
    1118:	07 c0       	rjmp	.+14     	; 0x1128 <mg12232_string_write+0xa4>
		}
		if (a==60){
			command_write(CMD_PAGE+3,3);
			command_write(CMD_COLUMN+1,3);
		}
		if ((a>=10 && a<=19)||(a>=30 && a<=39)||(a>=50 && a<=59)||(a>=70 && a<=79))chip=2;
    111a:	6d 2f       	mov	r22, r29
    111c:	05 c0       	rjmp	.+10     	; 0x1128 <mg12232_string_write+0xa4>
    111e:	6d 2f       	mov	r22, r29
    1120:	03 c0       	rjmp	.+6      	; 0x1128 <mg12232_string_write+0xa4>
    1122:	6d 2f       	mov	r22, r29
    1124:	01 c0       	rjmp	.+2      	; 0x1128 <mg12232_string_write+0xa4>
    1126:	6d 2f       	mov	r22, r29
		else chip=1;
		number_write(str[a],chip);
    1128:	f7 01       	movw	r30, r14
    112a:	e0 0f       	add	r30, r16
    112c:	f1 1f       	adc	r31, r17
    112e:	80 81       	ld	r24, Z
    1130:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <number_write>
	}
}
void mg12232_string_write(char str[]){
	uint8_t a;
	uint8_t chip;
	for (a=0;a<strlen(str);a++){		
    1134:	cf 5f       	subi	r28, 0xFF	; 255
    1136:	0c 2f       	mov	r16, r28
    1138:	10 e0       	ldi	r17, 0x00	; 0
    113a:	f7 01       	movw	r30, r14
    113c:	01 90       	ld	r0, Z+
    113e:	00 20       	and	r0, r0
    1140:	e9 f7       	brne	.-6      	; 0x113c <mg12232_string_write+0xb8>
    1142:	31 97       	sbiw	r30, 0x01	; 1
    1144:	ee 19       	sub	r30, r14
    1146:	ff 09       	sbc	r31, r15
    1148:	0e 17       	cp	r16, r30
    114a:	1f 07       	cpc	r17, r31
    114c:	08 f4       	brcc	.+2      	; 0x1150 <mg12232_string_write+0xcc>
    114e:	a7 cf       	rjmp	.-178    	; 0x109e <mg12232_string_write+0x1a>
		}
		if ((a>=10 && a<=19)||(a>=30 && a<=39)||(a>=50 && a<=59)||(a>=70 && a<=79))chip=2;
		else chip=1;
		number_write(str[a],chip);
	}
}
    1150:	df 91       	pop	r29
    1152:	cf 91       	pop	r28
    1154:	1f 91       	pop	r17
    1156:	0f 91       	pop	r16
    1158:	ff 90       	pop	r15
    115a:	ef 90       	pop	r14
    115c:	df 90       	pop	r13
    115e:	08 95       	ret

00001160 <USART_Transmit>:
	UCSR0C = (1<<USBS0)|(3<<UCSZ00);// 2 стопбита(USBSn=1), посылка 8 бит(UCSZn1:0=3), асинхронный режим(UMSELn1:0=0), без контроля четности(UPMn1:0=0)
}

void USART_Transmit(unsigned char data)
{
	while ( !( UCSR0A & (1<<UDRE0)) );
    1160:	e0 ec       	ldi	r30, 0xC0	; 192
    1162:	f0 e0       	ldi	r31, 0x00	; 0
    1164:	90 81       	ld	r25, Z
    1166:	95 ff       	sbrs	r25, 5
    1168:	fd cf       	rjmp	.-6      	; 0x1164 <USART_Transmit+0x4>
	UDR0 = data;//передает данные, только если буфер пуст
    116a:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    116e:	08 95       	ret

00001170 <__floatunsisf>:
    1170:	e8 94       	clt
    1172:	09 c0       	rjmp	.+18     	; 0x1186 <__floatsisf+0x12>

00001174 <__floatsisf>:
    1174:	97 fb       	bst	r25, 7
    1176:	3e f4       	brtc	.+14     	; 0x1186 <__floatsisf+0x12>
    1178:	90 95       	com	r25
    117a:	80 95       	com	r24
    117c:	70 95       	com	r23
    117e:	61 95       	neg	r22
    1180:	7f 4f       	sbci	r23, 0xFF	; 255
    1182:	8f 4f       	sbci	r24, 0xFF	; 255
    1184:	9f 4f       	sbci	r25, 0xFF	; 255
    1186:	99 23       	and	r25, r25
    1188:	a9 f0       	breq	.+42     	; 0x11b4 <__floatsisf+0x40>
    118a:	f9 2f       	mov	r31, r25
    118c:	96 e9       	ldi	r25, 0x96	; 150
    118e:	bb 27       	eor	r27, r27
    1190:	93 95       	inc	r25
    1192:	f6 95       	lsr	r31
    1194:	87 95       	ror	r24
    1196:	77 95       	ror	r23
    1198:	67 95       	ror	r22
    119a:	b7 95       	ror	r27
    119c:	f1 11       	cpse	r31, r1
    119e:	f8 cf       	rjmp	.-16     	; 0x1190 <__floatsisf+0x1c>
    11a0:	fa f4       	brpl	.+62     	; 0x11e0 <__floatsisf+0x6c>
    11a2:	bb 0f       	add	r27, r27
    11a4:	11 f4       	brne	.+4      	; 0x11aa <__floatsisf+0x36>
    11a6:	60 ff       	sbrs	r22, 0
    11a8:	1b c0       	rjmp	.+54     	; 0x11e0 <__floatsisf+0x6c>
    11aa:	6f 5f       	subi	r22, 0xFF	; 255
    11ac:	7f 4f       	sbci	r23, 0xFF	; 255
    11ae:	8f 4f       	sbci	r24, 0xFF	; 255
    11b0:	9f 4f       	sbci	r25, 0xFF	; 255
    11b2:	16 c0       	rjmp	.+44     	; 0x11e0 <__floatsisf+0x6c>
    11b4:	88 23       	and	r24, r24
    11b6:	11 f0       	breq	.+4      	; 0x11bc <__floatsisf+0x48>
    11b8:	96 e9       	ldi	r25, 0x96	; 150
    11ba:	11 c0       	rjmp	.+34     	; 0x11de <__floatsisf+0x6a>
    11bc:	77 23       	and	r23, r23
    11be:	21 f0       	breq	.+8      	; 0x11c8 <__floatsisf+0x54>
    11c0:	9e e8       	ldi	r25, 0x8E	; 142
    11c2:	87 2f       	mov	r24, r23
    11c4:	76 2f       	mov	r23, r22
    11c6:	05 c0       	rjmp	.+10     	; 0x11d2 <__floatsisf+0x5e>
    11c8:	66 23       	and	r22, r22
    11ca:	71 f0       	breq	.+28     	; 0x11e8 <__floatsisf+0x74>
    11cc:	96 e8       	ldi	r25, 0x86	; 134
    11ce:	86 2f       	mov	r24, r22
    11d0:	70 e0       	ldi	r23, 0x00	; 0
    11d2:	60 e0       	ldi	r22, 0x00	; 0
    11d4:	2a f0       	brmi	.+10     	; 0x11e0 <__floatsisf+0x6c>
    11d6:	9a 95       	dec	r25
    11d8:	66 0f       	add	r22, r22
    11da:	77 1f       	adc	r23, r23
    11dc:	88 1f       	adc	r24, r24
    11de:	da f7       	brpl	.-10     	; 0x11d6 <__floatsisf+0x62>
    11e0:	88 0f       	add	r24, r24
    11e2:	96 95       	lsr	r25
    11e4:	87 95       	ror	r24
    11e6:	97 f9       	bld	r25, 7
    11e8:	08 95       	ret

000011ea <__fp_inf>:
    11ea:	97 f9       	bld	r25, 7
    11ec:	9f 67       	ori	r25, 0x7F	; 127
    11ee:	80 e8       	ldi	r24, 0x80	; 128
    11f0:	70 e0       	ldi	r23, 0x00	; 0
    11f2:	60 e0       	ldi	r22, 0x00	; 0
    11f4:	08 95       	ret

000011f6 <__fp_nan>:
    11f6:	9f ef       	ldi	r25, 0xFF	; 255
    11f8:	80 ec       	ldi	r24, 0xC0	; 192
    11fa:	08 95       	ret

000011fc <__fp_pscA>:
    11fc:	00 24       	eor	r0, r0
    11fe:	0a 94       	dec	r0
    1200:	16 16       	cp	r1, r22
    1202:	17 06       	cpc	r1, r23
    1204:	18 06       	cpc	r1, r24
    1206:	09 06       	cpc	r0, r25
    1208:	08 95       	ret

0000120a <__fp_pscB>:
    120a:	00 24       	eor	r0, r0
    120c:	0a 94       	dec	r0
    120e:	12 16       	cp	r1, r18
    1210:	13 06       	cpc	r1, r19
    1212:	14 06       	cpc	r1, r20
    1214:	05 06       	cpc	r0, r21
    1216:	08 95       	ret

00001218 <__fp_round>:
    1218:	09 2e       	mov	r0, r25
    121a:	03 94       	inc	r0
    121c:	00 0c       	add	r0, r0
    121e:	11 f4       	brne	.+4      	; 0x1224 <__fp_round+0xc>
    1220:	88 23       	and	r24, r24
    1222:	52 f0       	brmi	.+20     	; 0x1238 <__fp_round+0x20>
    1224:	bb 0f       	add	r27, r27
    1226:	40 f4       	brcc	.+16     	; 0x1238 <__fp_round+0x20>
    1228:	bf 2b       	or	r27, r31
    122a:	11 f4       	brne	.+4      	; 0x1230 <__fp_round+0x18>
    122c:	60 ff       	sbrs	r22, 0
    122e:	04 c0       	rjmp	.+8      	; 0x1238 <__fp_round+0x20>
    1230:	6f 5f       	subi	r22, 0xFF	; 255
    1232:	7f 4f       	sbci	r23, 0xFF	; 255
    1234:	8f 4f       	sbci	r24, 0xFF	; 255
    1236:	9f 4f       	sbci	r25, 0xFF	; 255
    1238:	08 95       	ret

0000123a <__fp_split3>:
    123a:	57 fd       	sbrc	r21, 7
    123c:	90 58       	subi	r25, 0x80	; 128
    123e:	44 0f       	add	r20, r20
    1240:	55 1f       	adc	r21, r21
    1242:	59 f0       	breq	.+22     	; 0x125a <__fp_splitA+0x10>
    1244:	5f 3f       	cpi	r21, 0xFF	; 255
    1246:	71 f0       	breq	.+28     	; 0x1264 <__fp_splitA+0x1a>
    1248:	47 95       	ror	r20

0000124a <__fp_splitA>:
    124a:	88 0f       	add	r24, r24
    124c:	97 fb       	bst	r25, 7
    124e:	99 1f       	adc	r25, r25
    1250:	61 f0       	breq	.+24     	; 0x126a <__fp_splitA+0x20>
    1252:	9f 3f       	cpi	r25, 0xFF	; 255
    1254:	79 f0       	breq	.+30     	; 0x1274 <__fp_splitA+0x2a>
    1256:	87 95       	ror	r24
    1258:	08 95       	ret
    125a:	12 16       	cp	r1, r18
    125c:	13 06       	cpc	r1, r19
    125e:	14 06       	cpc	r1, r20
    1260:	55 1f       	adc	r21, r21
    1262:	f2 cf       	rjmp	.-28     	; 0x1248 <__fp_split3+0xe>
    1264:	46 95       	lsr	r20
    1266:	f1 df       	rcall	.-30     	; 0x124a <__fp_splitA>
    1268:	08 c0       	rjmp	.+16     	; 0x127a <__fp_splitA+0x30>
    126a:	16 16       	cp	r1, r22
    126c:	17 06       	cpc	r1, r23
    126e:	18 06       	cpc	r1, r24
    1270:	99 1f       	adc	r25, r25
    1272:	f1 cf       	rjmp	.-30     	; 0x1256 <__fp_splitA+0xc>
    1274:	86 95       	lsr	r24
    1276:	71 05       	cpc	r23, r1
    1278:	61 05       	cpc	r22, r1
    127a:	08 94       	sec
    127c:	08 95       	ret

0000127e <__fp_zero>:
    127e:	e8 94       	clt

00001280 <__fp_szero>:
    1280:	bb 27       	eor	r27, r27
    1282:	66 27       	eor	r22, r22
    1284:	77 27       	eor	r23, r23
    1286:	cb 01       	movw	r24, r22
    1288:	97 f9       	bld	r25, 7
    128a:	08 95       	ret

0000128c <__mulsf3>:
    128c:	0e 94 59 09 	call	0x12b2	; 0x12b2 <__mulsf3x>
    1290:	0c 94 0c 09 	jmp	0x1218	; 0x1218 <__fp_round>
    1294:	0e 94 fe 08 	call	0x11fc	; 0x11fc <__fp_pscA>
    1298:	38 f0       	brcs	.+14     	; 0x12a8 <__mulsf3+0x1c>
    129a:	0e 94 05 09 	call	0x120a	; 0x120a <__fp_pscB>
    129e:	20 f0       	brcs	.+8      	; 0x12a8 <__mulsf3+0x1c>
    12a0:	95 23       	and	r25, r21
    12a2:	11 f0       	breq	.+4      	; 0x12a8 <__mulsf3+0x1c>
    12a4:	0c 94 f5 08 	jmp	0x11ea	; 0x11ea <__fp_inf>
    12a8:	0c 94 fb 08 	jmp	0x11f6	; 0x11f6 <__fp_nan>
    12ac:	11 24       	eor	r1, r1
    12ae:	0c 94 40 09 	jmp	0x1280	; 0x1280 <__fp_szero>

000012b2 <__mulsf3x>:
    12b2:	0e 94 1d 09 	call	0x123a	; 0x123a <__fp_split3>
    12b6:	70 f3       	brcs	.-36     	; 0x1294 <__mulsf3+0x8>

000012b8 <__mulsf3_pse>:
    12b8:	95 9f       	mul	r25, r21
    12ba:	c1 f3       	breq	.-16     	; 0x12ac <__mulsf3+0x20>
    12bc:	95 0f       	add	r25, r21
    12be:	50 e0       	ldi	r21, 0x00	; 0
    12c0:	55 1f       	adc	r21, r21
    12c2:	62 9f       	mul	r22, r18
    12c4:	f0 01       	movw	r30, r0
    12c6:	72 9f       	mul	r23, r18
    12c8:	bb 27       	eor	r27, r27
    12ca:	f0 0d       	add	r31, r0
    12cc:	b1 1d       	adc	r27, r1
    12ce:	63 9f       	mul	r22, r19
    12d0:	aa 27       	eor	r26, r26
    12d2:	f0 0d       	add	r31, r0
    12d4:	b1 1d       	adc	r27, r1
    12d6:	aa 1f       	adc	r26, r26
    12d8:	64 9f       	mul	r22, r20
    12da:	66 27       	eor	r22, r22
    12dc:	b0 0d       	add	r27, r0
    12de:	a1 1d       	adc	r26, r1
    12e0:	66 1f       	adc	r22, r22
    12e2:	82 9f       	mul	r24, r18
    12e4:	22 27       	eor	r18, r18
    12e6:	b0 0d       	add	r27, r0
    12e8:	a1 1d       	adc	r26, r1
    12ea:	62 1f       	adc	r22, r18
    12ec:	73 9f       	mul	r23, r19
    12ee:	b0 0d       	add	r27, r0
    12f0:	a1 1d       	adc	r26, r1
    12f2:	62 1f       	adc	r22, r18
    12f4:	83 9f       	mul	r24, r19
    12f6:	a0 0d       	add	r26, r0
    12f8:	61 1d       	adc	r22, r1
    12fa:	22 1f       	adc	r18, r18
    12fc:	74 9f       	mul	r23, r20
    12fe:	33 27       	eor	r19, r19
    1300:	a0 0d       	add	r26, r0
    1302:	61 1d       	adc	r22, r1
    1304:	23 1f       	adc	r18, r19
    1306:	84 9f       	mul	r24, r20
    1308:	60 0d       	add	r22, r0
    130a:	21 1d       	adc	r18, r1
    130c:	82 2f       	mov	r24, r18
    130e:	76 2f       	mov	r23, r22
    1310:	6a 2f       	mov	r22, r26
    1312:	11 24       	eor	r1, r1
    1314:	9f 57       	subi	r25, 0x7F	; 127
    1316:	50 40       	sbci	r21, 0x00	; 0
    1318:	9a f0       	brmi	.+38     	; 0x1340 <__mulsf3_pse+0x88>
    131a:	f1 f0       	breq	.+60     	; 0x1358 <__mulsf3_pse+0xa0>
    131c:	88 23       	and	r24, r24
    131e:	4a f0       	brmi	.+18     	; 0x1332 <__mulsf3_pse+0x7a>
    1320:	ee 0f       	add	r30, r30
    1322:	ff 1f       	adc	r31, r31
    1324:	bb 1f       	adc	r27, r27
    1326:	66 1f       	adc	r22, r22
    1328:	77 1f       	adc	r23, r23
    132a:	88 1f       	adc	r24, r24
    132c:	91 50       	subi	r25, 0x01	; 1
    132e:	50 40       	sbci	r21, 0x00	; 0
    1330:	a9 f7       	brne	.-22     	; 0x131c <__mulsf3_pse+0x64>
    1332:	9e 3f       	cpi	r25, 0xFE	; 254
    1334:	51 05       	cpc	r21, r1
    1336:	80 f0       	brcs	.+32     	; 0x1358 <__mulsf3_pse+0xa0>
    1338:	0c 94 f5 08 	jmp	0x11ea	; 0x11ea <__fp_inf>
    133c:	0c 94 40 09 	jmp	0x1280	; 0x1280 <__fp_szero>
    1340:	5f 3f       	cpi	r21, 0xFF	; 255
    1342:	e4 f3       	brlt	.-8      	; 0x133c <__mulsf3_pse+0x84>
    1344:	98 3e       	cpi	r25, 0xE8	; 232
    1346:	d4 f3       	brlt	.-12     	; 0x133c <__mulsf3_pse+0x84>
    1348:	86 95       	lsr	r24
    134a:	77 95       	ror	r23
    134c:	67 95       	ror	r22
    134e:	b7 95       	ror	r27
    1350:	f7 95       	ror	r31
    1352:	e7 95       	ror	r30
    1354:	9f 5f       	subi	r25, 0xFF	; 255
    1356:	c1 f7       	brne	.-16     	; 0x1348 <__mulsf3_pse+0x90>
    1358:	fe 2b       	or	r31, r30
    135a:	88 0f       	add	r24, r24
    135c:	91 1d       	adc	r25, r1
    135e:	96 95       	lsr	r25
    1360:	87 95       	ror	r24
    1362:	97 f9       	bld	r25, 7
    1364:	08 95       	ret

00001366 <vfprintf>:
    1366:	a0 e1       	ldi	r26, 0x10	; 16
    1368:	b0 e0       	ldi	r27, 0x00	; 0
    136a:	e9 eb       	ldi	r30, 0xB9	; 185
    136c:	f9 e0       	ldi	r31, 0x09	; 9
    136e:	0c 94 36 0d 	jmp	0x1a6c	; 0x1a6c <__prologue_saves__>
    1372:	7c 01       	movw	r14, r24
    1374:	1b 01       	movw	r2, r22
    1376:	6a 01       	movw	r12, r20
    1378:	fc 01       	movw	r30, r24
    137a:	17 82       	std	Z+7, r1	; 0x07
    137c:	16 82       	std	Z+6, r1	; 0x06
    137e:	83 81       	ldd	r24, Z+3	; 0x03
    1380:	81 ff       	sbrs	r24, 1
    1382:	44 c3       	rjmp	.+1672   	; 0x1a0c <vfprintf+0x6a6>
    1384:	9e 01       	movw	r18, r28
    1386:	2f 5f       	subi	r18, 0xFF	; 255
    1388:	3f 4f       	sbci	r19, 0xFF	; 255
    138a:	39 01       	movw	r6, r18
    138c:	f7 01       	movw	r30, r14
    138e:	93 81       	ldd	r25, Z+3	; 0x03
    1390:	f1 01       	movw	r30, r2
    1392:	93 fd       	sbrc	r25, 3
    1394:	85 91       	lpm	r24, Z+
    1396:	93 ff       	sbrs	r25, 3
    1398:	81 91       	ld	r24, Z+
    139a:	1f 01       	movw	r2, r30
    139c:	88 23       	and	r24, r24
    139e:	09 f4       	brne	.+2      	; 0x13a2 <vfprintf+0x3c>
    13a0:	31 c3       	rjmp	.+1634   	; 0x1a04 <vfprintf+0x69e>
    13a2:	85 32       	cpi	r24, 0x25	; 37
    13a4:	39 f4       	brne	.+14     	; 0x13b4 <vfprintf+0x4e>
    13a6:	93 fd       	sbrc	r25, 3
    13a8:	85 91       	lpm	r24, Z+
    13aa:	93 ff       	sbrs	r25, 3
    13ac:	81 91       	ld	r24, Z+
    13ae:	1f 01       	movw	r2, r30
    13b0:	85 32       	cpi	r24, 0x25	; 37
    13b2:	39 f4       	brne	.+14     	; 0x13c2 <vfprintf+0x5c>
    13b4:	b7 01       	movw	r22, r14
    13b6:	90 e0       	ldi	r25, 0x00	; 0
    13b8:	0e 94 5b 0e 	call	0x1cb6	; 0x1cb6 <fputc>
    13bc:	56 01       	movw	r10, r12
    13be:	65 01       	movw	r12, r10
    13c0:	e5 cf       	rjmp	.-54     	; 0x138c <vfprintf+0x26>
    13c2:	10 e0       	ldi	r17, 0x00	; 0
    13c4:	51 2c       	mov	r5, r1
    13c6:	91 2c       	mov	r9, r1
    13c8:	ff e1       	ldi	r31, 0x1F	; 31
    13ca:	f9 15       	cp	r31, r9
    13cc:	d8 f0       	brcs	.+54     	; 0x1404 <vfprintf+0x9e>
    13ce:	8b 32       	cpi	r24, 0x2B	; 43
    13d0:	79 f0       	breq	.+30     	; 0x13f0 <vfprintf+0x8a>
    13d2:	38 f4       	brcc	.+14     	; 0x13e2 <vfprintf+0x7c>
    13d4:	80 32       	cpi	r24, 0x20	; 32
    13d6:	79 f0       	breq	.+30     	; 0x13f6 <vfprintf+0x90>
    13d8:	83 32       	cpi	r24, 0x23	; 35
    13da:	a1 f4       	brne	.+40     	; 0x1404 <vfprintf+0x9e>
    13dc:	f9 2d       	mov	r31, r9
    13de:	f0 61       	ori	r31, 0x10	; 16
    13e0:	2e c0       	rjmp	.+92     	; 0x143e <vfprintf+0xd8>
    13e2:	8d 32       	cpi	r24, 0x2D	; 45
    13e4:	61 f0       	breq	.+24     	; 0x13fe <vfprintf+0x98>
    13e6:	80 33       	cpi	r24, 0x30	; 48
    13e8:	69 f4       	brne	.+26     	; 0x1404 <vfprintf+0x9e>
    13ea:	29 2d       	mov	r18, r9
    13ec:	21 60       	ori	r18, 0x01	; 1
    13ee:	2d c0       	rjmp	.+90     	; 0x144a <vfprintf+0xe4>
    13f0:	39 2d       	mov	r19, r9
    13f2:	32 60       	ori	r19, 0x02	; 2
    13f4:	93 2e       	mov	r9, r19
    13f6:	89 2d       	mov	r24, r9
    13f8:	84 60       	ori	r24, 0x04	; 4
    13fa:	98 2e       	mov	r9, r24
    13fc:	2a c0       	rjmp	.+84     	; 0x1452 <vfprintf+0xec>
    13fe:	e9 2d       	mov	r30, r9
    1400:	e8 60       	ori	r30, 0x08	; 8
    1402:	15 c0       	rjmp	.+42     	; 0x142e <vfprintf+0xc8>
    1404:	97 fc       	sbrc	r9, 7
    1406:	2d c0       	rjmp	.+90     	; 0x1462 <vfprintf+0xfc>
    1408:	20 ed       	ldi	r18, 0xD0	; 208
    140a:	28 0f       	add	r18, r24
    140c:	2a 30       	cpi	r18, 0x0A	; 10
    140e:	88 f4       	brcc	.+34     	; 0x1432 <vfprintf+0xcc>
    1410:	96 fe       	sbrs	r9, 6
    1412:	06 c0       	rjmp	.+12     	; 0x1420 <vfprintf+0xba>
    1414:	3a e0       	ldi	r19, 0x0A	; 10
    1416:	13 9f       	mul	r17, r19
    1418:	20 0d       	add	r18, r0
    141a:	11 24       	eor	r1, r1
    141c:	12 2f       	mov	r17, r18
    141e:	19 c0       	rjmp	.+50     	; 0x1452 <vfprintf+0xec>
    1420:	8a e0       	ldi	r24, 0x0A	; 10
    1422:	58 9e       	mul	r5, r24
    1424:	20 0d       	add	r18, r0
    1426:	11 24       	eor	r1, r1
    1428:	52 2e       	mov	r5, r18
    142a:	e9 2d       	mov	r30, r9
    142c:	e0 62       	ori	r30, 0x20	; 32
    142e:	9e 2e       	mov	r9, r30
    1430:	10 c0       	rjmp	.+32     	; 0x1452 <vfprintf+0xec>
    1432:	8e 32       	cpi	r24, 0x2E	; 46
    1434:	31 f4       	brne	.+12     	; 0x1442 <vfprintf+0xdc>
    1436:	96 fc       	sbrc	r9, 6
    1438:	e5 c2       	rjmp	.+1482   	; 0x1a04 <vfprintf+0x69e>
    143a:	f9 2d       	mov	r31, r9
    143c:	f0 64       	ori	r31, 0x40	; 64
    143e:	9f 2e       	mov	r9, r31
    1440:	08 c0       	rjmp	.+16     	; 0x1452 <vfprintf+0xec>
    1442:	8c 36       	cpi	r24, 0x6C	; 108
    1444:	21 f4       	brne	.+8      	; 0x144e <vfprintf+0xe8>
    1446:	29 2d       	mov	r18, r9
    1448:	20 68       	ori	r18, 0x80	; 128
    144a:	92 2e       	mov	r9, r18
    144c:	02 c0       	rjmp	.+4      	; 0x1452 <vfprintf+0xec>
    144e:	88 36       	cpi	r24, 0x68	; 104
    1450:	41 f4       	brne	.+16     	; 0x1462 <vfprintf+0xfc>
    1452:	f1 01       	movw	r30, r2
    1454:	93 fd       	sbrc	r25, 3
    1456:	85 91       	lpm	r24, Z+
    1458:	93 ff       	sbrs	r25, 3
    145a:	81 91       	ld	r24, Z+
    145c:	1f 01       	movw	r2, r30
    145e:	81 11       	cpse	r24, r1
    1460:	b3 cf       	rjmp	.-154    	; 0x13c8 <vfprintf+0x62>
    1462:	9b eb       	ldi	r25, 0xBB	; 187
    1464:	98 0f       	add	r25, r24
    1466:	93 30       	cpi	r25, 0x03	; 3
    1468:	20 f4       	brcc	.+8      	; 0x1472 <vfprintf+0x10c>
    146a:	99 2d       	mov	r25, r9
    146c:	90 61       	ori	r25, 0x10	; 16
    146e:	80 5e       	subi	r24, 0xE0	; 224
    1470:	07 c0       	rjmp	.+14     	; 0x1480 <vfprintf+0x11a>
    1472:	9b e9       	ldi	r25, 0x9B	; 155
    1474:	98 0f       	add	r25, r24
    1476:	93 30       	cpi	r25, 0x03	; 3
    1478:	08 f0       	brcs	.+2      	; 0x147c <vfprintf+0x116>
    147a:	66 c1       	rjmp	.+716    	; 0x1748 <vfprintf+0x3e2>
    147c:	99 2d       	mov	r25, r9
    147e:	9f 7e       	andi	r25, 0xEF	; 239
    1480:	96 ff       	sbrs	r25, 6
    1482:	16 e0       	ldi	r17, 0x06	; 6
    1484:	9f 73       	andi	r25, 0x3F	; 63
    1486:	99 2e       	mov	r9, r25
    1488:	85 36       	cpi	r24, 0x65	; 101
    148a:	19 f4       	brne	.+6      	; 0x1492 <vfprintf+0x12c>
    148c:	90 64       	ori	r25, 0x40	; 64
    148e:	99 2e       	mov	r9, r25
    1490:	08 c0       	rjmp	.+16     	; 0x14a2 <vfprintf+0x13c>
    1492:	86 36       	cpi	r24, 0x66	; 102
    1494:	21 f4       	brne	.+8      	; 0x149e <vfprintf+0x138>
    1496:	39 2f       	mov	r19, r25
    1498:	30 68       	ori	r19, 0x80	; 128
    149a:	93 2e       	mov	r9, r19
    149c:	02 c0       	rjmp	.+4      	; 0x14a2 <vfprintf+0x13c>
    149e:	11 11       	cpse	r17, r1
    14a0:	11 50       	subi	r17, 0x01	; 1
    14a2:	97 fe       	sbrs	r9, 7
    14a4:	07 c0       	rjmp	.+14     	; 0x14b4 <vfprintf+0x14e>
    14a6:	1c 33       	cpi	r17, 0x3C	; 60
    14a8:	50 f4       	brcc	.+20     	; 0x14be <vfprintf+0x158>
    14aa:	44 24       	eor	r4, r4
    14ac:	43 94       	inc	r4
    14ae:	41 0e       	add	r4, r17
    14b0:	27 e0       	ldi	r18, 0x07	; 7
    14b2:	0b c0       	rjmp	.+22     	; 0x14ca <vfprintf+0x164>
    14b4:	18 30       	cpi	r17, 0x08	; 8
    14b6:	38 f0       	brcs	.+14     	; 0x14c6 <vfprintf+0x160>
    14b8:	27 e0       	ldi	r18, 0x07	; 7
    14ba:	17 e0       	ldi	r17, 0x07	; 7
    14bc:	05 c0       	rjmp	.+10     	; 0x14c8 <vfprintf+0x162>
    14be:	27 e0       	ldi	r18, 0x07	; 7
    14c0:	9c e3       	ldi	r25, 0x3C	; 60
    14c2:	49 2e       	mov	r4, r25
    14c4:	02 c0       	rjmp	.+4      	; 0x14ca <vfprintf+0x164>
    14c6:	21 2f       	mov	r18, r17
    14c8:	41 2c       	mov	r4, r1
    14ca:	56 01       	movw	r10, r12
    14cc:	84 e0       	ldi	r24, 0x04	; 4
    14ce:	a8 0e       	add	r10, r24
    14d0:	b1 1c       	adc	r11, r1
    14d2:	f6 01       	movw	r30, r12
    14d4:	60 81       	ld	r22, Z
    14d6:	71 81       	ldd	r23, Z+1	; 0x01
    14d8:	82 81       	ldd	r24, Z+2	; 0x02
    14da:	93 81       	ldd	r25, Z+3	; 0x03
    14dc:	04 2d       	mov	r16, r4
    14de:	a3 01       	movw	r20, r6
    14e0:	0e 94 6d 0d 	call	0x1ada	; 0x1ada <__ftoa_engine>
    14e4:	6c 01       	movw	r12, r24
    14e6:	f9 81       	ldd	r31, Y+1	; 0x01
    14e8:	fc 87       	std	Y+12, r31	; 0x0c
    14ea:	f0 ff       	sbrs	r31, 0
    14ec:	02 c0       	rjmp	.+4      	; 0x14f2 <vfprintf+0x18c>
    14ee:	f3 ff       	sbrs	r31, 3
    14f0:	06 c0       	rjmp	.+12     	; 0x14fe <vfprintf+0x198>
    14f2:	91 fc       	sbrc	r9, 1
    14f4:	06 c0       	rjmp	.+12     	; 0x1502 <vfprintf+0x19c>
    14f6:	92 fe       	sbrs	r9, 2
    14f8:	06 c0       	rjmp	.+12     	; 0x1506 <vfprintf+0x1a0>
    14fa:	00 e2       	ldi	r16, 0x20	; 32
    14fc:	05 c0       	rjmp	.+10     	; 0x1508 <vfprintf+0x1a2>
    14fe:	0d e2       	ldi	r16, 0x2D	; 45
    1500:	03 c0       	rjmp	.+6      	; 0x1508 <vfprintf+0x1a2>
    1502:	0b e2       	ldi	r16, 0x2B	; 43
    1504:	01 c0       	rjmp	.+2      	; 0x1508 <vfprintf+0x1a2>
    1506:	00 e0       	ldi	r16, 0x00	; 0
    1508:	8c 85       	ldd	r24, Y+12	; 0x0c
    150a:	8c 70       	andi	r24, 0x0C	; 12
    150c:	19 f0       	breq	.+6      	; 0x1514 <vfprintf+0x1ae>
    150e:	01 11       	cpse	r16, r1
    1510:	5a c2       	rjmp	.+1204   	; 0x19c6 <vfprintf+0x660>
    1512:	9b c2       	rjmp	.+1334   	; 0x1a4a <vfprintf+0x6e4>
    1514:	97 fe       	sbrs	r9, 7
    1516:	10 c0       	rjmp	.+32     	; 0x1538 <vfprintf+0x1d2>
    1518:	4c 0c       	add	r4, r12
    151a:	fc 85       	ldd	r31, Y+12	; 0x0c
    151c:	f4 ff       	sbrs	r31, 4
    151e:	04 c0       	rjmp	.+8      	; 0x1528 <vfprintf+0x1c2>
    1520:	8a 81       	ldd	r24, Y+2	; 0x02
    1522:	81 33       	cpi	r24, 0x31	; 49
    1524:	09 f4       	brne	.+2      	; 0x1528 <vfprintf+0x1c2>
    1526:	4a 94       	dec	r4
    1528:	14 14       	cp	r1, r4
    152a:	74 f5       	brge	.+92     	; 0x1588 <vfprintf+0x222>
    152c:	28 e0       	ldi	r18, 0x08	; 8
    152e:	24 15       	cp	r18, r4
    1530:	78 f5       	brcc	.+94     	; 0x1590 <vfprintf+0x22a>
    1532:	88 e0       	ldi	r24, 0x08	; 8
    1534:	48 2e       	mov	r4, r24
    1536:	2c c0       	rjmp	.+88     	; 0x1590 <vfprintf+0x22a>
    1538:	96 fc       	sbrc	r9, 6
    153a:	2a c0       	rjmp	.+84     	; 0x1590 <vfprintf+0x22a>
    153c:	81 2f       	mov	r24, r17
    153e:	90 e0       	ldi	r25, 0x00	; 0
    1540:	8c 15       	cp	r24, r12
    1542:	9d 05       	cpc	r25, r13
    1544:	9c f0       	brlt	.+38     	; 0x156c <vfprintf+0x206>
    1546:	3c ef       	ldi	r19, 0xFC	; 252
    1548:	c3 16       	cp	r12, r19
    154a:	3f ef       	ldi	r19, 0xFF	; 255
    154c:	d3 06       	cpc	r13, r19
    154e:	74 f0       	brlt	.+28     	; 0x156c <vfprintf+0x206>
    1550:	89 2d       	mov	r24, r9
    1552:	80 68       	ori	r24, 0x80	; 128
    1554:	98 2e       	mov	r9, r24
    1556:	0a c0       	rjmp	.+20     	; 0x156c <vfprintf+0x206>
    1558:	e2 e0       	ldi	r30, 0x02	; 2
    155a:	f0 e0       	ldi	r31, 0x00	; 0
    155c:	ec 0f       	add	r30, r28
    155e:	fd 1f       	adc	r31, r29
    1560:	e1 0f       	add	r30, r17
    1562:	f1 1d       	adc	r31, r1
    1564:	80 81       	ld	r24, Z
    1566:	80 33       	cpi	r24, 0x30	; 48
    1568:	19 f4       	brne	.+6      	; 0x1570 <vfprintf+0x20a>
    156a:	11 50       	subi	r17, 0x01	; 1
    156c:	11 11       	cpse	r17, r1
    156e:	f4 cf       	rjmp	.-24     	; 0x1558 <vfprintf+0x1f2>
    1570:	97 fe       	sbrs	r9, 7
    1572:	0e c0       	rjmp	.+28     	; 0x1590 <vfprintf+0x22a>
    1574:	44 24       	eor	r4, r4
    1576:	43 94       	inc	r4
    1578:	41 0e       	add	r4, r17
    157a:	81 2f       	mov	r24, r17
    157c:	90 e0       	ldi	r25, 0x00	; 0
    157e:	c8 16       	cp	r12, r24
    1580:	d9 06       	cpc	r13, r25
    1582:	2c f4       	brge	.+10     	; 0x158e <vfprintf+0x228>
    1584:	1c 19       	sub	r17, r12
    1586:	04 c0       	rjmp	.+8      	; 0x1590 <vfprintf+0x22a>
    1588:	44 24       	eor	r4, r4
    158a:	43 94       	inc	r4
    158c:	01 c0       	rjmp	.+2      	; 0x1590 <vfprintf+0x22a>
    158e:	10 e0       	ldi	r17, 0x00	; 0
    1590:	97 fe       	sbrs	r9, 7
    1592:	06 c0       	rjmp	.+12     	; 0x15a0 <vfprintf+0x23a>
    1594:	1c 14       	cp	r1, r12
    1596:	1d 04       	cpc	r1, r13
    1598:	34 f4       	brge	.+12     	; 0x15a6 <vfprintf+0x240>
    159a:	c6 01       	movw	r24, r12
    159c:	01 96       	adiw	r24, 0x01	; 1
    159e:	05 c0       	rjmp	.+10     	; 0x15aa <vfprintf+0x244>
    15a0:	85 e0       	ldi	r24, 0x05	; 5
    15a2:	90 e0       	ldi	r25, 0x00	; 0
    15a4:	02 c0       	rjmp	.+4      	; 0x15aa <vfprintf+0x244>
    15a6:	81 e0       	ldi	r24, 0x01	; 1
    15a8:	90 e0       	ldi	r25, 0x00	; 0
    15aa:	01 11       	cpse	r16, r1
    15ac:	01 96       	adiw	r24, 0x01	; 1
    15ae:	11 23       	and	r17, r17
    15b0:	31 f0       	breq	.+12     	; 0x15be <vfprintf+0x258>
    15b2:	21 2f       	mov	r18, r17
    15b4:	30 e0       	ldi	r19, 0x00	; 0
    15b6:	2f 5f       	subi	r18, 0xFF	; 255
    15b8:	3f 4f       	sbci	r19, 0xFF	; 255
    15ba:	82 0f       	add	r24, r18
    15bc:	93 1f       	adc	r25, r19
    15be:	25 2d       	mov	r18, r5
    15c0:	30 e0       	ldi	r19, 0x00	; 0
    15c2:	82 17       	cp	r24, r18
    15c4:	93 07       	cpc	r25, r19
    15c6:	14 f4       	brge	.+4      	; 0x15cc <vfprintf+0x266>
    15c8:	58 1a       	sub	r5, r24
    15ca:	01 c0       	rjmp	.+2      	; 0x15ce <vfprintf+0x268>
    15cc:	51 2c       	mov	r5, r1
    15ce:	89 2d       	mov	r24, r9
    15d0:	89 70       	andi	r24, 0x09	; 9
    15d2:	49 f4       	brne	.+18     	; 0x15e6 <vfprintf+0x280>
    15d4:	55 20       	and	r5, r5
    15d6:	39 f0       	breq	.+14     	; 0x15e6 <vfprintf+0x280>
    15d8:	b7 01       	movw	r22, r14
    15da:	80 e2       	ldi	r24, 0x20	; 32
    15dc:	90 e0       	ldi	r25, 0x00	; 0
    15de:	0e 94 5b 0e 	call	0x1cb6	; 0x1cb6 <fputc>
    15e2:	5a 94       	dec	r5
    15e4:	f7 cf       	rjmp	.-18     	; 0x15d4 <vfprintf+0x26e>
    15e6:	00 23       	and	r16, r16
    15e8:	29 f0       	breq	.+10     	; 0x15f4 <vfprintf+0x28e>
    15ea:	b7 01       	movw	r22, r14
    15ec:	80 2f       	mov	r24, r16
    15ee:	90 e0       	ldi	r25, 0x00	; 0
    15f0:	0e 94 5b 0e 	call	0x1cb6	; 0x1cb6 <fputc>
    15f4:	93 fc       	sbrc	r9, 3
    15f6:	09 c0       	rjmp	.+18     	; 0x160a <vfprintf+0x2a4>
    15f8:	55 20       	and	r5, r5
    15fa:	39 f0       	breq	.+14     	; 0x160a <vfprintf+0x2a4>
    15fc:	b7 01       	movw	r22, r14
    15fe:	80 e3       	ldi	r24, 0x30	; 48
    1600:	90 e0       	ldi	r25, 0x00	; 0
    1602:	0e 94 5b 0e 	call	0x1cb6	; 0x1cb6 <fputc>
    1606:	5a 94       	dec	r5
    1608:	f7 cf       	rjmp	.-18     	; 0x15f8 <vfprintf+0x292>
    160a:	97 fe       	sbrs	r9, 7
    160c:	4c c0       	rjmp	.+152    	; 0x16a6 <vfprintf+0x340>
    160e:	46 01       	movw	r8, r12
    1610:	d7 fe       	sbrs	r13, 7
    1612:	02 c0       	rjmp	.+4      	; 0x1618 <vfprintf+0x2b2>
    1614:	81 2c       	mov	r8, r1
    1616:	91 2c       	mov	r9, r1
    1618:	c6 01       	movw	r24, r12
    161a:	88 19       	sub	r24, r8
    161c:	99 09       	sbc	r25, r9
    161e:	f3 01       	movw	r30, r6
    1620:	e8 0f       	add	r30, r24
    1622:	f9 1f       	adc	r31, r25
    1624:	fe 87       	std	Y+14, r31	; 0x0e
    1626:	ed 87       	std	Y+13, r30	; 0x0d
    1628:	96 01       	movw	r18, r12
    162a:	24 19       	sub	r18, r4
    162c:	31 09       	sbc	r19, r1
    162e:	38 8b       	std	Y+16, r19	; 0x10
    1630:	2f 87       	std	Y+15, r18	; 0x0f
    1632:	01 2f       	mov	r16, r17
    1634:	10 e0       	ldi	r17, 0x00	; 0
    1636:	11 95       	neg	r17
    1638:	01 95       	neg	r16
    163a:	11 09       	sbc	r17, r1
    163c:	3f ef       	ldi	r19, 0xFF	; 255
    163e:	83 16       	cp	r8, r19
    1640:	93 06       	cpc	r9, r19
    1642:	29 f4       	brne	.+10     	; 0x164e <vfprintf+0x2e8>
    1644:	b7 01       	movw	r22, r14
    1646:	8e e2       	ldi	r24, 0x2E	; 46
    1648:	90 e0       	ldi	r25, 0x00	; 0
    164a:	0e 94 5b 0e 	call	0x1cb6	; 0x1cb6 <fputc>
    164e:	c8 14       	cp	r12, r8
    1650:	d9 04       	cpc	r13, r9
    1652:	4c f0       	brlt	.+18     	; 0x1666 <vfprintf+0x300>
    1654:	8f 85       	ldd	r24, Y+15	; 0x0f
    1656:	98 89       	ldd	r25, Y+16	; 0x10
    1658:	88 15       	cp	r24, r8
    165a:	99 05       	cpc	r25, r9
    165c:	24 f4       	brge	.+8      	; 0x1666 <vfprintf+0x300>
    165e:	ed 85       	ldd	r30, Y+13	; 0x0d
    1660:	fe 85       	ldd	r31, Y+14	; 0x0e
    1662:	81 81       	ldd	r24, Z+1	; 0x01
    1664:	01 c0       	rjmp	.+2      	; 0x1668 <vfprintf+0x302>
    1666:	80 e3       	ldi	r24, 0x30	; 48
    1668:	f1 e0       	ldi	r31, 0x01	; 1
    166a:	8f 1a       	sub	r8, r31
    166c:	91 08       	sbc	r9, r1
    166e:	2d 85       	ldd	r18, Y+13	; 0x0d
    1670:	3e 85       	ldd	r19, Y+14	; 0x0e
    1672:	2f 5f       	subi	r18, 0xFF	; 255
    1674:	3f 4f       	sbci	r19, 0xFF	; 255
    1676:	3e 87       	std	Y+14, r19	; 0x0e
    1678:	2d 87       	std	Y+13, r18	; 0x0d
    167a:	80 16       	cp	r8, r16
    167c:	91 06       	cpc	r9, r17
    167e:	2c f0       	brlt	.+10     	; 0x168a <vfprintf+0x324>
    1680:	b7 01       	movw	r22, r14
    1682:	90 e0       	ldi	r25, 0x00	; 0
    1684:	0e 94 5b 0e 	call	0x1cb6	; 0x1cb6 <fputc>
    1688:	d9 cf       	rjmp	.-78     	; 0x163c <vfprintf+0x2d6>
    168a:	c8 14       	cp	r12, r8
    168c:	d9 04       	cpc	r13, r9
    168e:	41 f4       	brne	.+16     	; 0x16a0 <vfprintf+0x33a>
    1690:	9a 81       	ldd	r25, Y+2	; 0x02
    1692:	96 33       	cpi	r25, 0x36	; 54
    1694:	20 f4       	brcc	.+8      	; 0x169e <vfprintf+0x338>
    1696:	95 33       	cpi	r25, 0x35	; 53
    1698:	19 f4       	brne	.+6      	; 0x16a0 <vfprintf+0x33a>
    169a:	3c 85       	ldd	r19, Y+12	; 0x0c
    169c:	34 ff       	sbrs	r19, 4
    169e:	81 e3       	ldi	r24, 0x31	; 49
    16a0:	b7 01       	movw	r22, r14
    16a2:	90 e0       	ldi	r25, 0x00	; 0
    16a4:	4e c0       	rjmp	.+156    	; 0x1742 <vfprintf+0x3dc>
    16a6:	8a 81       	ldd	r24, Y+2	; 0x02
    16a8:	81 33       	cpi	r24, 0x31	; 49
    16aa:	19 f0       	breq	.+6      	; 0x16b2 <vfprintf+0x34c>
    16ac:	9c 85       	ldd	r25, Y+12	; 0x0c
    16ae:	9f 7e       	andi	r25, 0xEF	; 239
    16b0:	9c 87       	std	Y+12, r25	; 0x0c
    16b2:	b7 01       	movw	r22, r14
    16b4:	90 e0       	ldi	r25, 0x00	; 0
    16b6:	0e 94 5b 0e 	call	0x1cb6	; 0x1cb6 <fputc>
    16ba:	11 11       	cpse	r17, r1
    16bc:	05 c0       	rjmp	.+10     	; 0x16c8 <vfprintf+0x362>
    16be:	94 fc       	sbrc	r9, 4
    16c0:	18 c0       	rjmp	.+48     	; 0x16f2 <vfprintf+0x38c>
    16c2:	85 e6       	ldi	r24, 0x65	; 101
    16c4:	90 e0       	ldi	r25, 0x00	; 0
    16c6:	17 c0       	rjmp	.+46     	; 0x16f6 <vfprintf+0x390>
    16c8:	b7 01       	movw	r22, r14
    16ca:	8e e2       	ldi	r24, 0x2E	; 46
    16cc:	90 e0       	ldi	r25, 0x00	; 0
    16ce:	0e 94 5b 0e 	call	0x1cb6	; 0x1cb6 <fputc>
    16d2:	1e 5f       	subi	r17, 0xFE	; 254
    16d4:	82 e0       	ldi	r24, 0x02	; 2
    16d6:	01 e0       	ldi	r16, 0x01	; 1
    16d8:	08 0f       	add	r16, r24
    16da:	f3 01       	movw	r30, r6
    16dc:	e8 0f       	add	r30, r24
    16de:	f1 1d       	adc	r31, r1
    16e0:	80 81       	ld	r24, Z
    16e2:	b7 01       	movw	r22, r14
    16e4:	90 e0       	ldi	r25, 0x00	; 0
    16e6:	0e 94 5b 0e 	call	0x1cb6	; 0x1cb6 <fputc>
    16ea:	80 2f       	mov	r24, r16
    16ec:	01 13       	cpse	r16, r17
    16ee:	f3 cf       	rjmp	.-26     	; 0x16d6 <vfprintf+0x370>
    16f0:	e6 cf       	rjmp	.-52     	; 0x16be <vfprintf+0x358>
    16f2:	85 e4       	ldi	r24, 0x45	; 69
    16f4:	90 e0       	ldi	r25, 0x00	; 0
    16f6:	b7 01       	movw	r22, r14
    16f8:	0e 94 5b 0e 	call	0x1cb6	; 0x1cb6 <fputc>
    16fc:	d7 fc       	sbrc	r13, 7
    16fe:	06 c0       	rjmp	.+12     	; 0x170c <vfprintf+0x3a6>
    1700:	c1 14       	cp	r12, r1
    1702:	d1 04       	cpc	r13, r1
    1704:	41 f4       	brne	.+16     	; 0x1716 <vfprintf+0x3b0>
    1706:	ec 85       	ldd	r30, Y+12	; 0x0c
    1708:	e4 ff       	sbrs	r30, 4
    170a:	05 c0       	rjmp	.+10     	; 0x1716 <vfprintf+0x3b0>
    170c:	d1 94       	neg	r13
    170e:	c1 94       	neg	r12
    1710:	d1 08       	sbc	r13, r1
    1712:	8d e2       	ldi	r24, 0x2D	; 45
    1714:	01 c0       	rjmp	.+2      	; 0x1718 <vfprintf+0x3b2>
    1716:	8b e2       	ldi	r24, 0x2B	; 43
    1718:	b7 01       	movw	r22, r14
    171a:	90 e0       	ldi	r25, 0x00	; 0
    171c:	0e 94 5b 0e 	call	0x1cb6	; 0x1cb6 <fputc>
    1720:	80 e3       	ldi	r24, 0x30	; 48
    1722:	2a e0       	ldi	r18, 0x0A	; 10
    1724:	c2 16       	cp	r12, r18
    1726:	d1 04       	cpc	r13, r1
    1728:	2c f0       	brlt	.+10     	; 0x1734 <vfprintf+0x3ce>
    172a:	8f 5f       	subi	r24, 0xFF	; 255
    172c:	fa e0       	ldi	r31, 0x0A	; 10
    172e:	cf 1a       	sub	r12, r31
    1730:	d1 08       	sbc	r13, r1
    1732:	f7 cf       	rjmp	.-18     	; 0x1722 <vfprintf+0x3bc>
    1734:	b7 01       	movw	r22, r14
    1736:	90 e0       	ldi	r25, 0x00	; 0
    1738:	0e 94 5b 0e 	call	0x1cb6	; 0x1cb6 <fputc>
    173c:	b7 01       	movw	r22, r14
    173e:	c6 01       	movw	r24, r12
    1740:	c0 96       	adiw	r24, 0x30	; 48
    1742:	0e 94 5b 0e 	call	0x1cb6	; 0x1cb6 <fputc>
    1746:	54 c1       	rjmp	.+680    	; 0x19f0 <vfprintf+0x68a>
    1748:	83 36       	cpi	r24, 0x63	; 99
    174a:	31 f0       	breq	.+12     	; 0x1758 <vfprintf+0x3f2>
    174c:	83 37       	cpi	r24, 0x73	; 115
    174e:	79 f0       	breq	.+30     	; 0x176e <vfprintf+0x408>
    1750:	83 35       	cpi	r24, 0x53	; 83
    1752:	09 f0       	breq	.+2      	; 0x1756 <vfprintf+0x3f0>
    1754:	56 c0       	rjmp	.+172    	; 0x1802 <vfprintf+0x49c>
    1756:	20 c0       	rjmp	.+64     	; 0x1798 <vfprintf+0x432>
    1758:	56 01       	movw	r10, r12
    175a:	32 e0       	ldi	r19, 0x02	; 2
    175c:	a3 0e       	add	r10, r19
    175e:	b1 1c       	adc	r11, r1
    1760:	f6 01       	movw	r30, r12
    1762:	80 81       	ld	r24, Z
    1764:	89 83       	std	Y+1, r24	; 0x01
    1766:	01 e0       	ldi	r16, 0x01	; 1
    1768:	10 e0       	ldi	r17, 0x00	; 0
    176a:	63 01       	movw	r12, r6
    176c:	12 c0       	rjmp	.+36     	; 0x1792 <vfprintf+0x42c>
    176e:	56 01       	movw	r10, r12
    1770:	f2 e0       	ldi	r31, 0x02	; 2
    1772:	af 0e       	add	r10, r31
    1774:	b1 1c       	adc	r11, r1
    1776:	f6 01       	movw	r30, r12
    1778:	c0 80       	ld	r12, Z
    177a:	d1 80       	ldd	r13, Z+1	; 0x01
    177c:	96 fe       	sbrs	r9, 6
    177e:	03 c0       	rjmp	.+6      	; 0x1786 <vfprintf+0x420>
    1780:	61 2f       	mov	r22, r17
    1782:	70 e0       	ldi	r23, 0x00	; 0
    1784:	02 c0       	rjmp	.+4      	; 0x178a <vfprintf+0x424>
    1786:	6f ef       	ldi	r22, 0xFF	; 255
    1788:	7f ef       	ldi	r23, 0xFF	; 255
    178a:	c6 01       	movw	r24, r12
    178c:	0e 94 50 0e 	call	0x1ca0	; 0x1ca0 <strnlen>
    1790:	8c 01       	movw	r16, r24
    1792:	f9 2d       	mov	r31, r9
    1794:	ff 77       	andi	r31, 0x7F	; 127
    1796:	14 c0       	rjmp	.+40     	; 0x17c0 <vfprintf+0x45a>
    1798:	56 01       	movw	r10, r12
    179a:	22 e0       	ldi	r18, 0x02	; 2
    179c:	a2 0e       	add	r10, r18
    179e:	b1 1c       	adc	r11, r1
    17a0:	f6 01       	movw	r30, r12
    17a2:	c0 80       	ld	r12, Z
    17a4:	d1 80       	ldd	r13, Z+1	; 0x01
    17a6:	96 fe       	sbrs	r9, 6
    17a8:	03 c0       	rjmp	.+6      	; 0x17b0 <vfprintf+0x44a>
    17aa:	61 2f       	mov	r22, r17
    17ac:	70 e0       	ldi	r23, 0x00	; 0
    17ae:	02 c0       	rjmp	.+4      	; 0x17b4 <vfprintf+0x44e>
    17b0:	6f ef       	ldi	r22, 0xFF	; 255
    17b2:	7f ef       	ldi	r23, 0xFF	; 255
    17b4:	c6 01       	movw	r24, r12
    17b6:	0e 94 45 0e 	call	0x1c8a	; 0x1c8a <strnlen_P>
    17ba:	8c 01       	movw	r16, r24
    17bc:	f9 2d       	mov	r31, r9
    17be:	f0 68       	ori	r31, 0x80	; 128
    17c0:	9f 2e       	mov	r9, r31
    17c2:	f3 fd       	sbrc	r31, 3
    17c4:	1a c0       	rjmp	.+52     	; 0x17fa <vfprintf+0x494>
    17c6:	85 2d       	mov	r24, r5
    17c8:	90 e0       	ldi	r25, 0x00	; 0
    17ca:	08 17       	cp	r16, r24
    17cc:	19 07       	cpc	r17, r25
    17ce:	a8 f4       	brcc	.+42     	; 0x17fa <vfprintf+0x494>
    17d0:	b7 01       	movw	r22, r14
    17d2:	80 e2       	ldi	r24, 0x20	; 32
    17d4:	90 e0       	ldi	r25, 0x00	; 0
    17d6:	0e 94 5b 0e 	call	0x1cb6	; 0x1cb6 <fputc>
    17da:	5a 94       	dec	r5
    17dc:	f4 cf       	rjmp	.-24     	; 0x17c6 <vfprintf+0x460>
    17de:	f6 01       	movw	r30, r12
    17e0:	97 fc       	sbrc	r9, 7
    17e2:	85 91       	lpm	r24, Z+
    17e4:	97 fe       	sbrs	r9, 7
    17e6:	81 91       	ld	r24, Z+
    17e8:	6f 01       	movw	r12, r30
    17ea:	b7 01       	movw	r22, r14
    17ec:	90 e0       	ldi	r25, 0x00	; 0
    17ee:	0e 94 5b 0e 	call	0x1cb6	; 0x1cb6 <fputc>
    17f2:	51 10       	cpse	r5, r1
    17f4:	5a 94       	dec	r5
    17f6:	01 50       	subi	r16, 0x01	; 1
    17f8:	11 09       	sbc	r17, r1
    17fa:	01 15       	cp	r16, r1
    17fc:	11 05       	cpc	r17, r1
    17fe:	79 f7       	brne	.-34     	; 0x17de <vfprintf+0x478>
    1800:	f7 c0       	rjmp	.+494    	; 0x19f0 <vfprintf+0x68a>
    1802:	84 36       	cpi	r24, 0x64	; 100
    1804:	11 f0       	breq	.+4      	; 0x180a <vfprintf+0x4a4>
    1806:	89 36       	cpi	r24, 0x69	; 105
    1808:	61 f5       	brne	.+88     	; 0x1862 <vfprintf+0x4fc>
    180a:	56 01       	movw	r10, r12
    180c:	97 fe       	sbrs	r9, 7
    180e:	09 c0       	rjmp	.+18     	; 0x1822 <vfprintf+0x4bc>
    1810:	24 e0       	ldi	r18, 0x04	; 4
    1812:	a2 0e       	add	r10, r18
    1814:	b1 1c       	adc	r11, r1
    1816:	f6 01       	movw	r30, r12
    1818:	60 81       	ld	r22, Z
    181a:	71 81       	ldd	r23, Z+1	; 0x01
    181c:	82 81       	ldd	r24, Z+2	; 0x02
    181e:	93 81       	ldd	r25, Z+3	; 0x03
    1820:	0a c0       	rjmp	.+20     	; 0x1836 <vfprintf+0x4d0>
    1822:	f2 e0       	ldi	r31, 0x02	; 2
    1824:	af 0e       	add	r10, r31
    1826:	b1 1c       	adc	r11, r1
    1828:	f6 01       	movw	r30, r12
    182a:	60 81       	ld	r22, Z
    182c:	71 81       	ldd	r23, Z+1	; 0x01
    182e:	07 2e       	mov	r0, r23
    1830:	00 0c       	add	r0, r0
    1832:	88 0b       	sbc	r24, r24
    1834:	99 0b       	sbc	r25, r25
    1836:	f9 2d       	mov	r31, r9
    1838:	ff 76       	andi	r31, 0x6F	; 111
    183a:	9f 2e       	mov	r9, r31
    183c:	97 ff       	sbrs	r25, 7
    183e:	09 c0       	rjmp	.+18     	; 0x1852 <vfprintf+0x4ec>
    1840:	90 95       	com	r25
    1842:	80 95       	com	r24
    1844:	70 95       	com	r23
    1846:	61 95       	neg	r22
    1848:	7f 4f       	sbci	r23, 0xFF	; 255
    184a:	8f 4f       	sbci	r24, 0xFF	; 255
    184c:	9f 4f       	sbci	r25, 0xFF	; 255
    184e:	f0 68       	ori	r31, 0x80	; 128
    1850:	9f 2e       	mov	r9, r31
    1852:	2a e0       	ldi	r18, 0x0A	; 10
    1854:	30 e0       	ldi	r19, 0x00	; 0
    1856:	a3 01       	movw	r20, r6
    1858:	0e 94 b9 0e 	call	0x1d72	; 0x1d72 <__ultoa_invert>
    185c:	c8 2e       	mov	r12, r24
    185e:	c6 18       	sub	r12, r6
    1860:	3f c0       	rjmp	.+126    	; 0x18e0 <vfprintf+0x57a>
    1862:	09 2d       	mov	r16, r9
    1864:	85 37       	cpi	r24, 0x75	; 117
    1866:	21 f4       	brne	.+8      	; 0x1870 <vfprintf+0x50a>
    1868:	0f 7e       	andi	r16, 0xEF	; 239
    186a:	2a e0       	ldi	r18, 0x0A	; 10
    186c:	30 e0       	ldi	r19, 0x00	; 0
    186e:	1d c0       	rjmp	.+58     	; 0x18aa <vfprintf+0x544>
    1870:	09 7f       	andi	r16, 0xF9	; 249
    1872:	8f 36       	cpi	r24, 0x6F	; 111
    1874:	91 f0       	breq	.+36     	; 0x189a <vfprintf+0x534>
    1876:	18 f4       	brcc	.+6      	; 0x187e <vfprintf+0x518>
    1878:	88 35       	cpi	r24, 0x58	; 88
    187a:	59 f0       	breq	.+22     	; 0x1892 <vfprintf+0x52c>
    187c:	c3 c0       	rjmp	.+390    	; 0x1a04 <vfprintf+0x69e>
    187e:	80 37       	cpi	r24, 0x70	; 112
    1880:	19 f0       	breq	.+6      	; 0x1888 <vfprintf+0x522>
    1882:	88 37       	cpi	r24, 0x78	; 120
    1884:	11 f0       	breq	.+4      	; 0x188a <vfprintf+0x524>
    1886:	be c0       	rjmp	.+380    	; 0x1a04 <vfprintf+0x69e>
    1888:	00 61       	ori	r16, 0x10	; 16
    188a:	04 ff       	sbrs	r16, 4
    188c:	09 c0       	rjmp	.+18     	; 0x18a0 <vfprintf+0x53a>
    188e:	04 60       	ori	r16, 0x04	; 4
    1890:	07 c0       	rjmp	.+14     	; 0x18a0 <vfprintf+0x53a>
    1892:	94 fe       	sbrs	r9, 4
    1894:	08 c0       	rjmp	.+16     	; 0x18a6 <vfprintf+0x540>
    1896:	06 60       	ori	r16, 0x06	; 6
    1898:	06 c0       	rjmp	.+12     	; 0x18a6 <vfprintf+0x540>
    189a:	28 e0       	ldi	r18, 0x08	; 8
    189c:	30 e0       	ldi	r19, 0x00	; 0
    189e:	05 c0       	rjmp	.+10     	; 0x18aa <vfprintf+0x544>
    18a0:	20 e1       	ldi	r18, 0x10	; 16
    18a2:	30 e0       	ldi	r19, 0x00	; 0
    18a4:	02 c0       	rjmp	.+4      	; 0x18aa <vfprintf+0x544>
    18a6:	20 e1       	ldi	r18, 0x10	; 16
    18a8:	32 e0       	ldi	r19, 0x02	; 2
    18aa:	56 01       	movw	r10, r12
    18ac:	07 ff       	sbrs	r16, 7
    18ae:	09 c0       	rjmp	.+18     	; 0x18c2 <vfprintf+0x55c>
    18b0:	84 e0       	ldi	r24, 0x04	; 4
    18b2:	a8 0e       	add	r10, r24
    18b4:	b1 1c       	adc	r11, r1
    18b6:	f6 01       	movw	r30, r12
    18b8:	60 81       	ld	r22, Z
    18ba:	71 81       	ldd	r23, Z+1	; 0x01
    18bc:	82 81       	ldd	r24, Z+2	; 0x02
    18be:	93 81       	ldd	r25, Z+3	; 0x03
    18c0:	08 c0       	rjmp	.+16     	; 0x18d2 <vfprintf+0x56c>
    18c2:	f2 e0       	ldi	r31, 0x02	; 2
    18c4:	af 0e       	add	r10, r31
    18c6:	b1 1c       	adc	r11, r1
    18c8:	f6 01       	movw	r30, r12
    18ca:	60 81       	ld	r22, Z
    18cc:	71 81       	ldd	r23, Z+1	; 0x01
    18ce:	80 e0       	ldi	r24, 0x00	; 0
    18d0:	90 e0       	ldi	r25, 0x00	; 0
    18d2:	a3 01       	movw	r20, r6
    18d4:	0e 94 b9 0e 	call	0x1d72	; 0x1d72 <__ultoa_invert>
    18d8:	c8 2e       	mov	r12, r24
    18da:	c6 18       	sub	r12, r6
    18dc:	0f 77       	andi	r16, 0x7F	; 127
    18de:	90 2e       	mov	r9, r16
    18e0:	96 fe       	sbrs	r9, 6
    18e2:	0b c0       	rjmp	.+22     	; 0x18fa <vfprintf+0x594>
    18e4:	09 2d       	mov	r16, r9
    18e6:	0e 7f       	andi	r16, 0xFE	; 254
    18e8:	c1 16       	cp	r12, r17
    18ea:	50 f4       	brcc	.+20     	; 0x1900 <vfprintf+0x59a>
    18ec:	94 fe       	sbrs	r9, 4
    18ee:	0a c0       	rjmp	.+20     	; 0x1904 <vfprintf+0x59e>
    18f0:	92 fc       	sbrc	r9, 2
    18f2:	08 c0       	rjmp	.+16     	; 0x1904 <vfprintf+0x59e>
    18f4:	09 2d       	mov	r16, r9
    18f6:	0e 7e       	andi	r16, 0xEE	; 238
    18f8:	05 c0       	rjmp	.+10     	; 0x1904 <vfprintf+0x59e>
    18fa:	dc 2c       	mov	r13, r12
    18fc:	09 2d       	mov	r16, r9
    18fe:	03 c0       	rjmp	.+6      	; 0x1906 <vfprintf+0x5a0>
    1900:	dc 2c       	mov	r13, r12
    1902:	01 c0       	rjmp	.+2      	; 0x1906 <vfprintf+0x5a0>
    1904:	d1 2e       	mov	r13, r17
    1906:	04 ff       	sbrs	r16, 4
    1908:	0d c0       	rjmp	.+26     	; 0x1924 <vfprintf+0x5be>
    190a:	fe 01       	movw	r30, r28
    190c:	ec 0d       	add	r30, r12
    190e:	f1 1d       	adc	r31, r1
    1910:	80 81       	ld	r24, Z
    1912:	80 33       	cpi	r24, 0x30	; 48
    1914:	11 f4       	brne	.+4      	; 0x191a <vfprintf+0x5b4>
    1916:	09 7e       	andi	r16, 0xE9	; 233
    1918:	09 c0       	rjmp	.+18     	; 0x192c <vfprintf+0x5c6>
    191a:	02 ff       	sbrs	r16, 2
    191c:	06 c0       	rjmp	.+12     	; 0x192a <vfprintf+0x5c4>
    191e:	d3 94       	inc	r13
    1920:	d3 94       	inc	r13
    1922:	04 c0       	rjmp	.+8      	; 0x192c <vfprintf+0x5c6>
    1924:	80 2f       	mov	r24, r16
    1926:	86 78       	andi	r24, 0x86	; 134
    1928:	09 f0       	breq	.+2      	; 0x192c <vfprintf+0x5c6>
    192a:	d3 94       	inc	r13
    192c:	03 fd       	sbrc	r16, 3
    192e:	11 c0       	rjmp	.+34     	; 0x1952 <vfprintf+0x5ec>
    1930:	00 ff       	sbrs	r16, 0
    1932:	06 c0       	rjmp	.+12     	; 0x1940 <vfprintf+0x5da>
    1934:	1c 2d       	mov	r17, r12
    1936:	d5 14       	cp	r13, r5
    1938:	80 f4       	brcc	.+32     	; 0x195a <vfprintf+0x5f4>
    193a:	15 0d       	add	r17, r5
    193c:	1d 19       	sub	r17, r13
    193e:	0d c0       	rjmp	.+26     	; 0x195a <vfprintf+0x5f4>
    1940:	d5 14       	cp	r13, r5
    1942:	58 f4       	brcc	.+22     	; 0x195a <vfprintf+0x5f4>
    1944:	b7 01       	movw	r22, r14
    1946:	80 e2       	ldi	r24, 0x20	; 32
    1948:	90 e0       	ldi	r25, 0x00	; 0
    194a:	0e 94 5b 0e 	call	0x1cb6	; 0x1cb6 <fputc>
    194e:	d3 94       	inc	r13
    1950:	f7 cf       	rjmp	.-18     	; 0x1940 <vfprintf+0x5da>
    1952:	d5 14       	cp	r13, r5
    1954:	10 f4       	brcc	.+4      	; 0x195a <vfprintf+0x5f4>
    1956:	5d 18       	sub	r5, r13
    1958:	01 c0       	rjmp	.+2      	; 0x195c <vfprintf+0x5f6>
    195a:	51 2c       	mov	r5, r1
    195c:	04 ff       	sbrs	r16, 4
    195e:	10 c0       	rjmp	.+32     	; 0x1980 <vfprintf+0x61a>
    1960:	b7 01       	movw	r22, r14
    1962:	80 e3       	ldi	r24, 0x30	; 48
    1964:	90 e0       	ldi	r25, 0x00	; 0
    1966:	0e 94 5b 0e 	call	0x1cb6	; 0x1cb6 <fputc>
    196a:	02 ff       	sbrs	r16, 2
    196c:	17 c0       	rjmp	.+46     	; 0x199c <vfprintf+0x636>
    196e:	01 fd       	sbrc	r16, 1
    1970:	03 c0       	rjmp	.+6      	; 0x1978 <vfprintf+0x612>
    1972:	88 e7       	ldi	r24, 0x78	; 120
    1974:	90 e0       	ldi	r25, 0x00	; 0
    1976:	02 c0       	rjmp	.+4      	; 0x197c <vfprintf+0x616>
    1978:	88 e5       	ldi	r24, 0x58	; 88
    197a:	90 e0       	ldi	r25, 0x00	; 0
    197c:	b7 01       	movw	r22, r14
    197e:	0c c0       	rjmp	.+24     	; 0x1998 <vfprintf+0x632>
    1980:	80 2f       	mov	r24, r16
    1982:	86 78       	andi	r24, 0x86	; 134
    1984:	59 f0       	breq	.+22     	; 0x199c <vfprintf+0x636>
    1986:	01 ff       	sbrs	r16, 1
    1988:	02 c0       	rjmp	.+4      	; 0x198e <vfprintf+0x628>
    198a:	8b e2       	ldi	r24, 0x2B	; 43
    198c:	01 c0       	rjmp	.+2      	; 0x1990 <vfprintf+0x62a>
    198e:	80 e2       	ldi	r24, 0x20	; 32
    1990:	07 fd       	sbrc	r16, 7
    1992:	8d e2       	ldi	r24, 0x2D	; 45
    1994:	b7 01       	movw	r22, r14
    1996:	90 e0       	ldi	r25, 0x00	; 0
    1998:	0e 94 5b 0e 	call	0x1cb6	; 0x1cb6 <fputc>
    199c:	c1 16       	cp	r12, r17
    199e:	38 f4       	brcc	.+14     	; 0x19ae <vfprintf+0x648>
    19a0:	b7 01       	movw	r22, r14
    19a2:	80 e3       	ldi	r24, 0x30	; 48
    19a4:	90 e0       	ldi	r25, 0x00	; 0
    19a6:	0e 94 5b 0e 	call	0x1cb6	; 0x1cb6 <fputc>
    19aa:	11 50       	subi	r17, 0x01	; 1
    19ac:	f7 cf       	rjmp	.-18     	; 0x199c <vfprintf+0x636>
    19ae:	ca 94       	dec	r12
    19b0:	f3 01       	movw	r30, r6
    19b2:	ec 0d       	add	r30, r12
    19b4:	f1 1d       	adc	r31, r1
    19b6:	80 81       	ld	r24, Z
    19b8:	b7 01       	movw	r22, r14
    19ba:	90 e0       	ldi	r25, 0x00	; 0
    19bc:	0e 94 5b 0e 	call	0x1cb6	; 0x1cb6 <fputc>
    19c0:	c1 10       	cpse	r12, r1
    19c2:	f5 cf       	rjmp	.-22     	; 0x19ae <vfprintf+0x648>
    19c4:	15 c0       	rjmp	.+42     	; 0x19f0 <vfprintf+0x68a>
    19c6:	f4 e0       	ldi	r31, 0x04	; 4
    19c8:	f5 15       	cp	r31, r5
    19ca:	60 f5       	brcc	.+88     	; 0x1a24 <vfprintf+0x6be>
    19cc:	84 e0       	ldi	r24, 0x04	; 4
    19ce:	58 1a       	sub	r5, r24
    19d0:	93 fe       	sbrs	r9, 3
    19d2:	1f c0       	rjmp	.+62     	; 0x1a12 <vfprintf+0x6ac>
    19d4:	01 11       	cpse	r16, r1
    19d6:	27 c0       	rjmp	.+78     	; 0x1a26 <vfprintf+0x6c0>
    19d8:	2c 85       	ldd	r18, Y+12	; 0x0c
    19da:	23 ff       	sbrs	r18, 3
    19dc:	2a c0       	rjmp	.+84     	; 0x1a32 <vfprintf+0x6cc>
    19de:	0e e1       	ldi	r16, 0x1E	; 30
    19e0:	11 e0       	ldi	r17, 0x01	; 1
    19e2:	39 2d       	mov	r19, r9
    19e4:	30 71       	andi	r19, 0x10	; 16
    19e6:	93 2e       	mov	r9, r19
    19e8:	f8 01       	movw	r30, r16
    19ea:	84 91       	lpm	r24, Z
    19ec:	81 11       	cpse	r24, r1
    19ee:	24 c0       	rjmp	.+72     	; 0x1a38 <vfprintf+0x6d2>
    19f0:	55 20       	and	r5, r5
    19f2:	09 f4       	brne	.+2      	; 0x19f6 <vfprintf+0x690>
    19f4:	e4 cc       	rjmp	.-1592   	; 0x13be <vfprintf+0x58>
    19f6:	b7 01       	movw	r22, r14
    19f8:	80 e2       	ldi	r24, 0x20	; 32
    19fa:	90 e0       	ldi	r25, 0x00	; 0
    19fc:	0e 94 5b 0e 	call	0x1cb6	; 0x1cb6 <fputc>
    1a00:	5a 94       	dec	r5
    1a02:	f6 cf       	rjmp	.-20     	; 0x19f0 <vfprintf+0x68a>
    1a04:	f7 01       	movw	r30, r14
    1a06:	86 81       	ldd	r24, Z+6	; 0x06
    1a08:	97 81       	ldd	r25, Z+7	; 0x07
    1a0a:	26 c0       	rjmp	.+76     	; 0x1a58 <vfprintf+0x6f2>
    1a0c:	8f ef       	ldi	r24, 0xFF	; 255
    1a0e:	9f ef       	ldi	r25, 0xFF	; 255
    1a10:	23 c0       	rjmp	.+70     	; 0x1a58 <vfprintf+0x6f2>
    1a12:	b7 01       	movw	r22, r14
    1a14:	80 e2       	ldi	r24, 0x20	; 32
    1a16:	90 e0       	ldi	r25, 0x00	; 0
    1a18:	0e 94 5b 0e 	call	0x1cb6	; 0x1cb6 <fputc>
    1a1c:	5a 94       	dec	r5
    1a1e:	51 10       	cpse	r5, r1
    1a20:	f8 cf       	rjmp	.-16     	; 0x1a12 <vfprintf+0x6ac>
    1a22:	d8 cf       	rjmp	.-80     	; 0x19d4 <vfprintf+0x66e>
    1a24:	51 2c       	mov	r5, r1
    1a26:	b7 01       	movw	r22, r14
    1a28:	80 2f       	mov	r24, r16
    1a2a:	90 e0       	ldi	r25, 0x00	; 0
    1a2c:	0e 94 5b 0e 	call	0x1cb6	; 0x1cb6 <fputc>
    1a30:	d3 cf       	rjmp	.-90     	; 0x19d8 <vfprintf+0x672>
    1a32:	02 e2       	ldi	r16, 0x22	; 34
    1a34:	11 e0       	ldi	r17, 0x01	; 1
    1a36:	d5 cf       	rjmp	.-86     	; 0x19e2 <vfprintf+0x67c>
    1a38:	91 10       	cpse	r9, r1
    1a3a:	80 52       	subi	r24, 0x20	; 32
    1a3c:	b7 01       	movw	r22, r14
    1a3e:	90 e0       	ldi	r25, 0x00	; 0
    1a40:	0e 94 5b 0e 	call	0x1cb6	; 0x1cb6 <fputc>
    1a44:	0f 5f       	subi	r16, 0xFF	; 255
    1a46:	1f 4f       	sbci	r17, 0xFF	; 255
    1a48:	cf cf       	rjmp	.-98     	; 0x19e8 <vfprintf+0x682>
    1a4a:	23 e0       	ldi	r18, 0x03	; 3
    1a4c:	25 15       	cp	r18, r5
    1a4e:	10 f4       	brcc	.+4      	; 0x1a54 <vfprintf+0x6ee>
    1a50:	83 e0       	ldi	r24, 0x03	; 3
    1a52:	bd cf       	rjmp	.-134    	; 0x19ce <vfprintf+0x668>
    1a54:	51 2c       	mov	r5, r1
    1a56:	c0 cf       	rjmp	.-128    	; 0x19d8 <vfprintf+0x672>
    1a58:	60 96       	adiw	r28, 0x10	; 16
    1a5a:	e2 e1       	ldi	r30, 0x12	; 18
    1a5c:	0c 94 52 0d 	jmp	0x1aa4	; 0x1aa4 <__epilogue_restores__>

00001a60 <__tablejump2__>:
    1a60:	ee 0f       	add	r30, r30
    1a62:	ff 1f       	adc	r31, r31
    1a64:	05 90       	lpm	r0, Z+
    1a66:	f4 91       	lpm	r31, Z
    1a68:	e0 2d       	mov	r30, r0
    1a6a:	09 94       	ijmp

00001a6c <__prologue_saves__>:
    1a6c:	2f 92       	push	r2
    1a6e:	3f 92       	push	r3
    1a70:	4f 92       	push	r4
    1a72:	5f 92       	push	r5
    1a74:	6f 92       	push	r6
    1a76:	7f 92       	push	r7
    1a78:	8f 92       	push	r8
    1a7a:	9f 92       	push	r9
    1a7c:	af 92       	push	r10
    1a7e:	bf 92       	push	r11
    1a80:	cf 92       	push	r12
    1a82:	df 92       	push	r13
    1a84:	ef 92       	push	r14
    1a86:	ff 92       	push	r15
    1a88:	0f 93       	push	r16
    1a8a:	1f 93       	push	r17
    1a8c:	cf 93       	push	r28
    1a8e:	df 93       	push	r29
    1a90:	cd b7       	in	r28, 0x3d	; 61
    1a92:	de b7       	in	r29, 0x3e	; 62
    1a94:	ca 1b       	sub	r28, r26
    1a96:	db 0b       	sbc	r29, r27
    1a98:	0f b6       	in	r0, 0x3f	; 63
    1a9a:	f8 94       	cli
    1a9c:	de bf       	out	0x3e, r29	; 62
    1a9e:	0f be       	out	0x3f, r0	; 63
    1aa0:	cd bf       	out	0x3d, r28	; 61
    1aa2:	09 94       	ijmp

00001aa4 <__epilogue_restores__>:
    1aa4:	2a 88       	ldd	r2, Y+18	; 0x12
    1aa6:	39 88       	ldd	r3, Y+17	; 0x11
    1aa8:	48 88       	ldd	r4, Y+16	; 0x10
    1aaa:	5f 84       	ldd	r5, Y+15	; 0x0f
    1aac:	6e 84       	ldd	r6, Y+14	; 0x0e
    1aae:	7d 84       	ldd	r7, Y+13	; 0x0d
    1ab0:	8c 84       	ldd	r8, Y+12	; 0x0c
    1ab2:	9b 84       	ldd	r9, Y+11	; 0x0b
    1ab4:	aa 84       	ldd	r10, Y+10	; 0x0a
    1ab6:	b9 84       	ldd	r11, Y+9	; 0x09
    1ab8:	c8 84       	ldd	r12, Y+8	; 0x08
    1aba:	df 80       	ldd	r13, Y+7	; 0x07
    1abc:	ee 80       	ldd	r14, Y+6	; 0x06
    1abe:	fd 80       	ldd	r15, Y+5	; 0x05
    1ac0:	0c 81       	ldd	r16, Y+4	; 0x04
    1ac2:	1b 81       	ldd	r17, Y+3	; 0x03
    1ac4:	aa 81       	ldd	r26, Y+2	; 0x02
    1ac6:	b9 81       	ldd	r27, Y+1	; 0x01
    1ac8:	ce 0f       	add	r28, r30
    1aca:	d1 1d       	adc	r29, r1
    1acc:	0f b6       	in	r0, 0x3f	; 63
    1ace:	f8 94       	cli
    1ad0:	de bf       	out	0x3e, r29	; 62
    1ad2:	0f be       	out	0x3f, r0	; 63
    1ad4:	cd bf       	out	0x3d, r28	; 61
    1ad6:	ed 01       	movw	r28, r26
    1ad8:	08 95       	ret

00001ada <__ftoa_engine>:
    1ada:	28 30       	cpi	r18, 0x08	; 8
    1adc:	08 f0       	brcs	.+2      	; 0x1ae0 <__ftoa_engine+0x6>
    1ade:	27 e0       	ldi	r18, 0x07	; 7
    1ae0:	33 27       	eor	r19, r19
    1ae2:	da 01       	movw	r26, r20
    1ae4:	99 0f       	add	r25, r25
    1ae6:	31 1d       	adc	r19, r1
    1ae8:	87 fd       	sbrc	r24, 7
    1aea:	91 60       	ori	r25, 0x01	; 1
    1aec:	00 96       	adiw	r24, 0x00	; 0
    1aee:	61 05       	cpc	r22, r1
    1af0:	71 05       	cpc	r23, r1
    1af2:	39 f4       	brne	.+14     	; 0x1b02 <__ftoa_engine+0x28>
    1af4:	32 60       	ori	r19, 0x02	; 2
    1af6:	2e 5f       	subi	r18, 0xFE	; 254
    1af8:	3d 93       	st	X+, r19
    1afa:	30 e3       	ldi	r19, 0x30	; 48
    1afc:	2a 95       	dec	r18
    1afe:	e1 f7       	brne	.-8      	; 0x1af8 <__ftoa_engine+0x1e>
    1b00:	08 95       	ret
    1b02:	9f 3f       	cpi	r25, 0xFF	; 255
    1b04:	30 f0       	brcs	.+12     	; 0x1b12 <__ftoa_engine+0x38>
    1b06:	80 38       	cpi	r24, 0x80	; 128
    1b08:	71 05       	cpc	r23, r1
    1b0a:	61 05       	cpc	r22, r1
    1b0c:	09 f0       	breq	.+2      	; 0x1b10 <__ftoa_engine+0x36>
    1b0e:	3c 5f       	subi	r19, 0xFC	; 252
    1b10:	3c 5f       	subi	r19, 0xFC	; 252
    1b12:	3d 93       	st	X+, r19
    1b14:	91 30       	cpi	r25, 0x01	; 1
    1b16:	08 f0       	brcs	.+2      	; 0x1b1a <__ftoa_engine+0x40>
    1b18:	80 68       	ori	r24, 0x80	; 128
    1b1a:	91 1d       	adc	r25, r1
    1b1c:	df 93       	push	r29
    1b1e:	cf 93       	push	r28
    1b20:	1f 93       	push	r17
    1b22:	0f 93       	push	r16
    1b24:	ff 92       	push	r15
    1b26:	ef 92       	push	r14
    1b28:	19 2f       	mov	r17, r25
    1b2a:	98 7f       	andi	r25, 0xF8	; 248
    1b2c:	96 95       	lsr	r25
    1b2e:	e9 2f       	mov	r30, r25
    1b30:	96 95       	lsr	r25
    1b32:	96 95       	lsr	r25
    1b34:	e9 0f       	add	r30, r25
    1b36:	ff 27       	eor	r31, r31
    1b38:	e0 58       	subi	r30, 0x80	; 128
    1b3a:	fe 4f       	sbci	r31, 0xFE	; 254
    1b3c:	99 27       	eor	r25, r25
    1b3e:	33 27       	eor	r19, r19
    1b40:	ee 24       	eor	r14, r14
    1b42:	ff 24       	eor	r15, r15
    1b44:	a7 01       	movw	r20, r14
    1b46:	e7 01       	movw	r28, r14
    1b48:	05 90       	lpm	r0, Z+
    1b4a:	08 94       	sec
    1b4c:	07 94       	ror	r0
    1b4e:	28 f4       	brcc	.+10     	; 0x1b5a <__ftoa_engine+0x80>
    1b50:	36 0f       	add	r19, r22
    1b52:	e7 1e       	adc	r14, r23
    1b54:	f8 1e       	adc	r15, r24
    1b56:	49 1f       	adc	r20, r25
    1b58:	51 1d       	adc	r21, r1
    1b5a:	66 0f       	add	r22, r22
    1b5c:	77 1f       	adc	r23, r23
    1b5e:	88 1f       	adc	r24, r24
    1b60:	99 1f       	adc	r25, r25
    1b62:	06 94       	lsr	r0
    1b64:	a1 f7       	brne	.-24     	; 0x1b4e <__ftoa_engine+0x74>
    1b66:	05 90       	lpm	r0, Z+
    1b68:	07 94       	ror	r0
    1b6a:	28 f4       	brcc	.+10     	; 0x1b76 <__ftoa_engine+0x9c>
    1b6c:	e7 0e       	add	r14, r23
    1b6e:	f8 1e       	adc	r15, r24
    1b70:	49 1f       	adc	r20, r25
    1b72:	56 1f       	adc	r21, r22
    1b74:	c1 1d       	adc	r28, r1
    1b76:	77 0f       	add	r23, r23
    1b78:	88 1f       	adc	r24, r24
    1b7a:	99 1f       	adc	r25, r25
    1b7c:	66 1f       	adc	r22, r22
    1b7e:	06 94       	lsr	r0
    1b80:	a1 f7       	brne	.-24     	; 0x1b6a <__ftoa_engine+0x90>
    1b82:	05 90       	lpm	r0, Z+
    1b84:	07 94       	ror	r0
    1b86:	28 f4       	brcc	.+10     	; 0x1b92 <__ftoa_engine+0xb8>
    1b88:	f8 0e       	add	r15, r24
    1b8a:	49 1f       	adc	r20, r25
    1b8c:	56 1f       	adc	r21, r22
    1b8e:	c7 1f       	adc	r28, r23
    1b90:	d1 1d       	adc	r29, r1
    1b92:	88 0f       	add	r24, r24
    1b94:	99 1f       	adc	r25, r25
    1b96:	66 1f       	adc	r22, r22
    1b98:	77 1f       	adc	r23, r23
    1b9a:	06 94       	lsr	r0
    1b9c:	a1 f7       	brne	.-24     	; 0x1b86 <__ftoa_engine+0xac>
    1b9e:	05 90       	lpm	r0, Z+
    1ba0:	07 94       	ror	r0
    1ba2:	20 f4       	brcc	.+8      	; 0x1bac <__ftoa_engine+0xd2>
    1ba4:	49 0f       	add	r20, r25
    1ba6:	56 1f       	adc	r21, r22
    1ba8:	c7 1f       	adc	r28, r23
    1baa:	d8 1f       	adc	r29, r24
    1bac:	99 0f       	add	r25, r25
    1bae:	66 1f       	adc	r22, r22
    1bb0:	77 1f       	adc	r23, r23
    1bb2:	88 1f       	adc	r24, r24
    1bb4:	06 94       	lsr	r0
    1bb6:	a9 f7       	brne	.-22     	; 0x1ba2 <__ftoa_engine+0xc8>
    1bb8:	84 91       	lpm	r24, Z
    1bba:	10 95       	com	r17
    1bbc:	17 70       	andi	r17, 0x07	; 7
    1bbe:	41 f0       	breq	.+16     	; 0x1bd0 <__ftoa_engine+0xf6>
    1bc0:	d6 95       	lsr	r29
    1bc2:	c7 95       	ror	r28
    1bc4:	57 95       	ror	r21
    1bc6:	47 95       	ror	r20
    1bc8:	f7 94       	ror	r15
    1bca:	e7 94       	ror	r14
    1bcc:	1a 95       	dec	r17
    1bce:	c1 f7       	brne	.-16     	; 0x1bc0 <__ftoa_engine+0xe6>
    1bd0:	e6 e2       	ldi	r30, 0x26	; 38
    1bd2:	f1 e0       	ldi	r31, 0x01	; 1
    1bd4:	68 94       	set
    1bd6:	15 90       	lpm	r1, Z+
    1bd8:	15 91       	lpm	r17, Z+
    1bda:	35 91       	lpm	r19, Z+
    1bdc:	65 91       	lpm	r22, Z+
    1bde:	95 91       	lpm	r25, Z+
    1be0:	05 90       	lpm	r0, Z+
    1be2:	7f e2       	ldi	r23, 0x2F	; 47
    1be4:	73 95       	inc	r23
    1be6:	e1 18       	sub	r14, r1
    1be8:	f1 0a       	sbc	r15, r17
    1bea:	43 0b       	sbc	r20, r19
    1bec:	56 0b       	sbc	r21, r22
    1bee:	c9 0b       	sbc	r28, r25
    1bf0:	d0 09       	sbc	r29, r0
    1bf2:	c0 f7       	brcc	.-16     	; 0x1be4 <__ftoa_engine+0x10a>
    1bf4:	e1 0c       	add	r14, r1
    1bf6:	f1 1e       	adc	r15, r17
    1bf8:	43 1f       	adc	r20, r19
    1bfa:	56 1f       	adc	r21, r22
    1bfc:	c9 1f       	adc	r28, r25
    1bfe:	d0 1d       	adc	r29, r0
    1c00:	7e f4       	brtc	.+30     	; 0x1c20 <__ftoa_engine+0x146>
    1c02:	70 33       	cpi	r23, 0x30	; 48
    1c04:	11 f4       	brne	.+4      	; 0x1c0a <__ftoa_engine+0x130>
    1c06:	8a 95       	dec	r24
    1c08:	e6 cf       	rjmp	.-52     	; 0x1bd6 <__ftoa_engine+0xfc>
    1c0a:	e8 94       	clt
    1c0c:	01 50       	subi	r16, 0x01	; 1
    1c0e:	30 f0       	brcs	.+12     	; 0x1c1c <__ftoa_engine+0x142>
    1c10:	08 0f       	add	r16, r24
    1c12:	0a f4       	brpl	.+2      	; 0x1c16 <__ftoa_engine+0x13c>
    1c14:	00 27       	eor	r16, r16
    1c16:	02 17       	cp	r16, r18
    1c18:	08 f4       	brcc	.+2      	; 0x1c1c <__ftoa_engine+0x142>
    1c1a:	20 2f       	mov	r18, r16
    1c1c:	23 95       	inc	r18
    1c1e:	02 2f       	mov	r16, r18
    1c20:	7a 33       	cpi	r23, 0x3A	; 58
    1c22:	28 f0       	brcs	.+10     	; 0x1c2e <__ftoa_engine+0x154>
    1c24:	79 e3       	ldi	r23, 0x39	; 57
    1c26:	7d 93       	st	X+, r23
    1c28:	2a 95       	dec	r18
    1c2a:	e9 f7       	brne	.-6      	; 0x1c26 <__ftoa_engine+0x14c>
    1c2c:	10 c0       	rjmp	.+32     	; 0x1c4e <__ftoa_engine+0x174>
    1c2e:	7d 93       	st	X+, r23
    1c30:	2a 95       	dec	r18
    1c32:	89 f6       	brne	.-94     	; 0x1bd6 <__ftoa_engine+0xfc>
    1c34:	06 94       	lsr	r0
    1c36:	97 95       	ror	r25
    1c38:	67 95       	ror	r22
    1c3a:	37 95       	ror	r19
    1c3c:	17 95       	ror	r17
    1c3e:	17 94       	ror	r1
    1c40:	e1 18       	sub	r14, r1
    1c42:	f1 0a       	sbc	r15, r17
    1c44:	43 0b       	sbc	r20, r19
    1c46:	56 0b       	sbc	r21, r22
    1c48:	c9 0b       	sbc	r28, r25
    1c4a:	d0 09       	sbc	r29, r0
    1c4c:	98 f0       	brcs	.+38     	; 0x1c74 <__ftoa_engine+0x19a>
    1c4e:	23 95       	inc	r18
    1c50:	7e 91       	ld	r23, -X
    1c52:	73 95       	inc	r23
    1c54:	7a 33       	cpi	r23, 0x3A	; 58
    1c56:	08 f0       	brcs	.+2      	; 0x1c5a <__ftoa_engine+0x180>
    1c58:	70 e3       	ldi	r23, 0x30	; 48
    1c5a:	7c 93       	st	X, r23
    1c5c:	20 13       	cpse	r18, r16
    1c5e:	b8 f7       	brcc	.-18     	; 0x1c4e <__ftoa_engine+0x174>
    1c60:	7e 91       	ld	r23, -X
    1c62:	70 61       	ori	r23, 0x10	; 16
    1c64:	7d 93       	st	X+, r23
    1c66:	30 f0       	brcs	.+12     	; 0x1c74 <__ftoa_engine+0x19a>
    1c68:	83 95       	inc	r24
    1c6a:	71 e3       	ldi	r23, 0x31	; 49
    1c6c:	7d 93       	st	X+, r23
    1c6e:	70 e3       	ldi	r23, 0x30	; 48
    1c70:	2a 95       	dec	r18
    1c72:	e1 f7       	brne	.-8      	; 0x1c6c <__ftoa_engine+0x192>
    1c74:	11 24       	eor	r1, r1
    1c76:	ef 90       	pop	r14
    1c78:	ff 90       	pop	r15
    1c7a:	0f 91       	pop	r16
    1c7c:	1f 91       	pop	r17
    1c7e:	cf 91       	pop	r28
    1c80:	df 91       	pop	r29
    1c82:	99 27       	eor	r25, r25
    1c84:	87 fd       	sbrc	r24, 7
    1c86:	90 95       	com	r25
    1c88:	08 95       	ret

00001c8a <strnlen_P>:
    1c8a:	fc 01       	movw	r30, r24
    1c8c:	05 90       	lpm	r0, Z+
    1c8e:	61 50       	subi	r22, 0x01	; 1
    1c90:	70 40       	sbci	r23, 0x00	; 0
    1c92:	01 10       	cpse	r0, r1
    1c94:	d8 f7       	brcc	.-10     	; 0x1c8c <strnlen_P+0x2>
    1c96:	80 95       	com	r24
    1c98:	90 95       	com	r25
    1c9a:	8e 0f       	add	r24, r30
    1c9c:	9f 1f       	adc	r25, r31
    1c9e:	08 95       	ret

00001ca0 <strnlen>:
    1ca0:	fc 01       	movw	r30, r24
    1ca2:	61 50       	subi	r22, 0x01	; 1
    1ca4:	70 40       	sbci	r23, 0x00	; 0
    1ca6:	01 90       	ld	r0, Z+
    1ca8:	01 10       	cpse	r0, r1
    1caa:	d8 f7       	brcc	.-10     	; 0x1ca2 <strnlen+0x2>
    1cac:	80 95       	com	r24
    1cae:	90 95       	com	r25
    1cb0:	8e 0f       	add	r24, r30
    1cb2:	9f 1f       	adc	r25, r31
    1cb4:	08 95       	ret

00001cb6 <fputc>:
    1cb6:	0f 93       	push	r16
    1cb8:	1f 93       	push	r17
    1cba:	cf 93       	push	r28
    1cbc:	df 93       	push	r29
    1cbe:	fb 01       	movw	r30, r22
    1cc0:	23 81       	ldd	r18, Z+3	; 0x03
    1cc2:	21 fd       	sbrc	r18, 1
    1cc4:	03 c0       	rjmp	.+6      	; 0x1ccc <fputc+0x16>
    1cc6:	8f ef       	ldi	r24, 0xFF	; 255
    1cc8:	9f ef       	ldi	r25, 0xFF	; 255
    1cca:	2c c0       	rjmp	.+88     	; 0x1d24 <fputc+0x6e>
    1ccc:	22 ff       	sbrs	r18, 2
    1cce:	16 c0       	rjmp	.+44     	; 0x1cfc <fputc+0x46>
    1cd0:	46 81       	ldd	r20, Z+6	; 0x06
    1cd2:	57 81       	ldd	r21, Z+7	; 0x07
    1cd4:	24 81       	ldd	r18, Z+4	; 0x04
    1cd6:	35 81       	ldd	r19, Z+5	; 0x05
    1cd8:	42 17       	cp	r20, r18
    1cda:	53 07       	cpc	r21, r19
    1cdc:	44 f4       	brge	.+16     	; 0x1cee <fputc+0x38>
    1cde:	a0 81       	ld	r26, Z
    1ce0:	b1 81       	ldd	r27, Z+1	; 0x01
    1ce2:	9d 01       	movw	r18, r26
    1ce4:	2f 5f       	subi	r18, 0xFF	; 255
    1ce6:	3f 4f       	sbci	r19, 0xFF	; 255
    1ce8:	31 83       	std	Z+1, r19	; 0x01
    1cea:	20 83       	st	Z, r18
    1cec:	8c 93       	st	X, r24
    1cee:	26 81       	ldd	r18, Z+6	; 0x06
    1cf0:	37 81       	ldd	r19, Z+7	; 0x07
    1cf2:	2f 5f       	subi	r18, 0xFF	; 255
    1cf4:	3f 4f       	sbci	r19, 0xFF	; 255
    1cf6:	37 83       	std	Z+7, r19	; 0x07
    1cf8:	26 83       	std	Z+6, r18	; 0x06
    1cfa:	14 c0       	rjmp	.+40     	; 0x1d24 <fputc+0x6e>
    1cfc:	8b 01       	movw	r16, r22
    1cfe:	ec 01       	movw	r28, r24
    1d00:	fb 01       	movw	r30, r22
    1d02:	00 84       	ldd	r0, Z+8	; 0x08
    1d04:	f1 85       	ldd	r31, Z+9	; 0x09
    1d06:	e0 2d       	mov	r30, r0
    1d08:	09 95       	icall
    1d0a:	89 2b       	or	r24, r25
    1d0c:	e1 f6       	brne	.-72     	; 0x1cc6 <fputc+0x10>
    1d0e:	d8 01       	movw	r26, r16
    1d10:	16 96       	adiw	r26, 0x06	; 6
    1d12:	8d 91       	ld	r24, X+
    1d14:	9c 91       	ld	r25, X
    1d16:	17 97       	sbiw	r26, 0x07	; 7
    1d18:	01 96       	adiw	r24, 0x01	; 1
    1d1a:	17 96       	adiw	r26, 0x07	; 7
    1d1c:	9c 93       	st	X, r25
    1d1e:	8e 93       	st	-X, r24
    1d20:	16 97       	sbiw	r26, 0x06	; 6
    1d22:	ce 01       	movw	r24, r28
    1d24:	df 91       	pop	r29
    1d26:	cf 91       	pop	r28
    1d28:	1f 91       	pop	r17
    1d2a:	0f 91       	pop	r16
    1d2c:	08 95       	ret

00001d2e <sprintf>:
    1d2e:	ae e0       	ldi	r26, 0x0E	; 14
    1d30:	b0 e0       	ldi	r27, 0x00	; 0
    1d32:	ed e9       	ldi	r30, 0x9D	; 157
    1d34:	fe e0       	ldi	r31, 0x0E	; 14
    1d36:	0c 94 44 0d 	jmp	0x1a88	; 0x1a88 <__prologue_saves__+0x1c>
    1d3a:	0d 89       	ldd	r16, Y+21	; 0x15
    1d3c:	1e 89       	ldd	r17, Y+22	; 0x16
    1d3e:	86 e0       	ldi	r24, 0x06	; 6
    1d40:	8c 83       	std	Y+4, r24	; 0x04
    1d42:	1a 83       	std	Y+2, r17	; 0x02
    1d44:	09 83       	std	Y+1, r16	; 0x01
    1d46:	8f ef       	ldi	r24, 0xFF	; 255
    1d48:	9f e7       	ldi	r25, 0x7F	; 127
    1d4a:	9e 83       	std	Y+6, r25	; 0x06
    1d4c:	8d 83       	std	Y+5, r24	; 0x05
    1d4e:	ae 01       	movw	r20, r28
    1d50:	47 5e       	subi	r20, 0xE7	; 231
    1d52:	5f 4f       	sbci	r21, 0xFF	; 255
    1d54:	6f 89       	ldd	r22, Y+23	; 0x17
    1d56:	78 8d       	ldd	r23, Y+24	; 0x18
    1d58:	ce 01       	movw	r24, r28
    1d5a:	01 96       	adiw	r24, 0x01	; 1
    1d5c:	0e 94 b3 09 	call	0x1366	; 0x1366 <vfprintf>
    1d60:	ef 81       	ldd	r30, Y+7	; 0x07
    1d62:	f8 85       	ldd	r31, Y+8	; 0x08
    1d64:	e0 0f       	add	r30, r16
    1d66:	f1 1f       	adc	r31, r17
    1d68:	10 82       	st	Z, r1
    1d6a:	2e 96       	adiw	r28, 0x0e	; 14
    1d6c:	e4 e0       	ldi	r30, 0x04	; 4
    1d6e:	0c 94 60 0d 	jmp	0x1ac0	; 0x1ac0 <__epilogue_restores__+0x1c>

00001d72 <__ultoa_invert>:
    1d72:	fa 01       	movw	r30, r20
    1d74:	aa 27       	eor	r26, r26
    1d76:	28 30       	cpi	r18, 0x08	; 8
    1d78:	51 f1       	breq	.+84     	; 0x1dce <__ultoa_invert+0x5c>
    1d7a:	20 31       	cpi	r18, 0x10	; 16
    1d7c:	81 f1       	breq	.+96     	; 0x1dde <__ultoa_invert+0x6c>
    1d7e:	e8 94       	clt
    1d80:	6f 93       	push	r22
    1d82:	6e 7f       	andi	r22, 0xFE	; 254
    1d84:	6e 5f       	subi	r22, 0xFE	; 254
    1d86:	7f 4f       	sbci	r23, 0xFF	; 255
    1d88:	8f 4f       	sbci	r24, 0xFF	; 255
    1d8a:	9f 4f       	sbci	r25, 0xFF	; 255
    1d8c:	af 4f       	sbci	r26, 0xFF	; 255
    1d8e:	b1 e0       	ldi	r27, 0x01	; 1
    1d90:	3e d0       	rcall	.+124    	; 0x1e0e <__ultoa_invert+0x9c>
    1d92:	b4 e0       	ldi	r27, 0x04	; 4
    1d94:	3c d0       	rcall	.+120    	; 0x1e0e <__ultoa_invert+0x9c>
    1d96:	67 0f       	add	r22, r23
    1d98:	78 1f       	adc	r23, r24
    1d9a:	89 1f       	adc	r24, r25
    1d9c:	9a 1f       	adc	r25, r26
    1d9e:	a1 1d       	adc	r26, r1
    1da0:	68 0f       	add	r22, r24
    1da2:	79 1f       	adc	r23, r25
    1da4:	8a 1f       	adc	r24, r26
    1da6:	91 1d       	adc	r25, r1
    1da8:	a1 1d       	adc	r26, r1
    1daa:	6a 0f       	add	r22, r26
    1dac:	71 1d       	adc	r23, r1
    1dae:	81 1d       	adc	r24, r1
    1db0:	91 1d       	adc	r25, r1
    1db2:	a1 1d       	adc	r26, r1
    1db4:	20 d0       	rcall	.+64     	; 0x1df6 <__ultoa_invert+0x84>
    1db6:	09 f4       	brne	.+2      	; 0x1dba <__ultoa_invert+0x48>
    1db8:	68 94       	set
    1dba:	3f 91       	pop	r19
    1dbc:	2a e0       	ldi	r18, 0x0A	; 10
    1dbe:	26 9f       	mul	r18, r22
    1dc0:	11 24       	eor	r1, r1
    1dc2:	30 19       	sub	r19, r0
    1dc4:	30 5d       	subi	r19, 0xD0	; 208
    1dc6:	31 93       	st	Z+, r19
    1dc8:	de f6       	brtc	.-74     	; 0x1d80 <__ultoa_invert+0xe>
    1dca:	cf 01       	movw	r24, r30
    1dcc:	08 95       	ret
    1dce:	46 2f       	mov	r20, r22
    1dd0:	47 70       	andi	r20, 0x07	; 7
    1dd2:	40 5d       	subi	r20, 0xD0	; 208
    1dd4:	41 93       	st	Z+, r20
    1dd6:	b3 e0       	ldi	r27, 0x03	; 3
    1dd8:	0f d0       	rcall	.+30     	; 0x1df8 <__ultoa_invert+0x86>
    1dda:	c9 f7       	brne	.-14     	; 0x1dce <__ultoa_invert+0x5c>
    1ddc:	f6 cf       	rjmp	.-20     	; 0x1dca <__ultoa_invert+0x58>
    1dde:	46 2f       	mov	r20, r22
    1de0:	4f 70       	andi	r20, 0x0F	; 15
    1de2:	40 5d       	subi	r20, 0xD0	; 208
    1de4:	4a 33       	cpi	r20, 0x3A	; 58
    1de6:	18 f0       	brcs	.+6      	; 0x1dee <__ultoa_invert+0x7c>
    1de8:	49 5d       	subi	r20, 0xD9	; 217
    1dea:	31 fd       	sbrc	r19, 1
    1dec:	40 52       	subi	r20, 0x20	; 32
    1dee:	41 93       	st	Z+, r20
    1df0:	02 d0       	rcall	.+4      	; 0x1df6 <__ultoa_invert+0x84>
    1df2:	a9 f7       	brne	.-22     	; 0x1dde <__ultoa_invert+0x6c>
    1df4:	ea cf       	rjmp	.-44     	; 0x1dca <__ultoa_invert+0x58>
    1df6:	b4 e0       	ldi	r27, 0x04	; 4
    1df8:	a6 95       	lsr	r26
    1dfa:	97 95       	ror	r25
    1dfc:	87 95       	ror	r24
    1dfe:	77 95       	ror	r23
    1e00:	67 95       	ror	r22
    1e02:	ba 95       	dec	r27
    1e04:	c9 f7       	brne	.-14     	; 0x1df8 <__ultoa_invert+0x86>
    1e06:	00 97       	sbiw	r24, 0x00	; 0
    1e08:	61 05       	cpc	r22, r1
    1e0a:	71 05       	cpc	r23, r1
    1e0c:	08 95       	ret
    1e0e:	9b 01       	movw	r18, r22
    1e10:	ac 01       	movw	r20, r24
    1e12:	0a 2e       	mov	r0, r26
    1e14:	06 94       	lsr	r0
    1e16:	57 95       	ror	r21
    1e18:	47 95       	ror	r20
    1e1a:	37 95       	ror	r19
    1e1c:	27 95       	ror	r18
    1e1e:	ba 95       	dec	r27
    1e20:	c9 f7       	brne	.-14     	; 0x1e14 <__ultoa_invert+0xa2>
    1e22:	62 0f       	add	r22, r18
    1e24:	73 1f       	adc	r23, r19
    1e26:	84 1f       	adc	r24, r20
    1e28:	95 1f       	adc	r25, r21
    1e2a:	a0 1d       	adc	r26, r0
    1e2c:	08 95       	ret

00001e2e <_exit>:
    1e2e:	f8 94       	cli

00001e30 <__stop_program>:
    1e30:	ff cf       	rjmp	.-2      	; 0x1e30 <__stop_program>
