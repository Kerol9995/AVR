
MG12232.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001b6  00800100  00001bc2  00001c56  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001bc2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000a4  008002b6  008002b6  00001e0c  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001e0c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001e68  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000178  00000000  00000000  00001ea8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000226e  00000000  00000000  00002020  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c86  00000000  00000000  0000428e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000011c4  00000000  00000000  00004f14  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000420  00000000  00000000  000060d8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006a2  00000000  00000000  000064f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000020cd  00000000  00000000  00006b9a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000130  00000000  00000000  00008c67  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 10 01 	jmp	0x220	; 0x220 <__ctors_end>
       4:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
       8:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
       c:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
      10:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
      14:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
      18:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
      1c:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
      20:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
      24:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
      28:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
      2c:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
      30:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
      34:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
      38:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
      3c:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
      40:	0c 94 e3 03 	jmp	0x7c6	; 0x7c6 <__vector_16>
      44:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
      48:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
      4c:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
      50:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
      54:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__vector_21>
      58:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
      5c:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
      60:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
      64:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
      68:	e2 06       	cpc	r14, r18
      6a:	f0 06       	cpc	r15, r16
      6c:	f0 06       	cpc	r15, r16
      6e:	f0 06       	cpc	r15, r16
      70:	f0 06       	cpc	r15, r16
      72:	f0 06       	cpc	r15, r16
      74:	f0 06       	cpc	r15, r16
      76:	f0 06       	cpc	r15, r16
      78:	f0 06       	cpc	r15, r16
      7a:	f0 06       	cpc	r15, r16
      7c:	f0 06       	cpc	r15, r16
      7e:	ec 06       	cpc	r14, r28
      80:	f0 06       	cpc	r15, r16
      82:	e7 06       	cpc	r14, r23
      84:	dd 06       	cpc	r13, r29
      86:	f0 06       	cpc	r15, r16
      88:	a2 05       	cpc	r26, r2
      8a:	a7 05       	cpc	r26, r7
      8c:	ac 05       	cpc	r26, r12
      8e:	b1 05       	cpc	r27, r1
      90:	b6 05       	cpc	r27, r6
      92:	bb 05       	cpc	r27, r11
      94:	c0 05       	cpc	r28, r0
      96:	c5 05       	cpc	r28, r5
      98:	ca 05       	cpc	r28, r10
      9a:	cf 05       	cpc	r28, r15
      9c:	f0 06       	cpc	r15, r16
      9e:	f0 06       	cpc	r15, r16
      a0:	f0 06       	cpc	r15, r16
      a2:	d4 05       	cpc	r29, r4
      a4:	f0 06       	cpc	r15, r16
      a6:	f0 06       	cpc	r15, r16
      a8:	f0 06       	cpc	r15, r16
      aa:	d9 05       	cpc	r29, r9
      ac:	de 05       	cpc	r29, r14
      ae:	e3 05       	cpc	r30, r3
      b0:	e8 05       	cpc	r30, r8
      b2:	ed 05       	cpc	r30, r13
      b4:	f2 05       	cpc	r31, r2
      b6:	f7 05       	cpc	r31, r7
      b8:	fc 05       	cpc	r31, r12
      ba:	01 06       	cpc	r0, r17
      bc:	06 06       	cpc	r0, r22
      be:	0b 06       	cpc	r0, r27
      c0:	10 06       	cpc	r1, r16
      c2:	15 06       	cpc	r1, r21
      c4:	1a 06       	cpc	r1, r26
      c6:	1f 06       	cpc	r1, r31
      c8:	24 06       	cpc	r2, r20
      ca:	29 06       	cpc	r2, r25
      cc:	2e 06       	cpc	r2, r30
      ce:	33 06       	cpc	r3, r19
      d0:	38 06       	cpc	r3, r24
      d2:	3d 06       	cpc	r3, r29
      d4:	42 06       	cpc	r4, r18
      d6:	47 06       	cpc	r4, r23
      d8:	4c 06       	cpc	r4, r28
      da:	51 06       	cpc	r5, r17
      dc:	56 06       	cpc	r5, r22
      de:	f0 06       	cpc	r15, r16
      e0:	f0 06       	cpc	r15, r16
      e2:	f0 06       	cpc	r15, r16
      e4:	f0 06       	cpc	r15, r16
      e6:	f0 06       	cpc	r15, r16
      e8:	f0 06       	cpc	r15, r16
      ea:	5b 06       	cpc	r5, r27
      ec:	60 06       	cpc	r6, r16
      ee:	65 06       	cpc	r6, r21
      f0:	6a 06       	cpc	r6, r26
      f2:	6f 06       	cpc	r6, r31
      f4:	74 06       	cpc	r7, r20
      f6:	79 06       	cpc	r7, r25
      f8:	7e 06       	cpc	r7, r30
      fa:	83 06       	cpc	r8, r19
      fc:	88 06       	cpc	r8, r24
      fe:	8d 06       	cpc	r8, r29
     100:	92 06       	cpc	r9, r18
     102:	97 06       	cpc	r9, r23
     104:	9c 06       	cpc	r9, r28
     106:	a1 06       	cpc	r10, r17
     108:	a6 06       	cpc	r10, r22
     10a:	ab 06       	cpc	r10, r27
     10c:	b0 06       	cpc	r11, r16
     10e:	b5 06       	cpc	r11, r21
     110:	ba 06       	cpc	r11, r26
     112:	bf 06       	cpc	r11, r31
     114:	c4 06       	cpc	r12, r20
     116:	c9 06       	cpc	r12, r25
     118:	ce 06       	cpc	r12, r30
     11a:	d3 06       	cpc	r13, r19
     11c:	d8 06       	cpc	r13, r24

0000011e <__trampolines_end>:
     11e:	6e 61       	ori	r22, 0x1E	; 30
     120:	6e 00       	.word	0x006e	; ????

00000122 <__c.2332>:
     122:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     132:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     142:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     152:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     162:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     172:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     182:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     192:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     1a2:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     1b2:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     1c2:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     1d2:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     1e2:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     1f2:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     202:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     212:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

00000220 <__ctors_end>:
     220:	11 24       	eor	r1, r1
     222:	1f be       	out	0x3f, r1	; 63
     224:	cf ef       	ldi	r28, 0xFF	; 255
     226:	d8 e0       	ldi	r29, 0x08	; 8
     228:	de bf       	out	0x3e, r29	; 62
     22a:	cd bf       	out	0x3d, r28	; 61

0000022c <__do_copy_data>:
     22c:	12 e0       	ldi	r17, 0x02	; 2
     22e:	a0 e0       	ldi	r26, 0x00	; 0
     230:	b1 e0       	ldi	r27, 0x01	; 1
     232:	e2 ec       	ldi	r30, 0xC2	; 194
     234:	fb e1       	ldi	r31, 0x1B	; 27
     236:	02 c0       	rjmp	.+4      	; 0x23c <__do_copy_data+0x10>
     238:	05 90       	lpm	r0, Z+
     23a:	0d 92       	st	X+, r0
     23c:	a6 3b       	cpi	r26, 0xB6	; 182
     23e:	b1 07       	cpc	r27, r17
     240:	d9 f7       	brne	.-10     	; 0x238 <__do_copy_data+0xc>

00000242 <__do_clear_bss>:
     242:	23 e0       	ldi	r18, 0x03	; 3
     244:	a6 eb       	ldi	r26, 0xB6	; 182
     246:	b2 e0       	ldi	r27, 0x02	; 2
     248:	01 c0       	rjmp	.+2      	; 0x24c <.do_clear_bss_start>

0000024a <.do_clear_bss_loop>:
     24a:	1d 92       	st	X+, r1

0000024c <.do_clear_bss_start>:
     24c:	aa 35       	cpi	r26, 0x5A	; 90
     24e:	b2 07       	cpc	r27, r18
     250:	e1 f7       	brne	.-8      	; 0x24a <.do_clear_bss_loop>
     252:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <main>
     256:	0c 94 df 0d 	jmp	0x1bbe	; 0x1bbe <_exit>

0000025a <__bad_interrupt>:
     25a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000025e <__vector_21>:
extern unsigned int adc_value;
//----------------------------------------
char high_adc=0,low_adc=0;
//----------------------------------------
ISR(ADC_vect)
{
     25e:	1f 92       	push	r1
     260:	0f 92       	push	r0
     262:	0f b6       	in	r0, 0x3f	; 63
     264:	0f 92       	push	r0
     266:	11 24       	eor	r1, r1
     268:	2f 93       	push	r18
     26a:	8f 93       	push	r24
     26c:	9f 93       	push	r25
	low_adc = ADCL;
     26e:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
     272:	20 93 b6 02 	sts	0x02B6, r18	; 0x8002b6 <__data_end>
	high_adc = ADCH;//Верхняя часть регистра ADC должна быть считана последней, иначе не продолжится преобразование
     276:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
     27a:	80 93 b7 02 	sts	0x02B7, r24	; 0x8002b7 <high_adc>
	adc_value = high_adc*256+low_adc;
     27e:	90 e0       	ldi	r25, 0x00	; 0
     280:	98 2f       	mov	r25, r24
     282:	88 27       	eor	r24, r24
     284:	82 0f       	add	r24, r18
     286:	91 1d       	adc	r25, r1
     288:	90 93 fd 02 	sts	0x02FD, r25	; 0x8002fd <adc_value+0x1>
     28c:	80 93 fc 02 	sts	0x02FC, r24	; 0x8002fc <adc_value>
}
     290:	9f 91       	pop	r25
     292:	8f 91       	pop	r24
     294:	2f 91       	pop	r18
     296:	0f 90       	pop	r0
     298:	0f be       	out	0x3f, r0	; 63
     29a:	0f 90       	pop	r0
     29c:	1f 90       	pop	r1
     29e:	18 95       	reti

000002a0 <ADC_Init>:
void ADC_Init(void)
{	
	ADCSRA |= (1<<ADEN) // Разрешение использования АЦП
     2a0:	ea e7       	ldi	r30, 0x7A	; 122
     2a2:	f0 e0       	ldi	r31, 0x00	; 0
     2a4:	80 81       	ld	r24, Z
     2a6:	8f 6e       	ori	r24, 0xEF	; 239
     2a8:	80 83       	st	Z, r24
	|(1<<ADSC)//Запуск преобразования
	|(1<<ADATE)//Непрерывный режим работы АЦП
	|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0)//Делитель 128 = 125 кГц
	|(1<<ADIE);//Разрешение прерывания от АЦП
	ADMUX |= (1<<REFS0)|(1<<MUX1)|(1<<MUX0); // ИОН=AVcc, вход ADC0 |(1<<MUX1)|(1<<MUX0)
     2aa:	ec e7       	ldi	r30, 0x7C	; 124
     2ac:	f0 e0       	ldi	r31, 0x00	; 0
     2ae:	80 81       	ld	r24, Z
     2b0:	83 64       	ori	r24, 0x43	; 67
     2b2:	80 83       	st	Z, r24
     2b4:	08 95       	ret

000002b6 <timer0_init>:
#include "timer0.h"

void timer0_init(){
	TCCR0A = 0b00000000;//COM0A1 COM0A0 COM0B1 COM0B0 – – WGM01 WGM00
     2b6:	14 bc       	out	0x24, r1	; 36
	TCCR0B = 0b00000101;//FOC0A FOC0B – – WGM02 CS02 CS01 CS00
     2b8:	85 e0       	ldi	r24, 0x05	; 5
     2ba:	85 bd       	out	0x25, r24	; 37
	TIMSK0 = 0b00000001;//– – – – – OCIE0B OCIE0A TOIE0
     2bc:	81 e0       	ldi	r24, 0x01	; 1
     2be:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
     2c2:	08 95       	ret

000002c4 <read_dht11_dat>:

	char dht11_dat[5];
	char dht11_in;

char read_dht11_dat()
{
     2c4:	27 e0       	ldi	r18, 0x07	; 7
     2c6:	30 e0       	ldi	r19, 0x00	; 0
	char i = 0;
	char result=0;
     2c8:	80 e0       	ldi	r24, 0x00	; 0
		while(!(PINC & (1<<(DHT11_PIN))))
		{}; // wait forever until analog input port 0 is '1' (NOTICE: PINC reads all the analog input ports
		//and _BV(X) is the macro operation which pull up position 'X' to '1' and the rest positions to '0'. it is equivalent to 1<
		_delay_us(30);
		if(PINC & (1<<(DHT11_PIN))) //if analog input port 0 is still '1' after 30 us
		result |=(1<<(7-i)); //this position is 1
     2ca:	61 e0       	ldi	r22, 0x01	; 1
     2cc:	70 e0       	ldi	r23, 0x00	; 0
{
	char i = 0;
	char result=0;
	for(i=0; i< 8; i++)
	{
		while(!(PINC & (1<<(DHT11_PIN))))
     2ce:	30 9b       	sbis	0x06, 0	; 6
     2d0:	fe cf       	rjmp	.-4      	; 0x2ce <read_dht11_dat+0xa>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     2d2:	90 ea       	ldi	r25, 0xA0	; 160
     2d4:	9a 95       	dec	r25
     2d6:	f1 f7       	brne	.-4      	; 0x2d4 <read_dht11_dat+0x10>
		{}; // wait forever until analog input port 0 is '1' (NOTICE: PINC reads all the analog input ports
		//and _BV(X) is the macro operation which pull up position 'X' to '1' and the rest positions to '0'. it is equivalent to 1<
		_delay_us(30);
		if(PINC & (1<<(DHT11_PIN))) //if analog input port 0 is still '1' after 30 us
     2d8:	30 9b       	sbis	0x06, 0	; 6
     2da:	08 c0       	rjmp	.+16     	; 0x2ec <read_dht11_dat+0x28>
		result |=(1<<(7-i)); //this position is 1
     2dc:	ab 01       	movw	r20, r22
     2de:	02 2e       	mov	r0, r18
     2e0:	02 c0       	rjmp	.+4      	; 0x2e6 <read_dht11_dat+0x22>
     2e2:	44 0f       	add	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	0a 94       	dec	r0
     2e8:	e2 f7       	brpl	.-8      	; 0x2e2 <read_dht11_dat+0x1e>
     2ea:	84 2b       	or	r24, r20
		while((PINC & (1<<(DHT11_PIN)))); // wait '1' finish
     2ec:	30 99       	sbic	0x06, 0	; 6
     2ee:	fe cf       	rjmp	.-4      	; 0x2ec <read_dht11_dat+0x28>
     2f0:	21 50       	subi	r18, 0x01	; 1
     2f2:	31 09       	sbc	r19, r1
     2f4:	60 f7       	brcc	.-40     	; 0x2ce <read_dht11_dat+0xa>
	}
	return result;
}
     2f6:	08 95       	ret

000002f8 <dht11_start>:

void dht11_start()
{
     2f8:	0f 93       	push	r16
     2fa:	1f 93       	push	r17
     2fc:	cf 93       	push	r28
     2fe:	df 93       	push	r29
	dht11_dat[0]=0;
     300:	ee ef       	ldi	r30, 0xFE	; 254
     302:	f2 e0       	ldi	r31, 0x02	; 2
     304:	10 82       	st	Z, r1
	dht11_dat[2]=0;
     306:	12 82       	std	Z+2, r1	; 0x02
	DDRC |= (1<<(DHT11_PIN));// start condition
     308:	38 9a       	sbi	0x07, 0	; 7
	PORTC &= ~(1<<(DHT11_PIN)); // 1. pull-down i/o pin for 18ms
     30a:	40 98       	cbi	0x08, 0	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     30c:	2f ef       	ldi	r18, 0xFF	; 255
     30e:	89 ef       	ldi	r24, 0xF9	; 249
     310:	90 e0       	ldi	r25, 0x00	; 0
     312:	21 50       	subi	r18, 0x01	; 1
     314:	80 40       	sbci	r24, 0x00	; 0
     316:	90 40       	sbci	r25, 0x00	; 0
     318:	e1 f7       	brne	.-8      	; 0x312 <dht11_start+0x1a>
     31a:	00 c0       	rjmp	.+0      	; 0x31c <dht11_start+0x24>
     31c:	00 00       	nop
	_delay_ms(20);
	PORTC |= (1<<(DHT11_PIN)); // 2. pull-up i/o pin for 40ms
     31e:	40 9a       	sbi	0x08, 0	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     320:	20 ea       	ldi	r18, 0xA0	; 160
     322:	2a 95       	dec	r18
     324:	f1 f7       	brne	.-4      	; 0x322 <dht11_start+0x2a>
	_delay_us(30);
	DDRC &= ~(1<<(DHT11_PIN)); //let analog port 0 be input port
     326:	38 98       	cbi	0x07, 0	; 7
     328:	85 e0       	ldi	r24, 0x05	; 5
     32a:	8a 95       	dec	r24
     32c:	f1 f7       	brne	.-4      	; 0x32a <dht11_start+0x32>
     32e:	00 00       	nop
	_delay_us(1);

	dht11_in = PINC & (1<<(DHT11_PIN)); // read only the input port 0
     330:	86 b1       	in	r24, 0x06	; 6
     332:	81 70       	andi	r24, 0x01	; 1
     334:	80 93 03 03 	sts	0x0303, r24	; 0x800303 <dht11_in>
	if (dht11_in)
     338:	81 11       	cpse	r24, r1
     33a:	1d c0       	rjmp	.+58     	; 0x376 <dht11_start+0x7e>
     33c:	8f e3       	ldi	r24, 0x3F	; 63
     33e:	91 e0       	ldi	r25, 0x01	; 1
     340:	01 97       	sbiw	r24, 0x01	; 1
     342:	f1 f7       	brne	.-4      	; 0x340 <dht11_start+0x48>
     344:	00 c0       	rjmp	.+0      	; 0x346 <dht11_start+0x4e>
     346:	00 00       	nop
		/*		Serial.println("dht11 start condition 1 not met"); //wait for DHT11 response signal:LOW*/
	}
	else
	{
		_delay_us(80);
		dht11_in = PINC & (1<<(DHT11_PIN)); //
     348:	86 b1       	in	r24, 0x06	; 6
     34a:	81 70       	andi	r24, 0x01	; 1
     34c:	80 93 03 03 	sts	0x0303, r24	; 0x800303 <dht11_in>
		if(!dht11_in)
     350:	88 23       	and	r24, r24
     352:	89 f0       	breq	.+34     	; 0x376 <dht11_start+0x7e>
     354:	8f e3       	ldi	r24, 0x3F	; 63
     356:	91 e0       	ldi	r25, 0x01	; 1
     358:	01 97       	sbiw	r24, 0x01	; 1
     35a:	f1 f7       	brne	.-4      	; 0x358 <dht11_start+0x60>
     35c:	00 c0       	rjmp	.+0      	; 0x35e <dht11_start+0x66>
     35e:	00 00       	nop
     360:	ef 01       	movw	r28, r30
     362:	03 e0       	ldi	r16, 0x03	; 3
     364:	13 e0       	ldi	r17, 0x03	; 3
		}
		else
		{
			_delay_us(80);// now ready for data reception
			for (int i=0; i<5; i++)
			{ dht11_dat[i] = read_dht11_dat();} //received 40 bits data. Details are described in datasheet
     366:	0e 94 62 01 	call	0x2c4	; 0x2c4 <read_dht11_dat>
     36a:	89 93       	st	Y+, r24
			/*		Serial.println("dht11 start condition 2 not met"); //wait for second response signal:HIGH*/
		}
		else
		{
			_delay_us(80);// now ready for data reception
			for (int i=0; i<5; i++)
     36c:	c0 17       	cp	r28, r16
     36e:	d1 07       	cpc	r29, r17
     370:	d1 f7       	brne	.-12     	; 0x366 <dht11_start+0x6e>
			{ dht11_dat[i] = read_dht11_dat();} //received 40 bits data. Details are described in datasheet

			DDRC |= (1<<(DHT11_PIN)); //let analog port 0 be output port after all the data have been received
     372:	38 9a       	sbi	0x07, 0	; 7
			PORTC |= (1<<(DHT11_PIN)); //let the value of this port be '1' after all the data have been received
     374:	40 9a       	sbi	0x08, 0	; 8
// 				number_write(H);
// 				number_write(h);
// 			}
		}
	}
}
     376:	df 91       	pop	r29
     378:	cf 91       	pop	r28
     37a:	1f 91       	pop	r17
     37c:	0f 91       	pop	r16
     37e:	08 95       	ret

00000380 <dht11_temp>:

char dht11_temp(){
// 	dht11_start();
	return dht11_dat[2];
}
     380:	80 91 00 03 	lds	r24, 0x0300	; 0x800300 <dht11_dat+0x2>
     384:	08 95       	ret

00000386 <dht11_humid>:

char dht11_humid(){
// 	dht11_start();
	return dht11_dat[0];
     386:	80 91 fe 02 	lds	r24, 0x02FE	; 0x8002fe <dht11_dat>
     38a:	08 95       	ret

0000038c <ds18b20_Reset>:
//РїСЂРµРѕР±СЂР°Р·РѕРІР°РЅРёРµ С‚РµРјРїРµСЂР°С‚СѓСЂС‹ РІ РµРґРёРЅРёС†С‹
char converttemp (unsigned int tt)
{
	char t = tt>>4;//СЃРґРІРёРі Рё РѕС‚СЃРµС‡РµРЅРёРµ С‡Р°СЃС‚Рё СЃС‚Р°СЂС€РµРіРѕ Р±Р°Р№С‚Р°
	return t;
}
     38c:	f8 94       	cli
     38e:	39 9a       	sbi	0x07, 1	; 7
     390:	83 e9       	ldi	r24, 0x93	; 147
     392:	97 e0       	ldi	r25, 0x07	; 7
     394:	01 97       	sbiw	r24, 0x01	; 1
     396:	f1 f7       	brne	.-4      	; 0x394 <ds18b20_Reset+0x8>
     398:	00 c0       	rjmp	.+0      	; 0x39a <ds18b20_Reset+0xe>
     39a:	00 00       	nop
     39c:	39 98       	cbi	0x07, 1	; 7
     39e:	ef e8       	ldi	r30, 0x8F	; 143
     3a0:	f1 e0       	ldi	r31, 0x01	; 1
     3a2:	31 97       	sbiw	r30, 0x01	; 1
     3a4:	f1 f7       	brne	.-4      	; 0x3a2 <ds18b20_Reset+0x16>
     3a6:	00 c0       	rjmp	.+0      	; 0x3a8 <ds18b20_Reset+0x1c>
     3a8:	00 00       	nop
     3aa:	86 b1       	in	r24, 0x06	; 6
     3ac:	e3 e0       	ldi	r30, 0x03	; 3
     3ae:	f6 e0       	ldi	r31, 0x06	; 6
     3b0:	31 97       	sbiw	r30, 0x01	; 1
     3b2:	f1 f7       	brne	.-4      	; 0x3b0 <ds18b20_Reset+0x24>
     3b4:	00 c0       	rjmp	.+0      	; 0x3b6 <ds18b20_Reset+0x2a>
     3b6:	00 00       	nop
     3b8:	86 95       	lsr	r24
     3ba:	81 70       	andi	r24, 0x01	; 1
     3bc:	91 e0       	ldi	r25, 0x01	; 1
     3be:	89 27       	eor	r24, r25
     3c0:	08 95       	ret

000003c2 <ds18b20_WriteBit>:
     3c2:	f8 94       	cli
     3c4:	39 9a       	sbi	0x07, 1	; 7
     3c6:	9a e0       	ldi	r25, 0x0A	; 10
     3c8:	9a 95       	dec	r25
     3ca:	f1 f7       	brne	.-4      	; 0x3c8 <ds18b20_WriteBit+0x6>
     3cc:	00 c0       	rjmp	.+0      	; 0x3ce <ds18b20_WriteBit+0xc>
     3ce:	81 11       	cpse	r24, r1
     3d0:	39 98       	cbi	0x07, 1	; 7
     3d2:	87 ef       	ldi	r24, 0xF7	; 247
     3d4:	90 e0       	ldi	r25, 0x00	; 0
     3d6:	01 97       	sbiw	r24, 0x01	; 1
     3d8:	f1 f7       	brne	.-4      	; 0x3d6 <ds18b20_WriteBit+0x14>
     3da:	00 c0       	rjmp	.+0      	; 0x3dc <ds18b20_WriteBit+0x1a>
     3dc:	00 00       	nop
     3de:	39 98       	cbi	0x07, 1	; 7
     3e0:	08 95       	ret

000003e2 <ds18b20_WriteByte>:
     3e2:	ef 92       	push	r14
     3e4:	ff 92       	push	r15
     3e6:	0f 93       	push	r16
     3e8:	1f 93       	push	r17
     3ea:	cf 93       	push	r28
     3ec:	df 93       	push	r29
     3ee:	c0 e0       	ldi	r28, 0x00	; 0
     3f0:	d0 e0       	ldi	r29, 0x00	; 0
     3f2:	ee 24       	eor	r14, r14
     3f4:	e3 94       	inc	r14
     3f6:	f1 2c       	mov	r15, r1
     3f8:	08 2f       	mov	r16, r24
     3fa:	10 e0       	ldi	r17, 0x00	; 0
     3fc:	97 01       	movw	r18, r14
     3fe:	0c 2e       	mov	r0, r28
     400:	02 c0       	rjmp	.+4      	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
     402:	22 0f       	add	r18, r18
     404:	33 1f       	adc	r19, r19
     406:	0a 94       	dec	r0
     408:	e2 f7       	brpl	.-8      	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
     40a:	a8 01       	movw	r20, r16
     40c:	42 23       	and	r20, r18
     40e:	53 23       	and	r21, r19
     410:	24 17       	cp	r18, r20
     412:	35 07       	cpc	r19, r21
     414:	21 f4       	brne	.+8      	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
     416:	81 e0       	ldi	r24, 0x01	; 1
     418:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <ds18b20_WriteBit>
     41c:	03 c0       	rjmp	.+6      	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
     41e:	80 e0       	ldi	r24, 0x00	; 0
     420:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <ds18b20_WriteBit>
     424:	21 96       	adiw	r28, 0x01	; 1
     426:	c8 30       	cpi	r28, 0x08	; 8
     428:	d1 05       	cpc	r29, r1
     42a:	41 f7       	brne	.-48     	; 0x3fc <ds18b20_WriteByte+0x1a>
     42c:	df 91       	pop	r29
     42e:	cf 91       	pop	r28
     430:	1f 91       	pop	r17
     432:	0f 91       	pop	r16
     434:	ff 90       	pop	r15
     436:	ef 90       	pop	r14
     438:	08 95       	ret

0000043a <ds18b20_ReadBit>:
     43a:	f8 94       	cli
     43c:	39 9a       	sbi	0x07, 1	; 7
     43e:	8a e0       	ldi	r24, 0x0A	; 10
     440:	8a 95       	dec	r24
     442:	f1 f7       	brne	.-4      	; 0x440 <ds18b20_ReadBit+0x6>
     444:	00 c0       	rjmp	.+0      	; 0x446 <ds18b20_ReadBit+0xc>
     446:	39 98       	cbi	0x07, 1	; 7
     448:	e5 e3       	ldi	r30, 0x35	; 53
     44a:	ea 95       	dec	r30
     44c:	f1 f7       	brne	.-4      	; 0x44a <ds18b20_ReadBit+0x10>
     44e:	00 00       	nop
     450:	86 b1       	in	r24, 0x06	; 6
     452:	ef ec       	ldi	r30, 0xCF	; 207
     454:	f0 e0       	ldi	r31, 0x00	; 0
     456:	31 97       	sbiw	r30, 0x01	; 1
     458:	f1 f7       	brne	.-4      	; 0x456 <ds18b20_ReadBit+0x1c>
     45a:	00 c0       	rjmp	.+0      	; 0x45c <ds18b20_ReadBit+0x22>
     45c:	00 00       	nop
     45e:	86 95       	lsr	r24
     460:	81 70       	andi	r24, 0x01	; 1
     462:	08 95       	ret

00000464 <ds18b20_ReadByte>:
     464:	1f 93       	push	r17
     466:	cf 93       	push	r28
     468:	df 93       	push	r29
     46a:	c0 e0       	ldi	r28, 0x00	; 0
     46c:	d0 e0       	ldi	r29, 0x00	; 0
     46e:	10 e0       	ldi	r17, 0x00	; 0
     470:	0e 94 1d 02 	call	0x43a	; 0x43a <ds18b20_ReadBit>
     474:	90 e0       	ldi	r25, 0x00	; 0
     476:	0c 2e       	mov	r0, r28
     478:	02 c0       	rjmp	.+4      	; 0x47e <ds18b20_ReadByte+0x1a>
     47a:	88 0f       	add	r24, r24
     47c:	99 1f       	adc	r25, r25
     47e:	0a 94       	dec	r0
     480:	e2 f7       	brpl	.-8      	; 0x47a <ds18b20_ReadByte+0x16>
     482:	18 2b       	or	r17, r24
     484:	21 96       	adiw	r28, 0x01	; 1
     486:	c8 30       	cpi	r28, 0x08	; 8
     488:	d1 05       	cpc	r29, r1
     48a:	91 f7       	brne	.-28     	; 0x470 <ds18b20_ReadByte+0xc>
     48c:	81 2f       	mov	r24, r17
     48e:	df 91       	pop	r29
     490:	cf 91       	pop	r28
     492:	1f 91       	pop	r17
     494:	08 95       	ret

00000496 <ds18b20_SearhRom>:
uint8_t ds18b20_SearhRom(uint8_t *Addr)
{
     496:	bf 92       	push	r11
     498:	cf 92       	push	r12
     49a:	df 92       	push	r13
     49c:	ef 92       	push	r14
     49e:	ff 92       	push	r15
     4a0:	0f 93       	push	r16
     4a2:	1f 93       	push	r17
     4a4:	cf 93       	push	r28
     4a6:	df 93       	push	r29
     4a8:	b8 2e       	mov	r11, r24
     4aa:	c9 2e       	mov	r12, r25
	id_bit_number = 1;
	last_zero = 0;
	rom_byte_number = 0;
	rom_byte_mask = 1;
	search_result = 0;
	if (!LastDeviceFlag)
     4ac:	80 91 0d 03 	lds	r24, 0x030D	; 0x80030d <LastDeviceFlag>
     4b0:	81 11       	cpse	r24, r1
     4b2:	05 c0       	rjmp	.+10     	; 0x4be <ds18b20_SearhRom+0x28>
	{
		ds18b20_Reset();
     4b4:	0e 94 c6 01 	call	0x38c	; 0x38c <ds18b20_Reset>
		ds18b20_WriteByte(0xF0);
     4b8:	80 ef       	ldi	r24, 0xF0	; 240
     4ba:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <ds18b20_WriteByte>
{
	char t = tt>>4;//СЃРґРІРёРі Рё РѕС‚СЃРµС‡РµРЅРёРµ С‡Р°СЃС‚Рё СЃС‚Р°СЂС€РµРіРѕ Р±Р°Р№С‚Р°
	return t;
}
uint8_t ds18b20_SearhRom(uint8_t *Addr)
{
     4be:	d1 e0       	ldi	r29, 0x01	; 1
     4c0:	10 e0       	ldi	r17, 0x00	; 0
     4c2:	e1 2c       	mov	r14, r1
     4c4:	01 e0       	ldi	r16, 0x01	; 1
			else
			{
				if (id_bit_number < LastDiscrepancy)
				search_direction = ((ROM_NO[rom_byte_number] & rom_byte_mask) > 0);
				else
				search_direction = (id_bit_number == LastDiscrepancy);
     4c6:	ff 24       	eor	r15, r15
     4c8:	f3 94       	inc	r15
     4ca:	d1 2c       	mov	r13, r1
		ds18b20_Reset();
		ds18b20_WriteByte(0xF0);
	}
	do
	{
		id_bit = ds18b20_ReadBit();
     4cc:	0e 94 1d 02 	call	0x43a	; 0x43a <ds18b20_ReadBit>
     4d0:	c8 2f       	mov	r28, r24
		cmp_id_bit = ds18b20_ReadBit();
     4d2:	0e 94 1d 02 	call	0x43a	; 0x43a <ds18b20_ReadBit>
		if ((id_bit == 1) && (cmp_id_bit == 1))
     4d6:	c1 30       	cpi	r28, 0x01	; 1
     4d8:	09 f0       	breq	.+2      	; 0x4dc <ds18b20_SearhRom+0x46>
     4da:	54 c0       	rjmp	.+168    	; 0x584 <ds18b20_SearhRom+0xee>
     4dc:	81 30       	cpi	r24, 0x01	; 1
     4de:	e1 f4       	brne	.+56     	; 0x518 <ds18b20_SearhRom+0x82>
     4e0:	38 c0       	rjmp	.+112    	; 0x552 <ds18b20_SearhRom+0xbc>
		{
			if (id_bit != cmp_id_bit)
			search_direction = id_bit; // bit write value for search
			else
			{
				if (id_bit_number < LastDiscrepancy)
     4e2:	80 91 0e 03 	lds	r24, 0x030E	; 0x80030e <LastDiscrepancy>
     4e6:	08 17       	cp	r16, r24
     4e8:	50 f4       	brcc	.+20     	; 0x4fe <ds18b20_SearhRom+0x68>
				search_direction = ((ROM_NO[rom_byte_number] & rom_byte_mask) > 0);
     4ea:	e1 2f       	mov	r30, r17
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	ec 5f       	subi	r30, 0xFC	; 252
     4f0:	fc 4f       	sbci	r31, 0xFC	; 252
     4f2:	80 81       	ld	r24, Z
     4f4:	8d 23       	and	r24, r29
     4f6:	cf 2d       	mov	r28, r15
     4f8:	29 f4       	brne	.+10     	; 0x504 <ds18b20_SearhRom+0x6e>
     4fa:	cd 2d       	mov	r28, r13
     4fc:	03 c0       	rjmp	.+6      	; 0x504 <ds18b20_SearhRom+0x6e>
				else
				search_direction = (id_bit_number == LastDiscrepancy);
     4fe:	cf 2d       	mov	r28, r15
     500:	08 13       	cpse	r16, r24
     502:	cd 2d       	mov	r28, r13
				if (search_direction == 0)
     504:	c1 11       	cpse	r28, r1
     506:	06 c0       	rjmp	.+12     	; 0x514 <ds18b20_SearhRom+0x7e>
				{
					last_zero = id_bit_number;
					if (last_zero < 9)
     508:	09 30       	cpi	r16, 0x09	; 9
     50a:	08 f0       	brcs	.+2      	; 0x50e <ds18b20_SearhRom+0x78>
     50c:	3e c0       	rjmp	.+124    	; 0x58a <ds18b20_SearhRom+0xf4>
					LastFamilyDiscrepancy = last_zero;
     50e:	00 93 0c 03 	sts	0x030C, r16	; 0x80030c <LastFamilyDiscrepancy>
     512:	3b c0       	rjmp	.+118    	; 0x58a <ds18b20_SearhRom+0xf4>
				}
			}
			if (search_direction == 1)
     514:	c1 30       	cpi	r28, 0x01	; 1
     516:	49 f4       	brne	.+18     	; 0x52a <ds18b20_SearhRom+0x94>
			ROM_NO[rom_byte_number] |= rom_byte_mask;
     518:	e1 2f       	mov	r30, r17
     51a:	f0 e0       	ldi	r31, 0x00	; 0
     51c:	ec 5f       	subi	r30, 0xFC	; 252
     51e:	fc 4f       	sbci	r31, 0xFC	; 252
     520:	80 81       	ld	r24, Z
     522:	8d 2b       	or	r24, r29
     524:	80 83       	st	Z, r24
     526:	cf 2d       	mov	r28, r15
     528:	09 c0       	rjmp	.+18     	; 0x53c <ds18b20_SearhRom+0xa6>
			else
			ROM_NO[rom_byte_number] &= ~rom_byte_mask;
     52a:	e1 2f       	mov	r30, r17
     52c:	f0 e0       	ldi	r31, 0x00	; 0
     52e:	ec 5f       	subi	r30, 0xFC	; 252
     530:	fc 4f       	sbci	r31, 0xFC	; 252
     532:	90 81       	ld	r25, Z
     534:	8d 2f       	mov	r24, r29
     536:	80 95       	com	r24
     538:	89 23       	and	r24, r25
     53a:	80 83       	st	Z, r24
			ds18b20_WriteBit(search_direction);
     53c:	8c 2f       	mov	r24, r28
     53e:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <ds18b20_WriteBit>
			id_bit_number++;
     542:	0f 5f       	subi	r16, 0xFF	; 255
			rom_byte_mask <<= 1;
     544:	dd 0f       	add	r29, r29
			if (rom_byte_mask == 0)
     546:	11 f4       	brne	.+4      	; 0x54c <ds18b20_SearhRom+0xb6>
			{
				rom_byte_number++;
     548:	1f 5f       	subi	r17, 0xFF	; 255
				rom_byte_mask = 1;
     54a:	d1 e0       	ldi	r29, 0x01	; 1
			}
		}
	} while(rom_byte_number < 8); // СЃС‡РёС‚С‹РІР°РµРј Р±Р°Р№С‚С‹ СЃ 0 РґРѕ 7 РІ С†РёРєР»Рµ
     54c:	18 30       	cpi	r17, 0x08	; 8
     54e:	08 f4       	brcc	.+2      	; 0x552 <ds18b20_SearhRom+0xbc>
     550:	bd cf       	rjmp	.-134    	; 0x4cc <ds18b20_SearhRom+0x36>
	if (!(id_bit_number < 65))
     552:	01 34       	cpi	r16, 0x41	; 65
     554:	40 f0       	brcs	.+16     	; 0x566 <ds18b20_SearhRom+0xd0>
	{
		// search successful so set LastDiscrepancy,LastDeviceFlag,search_result
		LastDiscrepancy = last_zero;
     556:	e0 92 0e 03 	sts	0x030E, r14	; 0x80030e <LastDiscrepancy>
		// check for last device
		if (LastDiscrepancy == 0)
     55a:	e1 10       	cpse	r14, r1
     55c:	18 c0       	rjmp	.+48     	; 0x58e <ds18b20_SearhRom+0xf8>
		LastDeviceFlag = 1;
     55e:	81 e0       	ldi	r24, 0x01	; 1
     560:	80 93 0d 03 	sts	0x030D, r24	; 0x80030d <LastDeviceFlag>
     564:	14 c0       	rjmp	.+40     	; 0x58e <ds18b20_SearhRom+0xf8>
		search_result = 1;
	}
	if (!search_result || !ROM_NO[0])
	{
		LastDiscrepancy = 0;
     566:	10 92 0e 03 	sts	0x030E, r1	; 0x80030e <LastDiscrepancy>
		LastDeviceFlag = 0;
     56a:	10 92 0d 03 	sts	0x030D, r1	; 0x80030d <LastDeviceFlag>
		LastFamilyDiscrepancy = 0;
     56e:	10 92 0c 03 	sts	0x030C, r1	; 0x80030c <LastFamilyDiscrepancy>
		search_result = 0;
     572:	80 e0       	ldi	r24, 0x00	; 0
     574:	17 c0       	rjmp	.+46     	; 0x5a4 <ds18b20_SearhRom+0x10e>
	}
	else
	{
		for (int i = 0; i < 8; i++) Addr[i] = ROM_NO[i];
     576:	81 91       	ld	r24, Z+
     578:	8d 93       	st	X+, r24
     57a:	2e 17       	cp	r18, r30
     57c:	3f 07       	cpc	r19, r31
     57e:	d9 f7       	brne	.-10     	; 0x576 <ds18b20_SearhRom+0xe0>
     580:	81 e0       	ldi	r24, 0x01	; 1
	}
	return search_result;
     582:	10 c0       	rjmp	.+32     	; 0x5a4 <ds18b20_SearhRom+0x10e>
		cmp_id_bit = ds18b20_ReadBit();
		if ((id_bit == 1) && (cmp_id_bit == 1))
		break;
		else
		{
			if (id_bit != cmp_id_bit)
     584:	c8 13       	cpse	r28, r24
     586:	d1 cf       	rjmp	.-94     	; 0x52a <ds18b20_SearhRom+0x94>
     588:	ac cf       	rjmp	.-168    	; 0x4e2 <ds18b20_SearhRom+0x4c>
{
	char t = tt>>4;//СЃРґРІРёРі Рё РѕС‚СЃРµС‡РµРЅРёРµ С‡Р°СЃС‚Рё СЃС‚Р°СЂС€РµРіРѕ Р±Р°Р№С‚Р°
	return t;
}
uint8_t ds18b20_SearhRom(uint8_t *Addr)
{
     58a:	e0 2e       	mov	r14, r16
     58c:	ce cf       	rjmp	.-100    	; 0x52a <ds18b20_SearhRom+0x94>
		// check for last device
		if (LastDiscrepancy == 0)
		LastDeviceFlag = 1;
		search_result = 1;
	}
	if (!search_result || !ROM_NO[0])
     58e:	80 91 04 03 	lds	r24, 0x0304	; 0x800304 <ROM_NO>
     592:	88 23       	and	r24, r24
     594:	41 f3       	breq	.-48     	; 0x566 <ds18b20_SearhRom+0xd0>
     596:	e4 e0       	ldi	r30, 0x04	; 4
     598:	f3 e0       	ldi	r31, 0x03	; 3
     59a:	ab 2d       	mov	r26, r11
     59c:	bc 2d       	mov	r27, r12
     59e:	2c e0       	ldi	r18, 0x0C	; 12
     5a0:	33 e0       	ldi	r19, 0x03	; 3
     5a2:	e9 cf       	rjmp	.-46     	; 0x576 <ds18b20_SearhRom+0xe0>
	else
	{
		for (int i = 0; i < 8; i++) Addr[i] = ROM_NO[i];
	}
	return search_result;
}
     5a4:	df 91       	pop	r29
     5a6:	cf 91       	pop	r28
     5a8:	1f 91       	pop	r17
     5aa:	0f 91       	pop	r16
     5ac:	ff 90       	pop	r15
     5ae:	ef 90       	pop	r14
     5b0:	df 90       	pop	r13
     5b2:	cf 90       	pop	r12
     5b4:	bf 90       	pop	r11
     5b6:	08 95       	ret

000005b8 <ds18b20_init>:
//-----------------------------------------------
uint8_t ds18b20_init(uint8_t mode)
{
     5b8:	cf 92       	push	r12
     5ba:	df 92       	push	r13
     5bc:	ef 92       	push	r14
     5be:	ff 92       	push	r15
     5c0:	0f 93       	push	r16
     5c2:	1f 93       	push	r17
     5c4:	cf 93       	push	r28
     5c6:	df 93       	push	r29
     5c8:	cd b7       	in	r28, 0x3d	; 61
     5ca:	de b7       	in	r29, 0x3e	; 62
     5cc:	28 97       	sbiw	r28, 0x08	; 8
     5ce:	0f b6       	in	r0, 0x3f	; 63
     5d0:	f8 94       	cli
     5d2:	de bf       	out	0x3e, r29	; 62
     5d4:	0f be       	out	0x3f, r0	; 63
     5d6:	cd bf       	out	0x3d, r28	; 61
	int i = 0, j=0;
	uint8_t dt[8];
	
	if(mode==SKIP_ROM)
     5d8:	81 11       	cpse	r24, r1
     5da:	16 c0       	rjmp	.+44     	; 0x608 <ds18b20_init+0x50>
	{		
		if(!ds18b20_Reset()) return 1;
     5dc:	0e 94 c6 01 	call	0x38c	; 0x38c <ds18b20_Reset>
     5e0:	88 23       	and	r24, r24
     5e2:	09 f4       	brne	.+2      	; 0x5e6 <ds18b20_init+0x2e>
     5e4:	67 c0       	rjmp	.+206    	; 0x6b4 <ds18b20_init+0xfc>
		//SKIP ROM
		ds18b20_WriteByte(0xCC);
     5e6:	8c ec       	ldi	r24, 0xCC	; 204
     5e8:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <ds18b20_WriteByte>
		//WRITE SCRATCHPAD
		ds18b20_WriteByte(0x4E);
     5ec:	8e e4       	ldi	r24, 0x4E	; 78
     5ee:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <ds18b20_WriteByte>
		//TH REGISTER 100 РіСЂР°РґСѓСЃРѕРІ
		ds18b20_WriteByte(0x64);
     5f2:	84 e6       	ldi	r24, 0x64	; 100
     5f4:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <ds18b20_WriteByte>
		//TL REGISTER - 30 РіСЂР°РґСѓСЃРѕРІ
		ds18b20_WriteByte(0x1E);
     5f8:	8e e1       	ldi	r24, 0x1E	; 30
     5fa:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <ds18b20_WriteByte>
		//Resolution 12 bit
		ds18b20_WriteByte(RESOLUTION_12BIT);
     5fe:	8f e7       	ldi	r24, 0x7F	; 127
     600:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <ds18b20_WriteByte>
			ds18b20_WriteByte(0x14);
			//Resolution 12 bit
			ds18b20_WriteByte(RESOLUTION_12BIT);
		}
	}
	return 0;
     604:	80 e0       	ldi	r24, 0x00	; 0
     606:	59 c0       	rjmp	.+178    	; 0x6ba <ds18b20_init+0x102>
     608:	08 e0       	ldi	r16, 0x08	; 8
     60a:	10 e0       	ldi	r17, 0x00	; 0
	}
	else
	{
		for(i=1;i<=8;i++)
		{
			if(ds18b20_SearhRom(dt))
     60c:	ce 01       	movw	r24, r28
     60e:	01 96       	adiw	r24, 0x01	; 1
     610:	0e 94 4b 02 	call	0x496	; 0x496 <ds18b20_SearhRom>
     614:	81 11       	cpse	r24, r1
     616:	05 c0       	rjmp	.+10     	; 0x622 <ds18b20_init+0x6a>
				Dev_Cnt++;
				memcpy(Dev_ID[Dev_Cnt-1],dt,sizeof(dt));
			}
			else break;
		}
		for(i=1;i<=Dev_Cnt;i++)
     618:	80 91 11 03 	lds	r24, 0x0311	; 0x800311 <Dev_Cnt>
     61c:	81 11       	cpse	r24, r1
     61e:	1a c0       	rjmp	.+52     	; 0x654 <ds18b20_init+0x9c>
     620:	4c c0       	rjmp	.+152    	; 0x6ba <ds18b20_init+0x102>
	{
		for(i=1;i<=8;i++)
		{
			if(ds18b20_SearhRom(dt))
			{
				Dev_Cnt++;
     622:	a0 91 11 03 	lds	r26, 0x0311	; 0x800311 <Dev_Cnt>
     626:	af 5f       	subi	r26, 0xFF	; 255
     628:	a0 93 11 03 	sts	0x0311, r26	; 0x800311 <Dev_Cnt>
				memcpy(Dev_ID[Dev_Cnt-1],dt,sizeof(dt));
     62c:	b0 e0       	ldi	r27, 0x00	; 0
     62e:	aa 0f       	add	r26, r26
     630:	bb 1f       	adc	r27, r27
     632:	aa 0f       	add	r26, r26
     634:	bb 1f       	adc	r27, r27
     636:	aa 0f       	add	r26, r26
     638:	bb 1f       	adc	r27, r27
     63a:	ac 54       	subi	r26, 0x4C	; 76
     63c:	bd 4f       	sbci	r27, 0xFD	; 253
     63e:	88 e0       	ldi	r24, 0x08	; 8
     640:	fe 01       	movw	r30, r28
     642:	31 96       	adiw	r30, 0x01	; 1
     644:	01 90       	ld	r0, Z+
     646:	0d 92       	st	X+, r0
     648:	8a 95       	dec	r24
     64a:	e1 f7       	brne	.-8      	; 0x644 <ds18b20_init+0x8c>
     64c:	01 50       	subi	r16, 0x01	; 1
     64e:	11 09       	sbc	r17, r1
		//Resolution 12 bit
		ds18b20_WriteByte(RESOLUTION_12BIT);
	}
	else
	{
		for(i=1;i<=8;i++)
     650:	e9 f6       	brne	.-70     	; 0x60c <ds18b20_init+0x54>
     652:	e2 cf       	rjmp	.-60     	; 0x618 <ds18b20_init+0x60>
     654:	0c eb       	ldi	r16, 0xBC	; 188
     656:	12 e0       	ldi	r17, 0x02	; 2
				Dev_Cnt++;
				memcpy(Dev_ID[Dev_Cnt-1],dt,sizeof(dt));
			}
			else break;
		}
		for(i=1;i<=Dev_Cnt;i++)
     658:	cc 24       	eor	r12, r12
     65a:	c3 94       	inc	r12
     65c:	d1 2c       	mov	r13, r1
		{
			if(!ds18b20_Reset()) return 1;
     65e:	0e 94 c6 01 	call	0x38c	; 0x38c <ds18b20_Reset>
     662:	88 23       	and	r24, r24
     664:	49 f1       	breq	.+82     	; 0x6b8 <ds18b20_init+0x100>
			//Match Rom
			ds18b20_WriteByte(0x55);
     666:	85 e5       	ldi	r24, 0x55	; 85
     668:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <ds18b20_WriteByte>
     66c:	78 01       	movw	r14, r16
     66e:	88 e0       	ldi	r24, 0x08	; 8
     670:	e8 0e       	add	r14, r24
     672:	f1 1c       	adc	r15, r1
			for(j=0;j<=7;j++)
			{
				ds18b20_WriteByte(Dev_ID[i-1][j]);
     674:	f8 01       	movw	r30, r16
     676:	81 91       	ld	r24, Z+
     678:	8f 01       	movw	r16, r30
     67a:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <ds18b20_WriteByte>
		for(i=1;i<=Dev_Cnt;i++)
		{
			if(!ds18b20_Reset()) return 1;
			//Match Rom
			ds18b20_WriteByte(0x55);
			for(j=0;j<=7;j++)
     67e:	0e 15       	cp	r16, r14
     680:	1f 05       	cpc	r17, r15
     682:	c1 f7       	brne	.-16     	; 0x674 <ds18b20_init+0xbc>
			{
				ds18b20_WriteByte(Dev_ID[i-1][j]);
			}
			//WRITE SCRATCHPAD
			ds18b20_WriteByte(0x4E);
     684:	8e e4       	ldi	r24, 0x4E	; 78
     686:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <ds18b20_WriteByte>
			//TH REGISTER - 30 РіСЂР°РґСѓСЃРѕРІ
			ds18b20_WriteByte(0x1E);
     68a:	8e e1       	ldi	r24, 0x1E	; 30
     68c:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <ds18b20_WriteByte>
			//TL REGISTER - 20 РіСЂР°РґСѓСЃРѕРІ
			ds18b20_WriteByte(0x14);
     690:	84 e1       	ldi	r24, 0x14	; 20
     692:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <ds18b20_WriteByte>
			//Resolution 12 bit
			ds18b20_WriteByte(RESOLUTION_12BIT);
     696:	8f e7       	ldi	r24, 0x7F	; 127
     698:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <ds18b20_WriteByte>
				Dev_Cnt++;
				memcpy(Dev_ID[Dev_Cnt-1],dt,sizeof(dt));
			}
			else break;
		}
		for(i=1;i<=Dev_Cnt;i++)
     69c:	ff ef       	ldi	r31, 0xFF	; 255
     69e:	cf 1a       	sub	r12, r31
     6a0:	df 0a       	sbc	r13, r31
     6a2:	87 01       	movw	r16, r14
     6a4:	80 91 11 03 	lds	r24, 0x0311	; 0x800311 <Dev_Cnt>
     6a8:	90 e0       	ldi	r25, 0x00	; 0
     6aa:	8c 15       	cp	r24, r12
     6ac:	9d 05       	cpc	r25, r13
     6ae:	bc f6       	brge	.-82     	; 0x65e <ds18b20_init+0xa6>
			ds18b20_WriteByte(0x14);
			//Resolution 12 bit
			ds18b20_WriteByte(RESOLUTION_12BIT);
		}
	}
	return 0;
     6b0:	80 e0       	ldi	r24, 0x00	; 0
     6b2:	03 c0       	rjmp	.+6      	; 0x6ba <ds18b20_init+0x102>
	int i = 0, j=0;
	uint8_t dt[8];
	
	if(mode==SKIP_ROM)
	{		
		if(!ds18b20_Reset()) return 1;
     6b4:	81 e0       	ldi	r24, 0x01	; 1
     6b6:	01 c0       	rjmp	.+2      	; 0x6ba <ds18b20_init+0x102>
			}
			else break;
		}
		for(i=1;i<=Dev_Cnt;i++)
		{
			if(!ds18b20_Reset()) return 1;
     6b8:	81 e0       	ldi	r24, 0x01	; 1
			//Resolution 12 bit
			ds18b20_WriteByte(RESOLUTION_12BIT);
		}
	}
	return 0;
}
     6ba:	28 96       	adiw	r28, 0x08	; 8
     6bc:	0f b6       	in	r0, 0x3f	; 63
     6be:	f8 94       	cli
     6c0:	de bf       	out	0x3e, r29	; 62
     6c2:	0f be       	out	0x3f, r0	; 63
     6c4:	cd bf       	out	0x3d, r28	; 61
     6c6:	df 91       	pop	r29
     6c8:	cf 91       	pop	r28
     6ca:	1f 91       	pop	r17
     6cc:	0f 91       	pop	r16
     6ce:	ff 90       	pop	r15
     6d0:	ef 90       	pop	r14
     6d2:	df 90       	pop	r13
     6d4:	cf 90       	pop	r12
     6d6:	08 95       	ret

000006d8 <ds18b20_MeasureTemperCmd>:
//----------------------------------------------------------
void ds18b20_MeasureTemperCmd(uint8_t mode, uint8_t DevNum)
{
     6d8:	0f 93       	push	r16
     6da:	1f 93       	push	r17
     6dc:	cf 93       	push	r28
     6de:	df 93       	push	r29
     6e0:	c8 2f       	mov	r28, r24
     6e2:	06 2f       	mov	r16, r22
	int i = 0;
	ds18b20_Reset();
     6e4:	0e 94 c6 01 	call	0x38c	; 0x38c <ds18b20_Reset>
	if(mode==SKIP_ROM)
     6e8:	c1 11       	cpse	r28, r1
     6ea:	04 c0       	rjmp	.+8      	; 0x6f4 <ds18b20_MeasureTemperCmd+0x1c>
	{
		//SKIP ROM
		ds18b20_WriteByte(0xCC);
     6ec:	8c ec       	ldi	r24, 0xCC	; 204
     6ee:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <ds18b20_WriteByte>
     6f2:	1b c0       	rjmp	.+54     	; 0x72a <ds18b20_MeasureTemperCmd+0x52>
	}
	else
	{
		//Match Rom
		ds18b20_WriteByte(0x55);
     6f4:	85 e5       	ldi	r24, 0x55	; 85
     6f6:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <ds18b20_WriteByte>
     6fa:	10 e0       	ldi	r17, 0x00	; 0
     6fc:	e8 01       	movw	r28, r16
     6fe:	cc 0f       	add	r28, r28
     700:	dd 1f       	adc	r29, r29
     702:	cc 0f       	add	r28, r28
     704:	dd 1f       	adc	r29, r29
     706:	cc 0f       	add	r28, r28
     708:	dd 1f       	adc	r29, r29
     70a:	cc 54       	subi	r28, 0x4C	; 76
     70c:	dd 4f       	sbci	r29, 0xFD	; 253
     70e:	00 0f       	add	r16, r16
     710:	11 1f       	adc	r17, r17
     712:	00 0f       	add	r16, r16
     714:	11 1f       	adc	r17, r17
     716:	00 0f       	add	r16, r16
     718:	11 1f       	adc	r17, r17
     71a:	04 54       	subi	r16, 0x44	; 68
     71c:	1d 4f       	sbci	r17, 0xFD	; 253
		for(i=0;i<=7;i++)
		{
			ds18b20_WriteByte(Dev_ID[DevNum-1][i]);
     71e:	89 91       	ld	r24, Y+
     720:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <ds18b20_WriteByte>
	}
	else
	{
		//Match Rom
		ds18b20_WriteByte(0x55);
		for(i=0;i<=7;i++)
     724:	c0 17       	cp	r28, r16
     726:	d1 07       	cpc	r29, r17
     728:	d1 f7       	brne	.-12     	; 0x71e <ds18b20_MeasureTemperCmd+0x46>
		{
			ds18b20_WriteByte(Dev_ID[DevNum-1][i]);
		}
	}
	//CONVERT T
	ds18b20_WriteByte(0x44);
     72a:	84 e4       	ldi	r24, 0x44	; 68
     72c:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <ds18b20_WriteByte>
}
     730:	df 91       	pop	r29
     732:	cf 91       	pop	r28
     734:	1f 91       	pop	r17
     736:	0f 91       	pop	r16
     738:	08 95       	ret

0000073a <ds18b20_ReadStratcpad>:
//----------------------------------------------------------
void ds18b20_ReadStratcpad(uint8_t mode, uint8_t *Data, uint8_t DevNum)
{
     73a:	ef 92       	push	r14
     73c:	ff 92       	push	r15
     73e:	0f 93       	push	r16
     740:	1f 93       	push	r17
     742:	cf 93       	push	r28
     744:	df 93       	push	r29
     746:	c8 2f       	mov	r28, r24
     748:	8b 01       	movw	r16, r22
     74a:	e4 2e       	mov	r14, r20
	uint8_t i;
	ds18b20_Reset();
     74c:	0e 94 c6 01 	call	0x38c	; 0x38c <ds18b20_Reset>
	if(mode==SKIP_ROM)
     750:	c1 11       	cpse	r28, r1
     752:	04 c0       	rjmp	.+8      	; 0x75c <ds18b20_ReadStratcpad+0x22>
	{
		//SKIP ROM
		ds18b20_WriteByte(0xCC);
     754:	8c ec       	ldi	r24, 0xCC	; 204
     756:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <ds18b20_WriteByte>
     75a:	1e c0       	rjmp	.+60     	; 0x798 <ds18b20_ReadStratcpad+0x5e>
	}
	else
	{
		//Match Rom
		ds18b20_WriteByte(0x55);
     75c:	85 e5       	ldi	r24, 0x55	; 85
     75e:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <ds18b20_WriteByte>
     762:	f1 2c       	mov	r15, r1
     764:	e7 01       	movw	r28, r14
     766:	cc 0f       	add	r28, r28
     768:	dd 1f       	adc	r29, r29
     76a:	cc 0f       	add	r28, r28
     76c:	dd 1f       	adc	r29, r29
     76e:	cc 0f       	add	r28, r28
     770:	dd 1f       	adc	r29, r29
     772:	cc 54       	subi	r28, 0x4C	; 76
     774:	dd 4f       	sbci	r29, 0xFD	; 253
     776:	c7 01       	movw	r24, r14
     778:	88 0f       	add	r24, r24
     77a:	99 1f       	adc	r25, r25
     77c:	88 0f       	add	r24, r24
     77e:	99 1f       	adc	r25, r25
     780:	88 0f       	add	r24, r24
     782:	99 1f       	adc	r25, r25
     784:	9c 01       	movw	r18, r24
     786:	24 54       	subi	r18, 0x44	; 68
     788:	3d 4f       	sbci	r19, 0xFD	; 253
     78a:	79 01       	movw	r14, r18
		for(i=0;i<=7;i++)
		{
			ds18b20_WriteByte(Dev_ID[DevNum-1][i]);
     78c:	89 91       	ld	r24, Y+
     78e:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <ds18b20_WriteByte>
	}
	else
	{
		//Match Rom
		ds18b20_WriteByte(0x55);
		for(i=0;i<=7;i++)
     792:	ce 15       	cp	r28, r14
     794:	df 05       	cpc	r29, r15
     796:	d1 f7       	brne	.-12     	; 0x78c <ds18b20_ReadStratcpad+0x52>
		{
			ds18b20_WriteByte(Dev_ID[DevNum-1][i]);
		}
	}
	//READ SCRATCHPAD
	ds18b20_WriteByte(0xBE);
     798:	8e eb       	ldi	r24, 0xBE	; 190
     79a:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <ds18b20_WriteByte>
     79e:	e8 01       	movw	r28, r16
     7a0:	07 5f       	subi	r16, 0xF7	; 247
     7a2:	1f 4f       	sbci	r17, 0xFF	; 255
	for(i=0;i<=8;i++)
	{
		Data[i] = ds18b20_ReadByte();
     7a4:	0e 94 32 02 	call	0x464	; 0x464 <ds18b20_ReadByte>
     7a8:	89 93       	st	Y+, r24
			ds18b20_WriteByte(Dev_ID[DevNum-1][i]);
		}
	}
	//READ SCRATCHPAD
	ds18b20_WriteByte(0xBE);
	for(i=0;i<=8;i++)
     7aa:	c0 17       	cp	r28, r16
     7ac:	d1 07       	cpc	r29, r17
     7ae:	d1 f7       	brne	.-12     	; 0x7a4 <ds18b20_ReadStratcpad+0x6a>
	{
		Data[i] = ds18b20_ReadByte();
	}
}
     7b0:	df 91       	pop	r29
     7b2:	cf 91       	pop	r28
     7b4:	1f 91       	pop	r17
     7b6:	0f 91       	pop	r16
     7b8:	ff 90       	pop	r15
     7ba:	ef 90       	pop	r14
     7bc:	08 95       	ret

000007be <ds18b20_GetSign>:
uint8_t ds18b20_GetSign(uint16_t dt)
{
	//С•СЂРѕРІРµСЂРёРј 11-Р№ Р±РёС‚
	if (dt&(1<<11)) return 1;
	else return 0;
}
     7be:	93 fb       	bst	r25, 3
     7c0:	88 27       	eor	r24, r24
     7c2:	80 f9       	bld	r24, 0
     7c4:	08 95       	ret

000007c6 <__vector_16>:
char str1[64];
// float n=0;
float Cppm=0;
unsigned int b;

ISR(TIMER0_OVF_vect){
     7c6:	1f 92       	push	r1
     7c8:	0f 92       	push	r0
     7ca:	0f b6       	in	r0, 0x3f	; 63
     7cc:	0f 92       	push	r0
     7ce:	11 24       	eor	r1, r1
     7d0:	8f 93       	push	r24
     7d2:	9f 93       	push	r25
	b++;
     7d4:	80 91 0f 03 	lds	r24, 0x030F	; 0x80030f <b>
     7d8:	90 91 10 03 	lds	r25, 0x0310	; 0x800310 <b+0x1>
     7dc:	01 96       	adiw	r24, 0x01	; 1
     7de:	90 93 10 03 	sts	0x0310, r25	; 0x800310 <b+0x1>
     7e2:	80 93 0f 03 	sts	0x030F, r24	; 0x80030f <b>
}
     7e6:	9f 91       	pop	r25
     7e8:	8f 91       	pop	r24
     7ea:	0f 90       	pop	r0
     7ec:	0f be       	out	0x3f, r0	; 63
     7ee:	0f 90       	pop	r0
     7f0:	1f 90       	pop	r1
     7f2:	18 95       	reti

000007f4 <main>:


int main(void)
{
	DDRB |=(1<<DDB5);
     7f4:	25 9a       	sbi	0x04, 5	; 4
	adc_value=0;
     7f6:	10 92 fd 02 	sts	0x02FD, r1	; 0x8002fd <adc_value+0x1>
     7fa:	10 92 fc 02 	sts	0x02FC, r1	; 0x8002fc <adc_value>
// 	USART_ini(MYUBRR);
	timer0_init();
     7fe:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <timer0_init>
	mg12232_init();
     802:	0e 94 4a 05 	call	0xa94	; 0xa94 <mg12232_init>
	ADC_Init();
     806:	0e 94 50 01 	call	0x2a0	; 0x2a0 <ADC_Init>
	uint16_t temper_H;
// 	uint16_t temper_L;
	char c;
	uint8_t i;	
	uint8_t a;
	char status = ds18b20_init(NO_SKIP_ROM);
     80a:	81 e0       	ldi	r24, 0x01	; 1
     80c:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <ds18b20_init>
					command_write(CMD_COLUMN+1,3);
				}
				uint8_t chip;
				if(i==2||i==4||i==6){chip=2;command_write(CMD_COLUMN+18,2);}
				else chip=1;
				sprintf(str1,"%d=%c%d", i, c, temper_H);
     810:	0f 2e       	mov	r0, r31
     812:	f2 e9       	ldi	r31, 0x92	; 146
     814:	ef 2e       	mov	r14, r31
     816:	f2 e0       	ldi	r31, 0x02	; 2
     818:	ff 2e       	mov	r15, r31
     81a:	f0 2d       	mov	r31, r0
     81c:	02 e1       	ldi	r16, 0x12	; 18
     81e:	13 e0       	ldi	r17, 0x03	; 3
		}	
		
//		n=(float)adc_value*5000/1024;
		Cppm=(adc_value-82)*15.167236;			//4.854*3.125
		dht11_start();
		sprintf(str1,"T=%d  H=%d ADC=%.f tim=%d\r\n", dht11_temp()+3, dht11_humid(), Cppm, b);
     820:	0f 2e       	mov	r0, r31
     822:	fa e9       	ldi	r31, 0x9A	; 154
     824:	cf 2e       	mov	r12, r31
     826:	f2 e0       	ldi	r31, 0x02	; 2
     828:	df 2e       	mov	r13, r31
     82a:	f0 2d       	mov	r31, r0
// 		sprintf(str1,"CRC: 0x%02X\r\n", Dev_ID[i-1][7]);
// 		for (a=0;a<strlen(str1);a++)USART_Transmit(str1[a]);
// 	}
    while (1) 
    {
		sei();
     82c:	78 94       	sei
		clear_lcd();
     82e:	0e 94 32 05 	call	0xa64	; 0xa64 <clear_lcd>
		
// 		for(i=1;i<=Dev_Cnt;i++)
// 		{
// 		}
		if (b < 300)
     832:	80 91 0f 03 	lds	r24, 0x030F	; 0x80030f <b>
     836:	90 91 10 03 	lds	r25, 0x0310	; 0x800310 <b+0x1>
     83a:	8c 32       	cpi	r24, 0x2C	; 44
     83c:	91 40       	sbci	r25, 0x01	; 1
     83e:	40 f4       	brcc	.+16     	; 0x850 <main+0x5c>
		{
			PORTB &=~(1<<PORTB5);
     840:	2d 98       	cbi	0x05, 5	; 5
		{
			PORTB |=(1<<PORTB5);			
			b=0;
		}

		if (b==0)
     842:	80 91 0f 03 	lds	r24, 0x030F	; 0x80030f <b>
     846:	90 91 10 03 	lds	r25, 0x0310	; 0x800310 <b+0x1>
     84a:	89 2b       	or	r24, r25
     84c:	39 f4       	brne	.+14     	; 0x85c <main+0x68>
     84e:	0b c0       	rjmp	.+22     	; 0x866 <main+0x72>
		{
			PORTB &=~(1<<PORTB5);
		} 
		else
		{
			PORTB |=(1<<PORTB5);			
     850:	2d 9a       	sbi	0x05, 5	; 5
			b=0;
     852:	10 92 10 03 	sts	0x0310, r1	; 0x800310 <b+0x1>
     856:	10 92 0f 03 	sts	0x030F, r1	; 0x80030f <b>
     85a:	05 c0       	rjmp	.+10     	; 0x866 <main+0x72>
		{
			ds18b20_MeasureTemperCmd(SKIP_ROM, 0);
		} 
		else
		{
			for(i=1;i<=Dev_Cnt;i++)
     85c:	80 91 11 03 	lds	r24, 0x0311	; 0x800311 <Dev_Cnt>
     860:	81 11       	cpse	r24, r1
     862:	06 c0       	rjmp	.+12     	; 0x870 <main+0x7c>
     864:	8c c0       	rjmp	.+280    	; 0x97e <__stack+0x7f>
			b=0;
		}

		if (b==0)
		{
			ds18b20_MeasureTemperCmd(SKIP_ROM, 0);
     866:	60 e0       	ldi	r22, 0x00	; 0
     868:	80 e0       	ldi	r24, 0x00	; 0
     86a:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <ds18b20_MeasureTemperCmd>
     86e:	87 c0       	rjmp	.+270    	; 0x97e <__stack+0x7f>
		} 
		else
		{
			for(i=1;i<=Dev_Cnt;i++)
     870:	bb 24       	eor	r11, r11
     872:	b3 94       	inc	r11
			{
				ds18b20_ReadStratcpad(NO_SKIP_ROM, dt, i);
     874:	4b 2d       	mov	r20, r11
     876:	62 e5       	ldi	r22, 0x52	; 82
     878:	73 e0       	ldi	r23, 0x03	; 3
     87a:	81 e0       	ldi	r24, 0x01	; 1
     87c:	0e 94 9d 03 	call	0x73a	; 0x73a <ds18b20_ReadStratcpad>
// 				sprintf(str1,"STRATHPAD %d: %02X %02X %02X %02X %02X %02X %02X %02X %02X; ",
// 				i, dt[0], dt[1], dt[2], dt[3], dt[4], dt[5], dt[6], dt[7], dt[8]);
// 				for (a=0;a<strlen(str1);a++)USART_Transmit(str1[a]);
				raw_temper = ((uint16_t)dt[1]<<8)|dt[0];
     880:	e2 e5       	ldi	r30, 0x52	; 82
     882:	f3 e0       	ldi	r31, 0x03	; 3
     884:	81 80       	ldd	r8, Z+1	; 0x01
     886:	91 2c       	mov	r9, r1
     888:	98 2c       	mov	r9, r8
     88a:	88 24       	eor	r8, r8
     88c:	80 81       	ld	r24, Z
     88e:	88 2a       	or	r8, r24
				if(ds18b20_GetSign(raw_temper)) c='-';
     890:	c4 01       	movw	r24, r8
     892:	0e 94 df 03 	call	0x7be	; 0x7be <ds18b20_GetSign>
     896:	81 11       	cpse	r24, r1
     898:	02 c0       	rjmp	.+4      	; 0x89e <main+0xaa>
				else c='+';
     89a:	cb e2       	ldi	r28, 0x2B	; 43
     89c:	01 c0       	rjmp	.+2      	; 0x8a0 <main+0xac>
				ds18b20_ReadStratcpad(NO_SKIP_ROM, dt, i);
// 				sprintf(str1,"STRATHPAD %d: %02X %02X %02X %02X %02X %02X %02X %02X %02X; ",
// 				i, dt[0], dt[1], dt[2], dt[3], dt[4], dt[5], dt[6], dt[7], dt[8]);
// 				for (a=0;a<strlen(str1);a++)USART_Transmit(str1[a]);
				raw_temper = ((uint16_t)dt[1]<<8)|dt[0];
				if(ds18b20_GetSign(raw_temper)) c='-';
     89e:	cd e2       	ldi	r28, 0x2D	; 45
				else c='+';
// 				float t=ds18b20_Convert(raw_temper);
				temper_H = (raw_temper&0x0fff)>>4;
     8a0:	8f e0       	ldi	r24, 0x0F	; 15
     8a2:	98 22       	and	r9, r24
     8a4:	96 94       	lsr	r9
     8a6:	87 94       	ror	r8
     8a8:	96 94       	lsr	r9
     8aa:	87 94       	ror	r8
     8ac:	96 94       	lsr	r9
     8ae:	87 94       	ror	r8
     8b0:	96 94       	lsr	r9
     8b2:	87 94       	ror	r8
// 				temper_L = (raw_temper&0x000f)*625;
				if (i==1){
     8b4:	91 e0       	ldi	r25, 0x01	; 1
     8b6:	b9 12       	cpse	r11, r25
     8b8:	09 c0       	rjmp	.+18     	; 0x8cc <main+0xd8>
					command_write(CMD_PAGE+1,3);
     8ba:	63 e0       	ldi	r22, 0x03	; 3
     8bc:	89 eb       	ldi	r24, 0xB9	; 185
     8be:	0e 94 12 05 	call	0xa24	; 0xa24 <command_write>
					command_write(CMD_COLUMN+1,3);
     8c2:	63 e0       	ldi	r22, 0x03	; 3
     8c4:	84 e1       	ldi	r24, 0x14	; 20
     8c6:	0e 94 12 05 	call	0xa24	; 0xa24 <command_write>
     8ca:	1a c0       	rjmp	.+52     	; 0x900 <__stack+0x1>
				}
				if (i==3){
     8cc:	23 e0       	ldi	r18, 0x03	; 3
     8ce:	b2 12       	cpse	r11, r18
     8d0:	0a c0       	rjmp	.+20     	; 0x8e6 <main+0xf2>
					command_write(CMD_PAGE+2,3);
     8d2:	63 e0       	ldi	r22, 0x03	; 3
     8d4:	8a eb       	ldi	r24, 0xBA	; 186
     8d6:	0e 94 12 05 	call	0xa24	; 0xa24 <command_write>
					command_write(CMD_COLUMN+1,3);
     8da:	63 e0       	ldi	r22, 0x03	; 3
     8dc:	84 e1       	ldi	r24, 0x14	; 20
     8de:	0e 94 12 05 	call	0xa24	; 0xa24 <command_write>
					command_write(CMD_PAGE+3,3);
					command_write(CMD_COLUMN+1,3);
				}
				uint8_t chip;
				if(i==2||i==4||i==6){chip=2;command_write(CMD_COLUMN+18,2);}
				else chip=1;
     8e2:	d1 e0       	ldi	r29, 0x01	; 1
     8e4:	1b c0       	rjmp	.+54     	; 0x91c <__stack+0x1d>
					command_write(CMD_COLUMN+1,3);
				}
				if (i==3){
					command_write(CMD_PAGE+2,3);
					command_write(CMD_COLUMN+1,3);
					}if (i==5){
     8e6:	85 e0       	ldi	r24, 0x05	; 5
     8e8:	b8 12       	cpse	r11, r24
     8ea:	0a c0       	rjmp	.+20     	; 0x900 <__stack+0x1>
					command_write(CMD_PAGE+3,3);
     8ec:	63 e0       	ldi	r22, 0x03	; 3
     8ee:	8b eb       	ldi	r24, 0xBB	; 187
     8f0:	0e 94 12 05 	call	0xa24	; 0xa24 <command_write>
					command_write(CMD_COLUMN+1,3);
     8f4:	63 e0       	ldi	r22, 0x03	; 3
     8f6:	84 e1       	ldi	r24, 0x14	; 20
     8f8:	0e 94 12 05 	call	0xa24	; 0xa24 <command_write>
				}
				uint8_t chip;
				if(i==2||i==4||i==6){chip=2;command_write(CMD_COLUMN+18,2);}
				else chip=1;
     8fc:	d1 e0       	ldi	r29, 0x01	; 1
     8fe:	0e c0       	rjmp	.+28     	; 0x91c <__stack+0x1d>
					}if (i==5){
					command_write(CMD_PAGE+3,3);
					command_write(CMD_COLUMN+1,3);
				}
				uint8_t chip;
				if(i==2||i==4||i==6){chip=2;command_write(CMD_COLUMN+18,2);}
     900:	8b 2d       	mov	r24, r11
     902:	8b 7f       	andi	r24, 0xFB	; 251
     904:	82 30       	cpi	r24, 0x02	; 2
     906:	19 f0       	breq	.+6      	; 0x90e <__stack+0xf>
     908:	94 e0       	ldi	r25, 0x04	; 4
     90a:	b9 12       	cpse	r11, r25
     90c:	06 c0       	rjmp	.+12     	; 0x91a <__stack+0x1b>
     90e:	62 e0       	ldi	r22, 0x02	; 2
     910:	85 e2       	ldi	r24, 0x25	; 37
     912:	0e 94 12 05 	call	0xa24	; 0xa24 <command_write>
     916:	d2 e0       	ldi	r29, 0x02	; 2
     918:	01 c0       	rjmp	.+2      	; 0x91c <__stack+0x1d>
				else chip=1;
     91a:	d1 e0       	ldi	r29, 0x01	; 1
				sprintf(str1,"%d=%c%d", i, c, temper_H);
     91c:	9f 92       	push	r9
     91e:	8f 92       	push	r8
     920:	1f 92       	push	r1
     922:	cf 93       	push	r28
     924:	1f 92       	push	r1
     926:	bf 92       	push	r11
     928:	ff 92       	push	r15
     92a:	ef 92       	push	r14
     92c:	1f 93       	push	r17
     92e:	0f 93       	push	r16
     930:	0e 94 5f 0d 	call	0x1abe	; 0x1abe <sprintf>
				for (a=0;a<strlen(str1);a++)number_write(str1[a],chip);
     934:	8d b7       	in	r24, 0x3d	; 61
     936:	9e b7       	in	r25, 0x3e	; 62
     938:	0a 96       	adiw	r24, 0x0a	; 10
     93a:	0f b6       	in	r0, 0x3f	; 63
     93c:	f8 94       	cli
     93e:	9e bf       	out	0x3e, r25	; 62
     940:	0f be       	out	0x3f, r0	; 63
     942:	8d bf       	out	0x3d, r24	; 61
     944:	c0 e0       	ldi	r28, 0x00	; 0
     946:	09 c0       	rjmp	.+18     	; 0x95a <__stack+0x5b>
     948:	ec 2f       	mov	r30, r28
     94a:	f0 e0       	ldi	r31, 0x00	; 0
     94c:	ee 5e       	subi	r30, 0xEE	; 238
     94e:	fc 4f       	sbci	r31, 0xFC	; 252
     950:	6d 2f       	mov	r22, r29
     952:	80 81       	ld	r24, Z
     954:	0e 94 97 05 	call	0xb2e	; 0xb2e <number_write>
     958:	cf 5f       	subi	r28, 0xFF	; 255
     95a:	f8 01       	movw	r30, r16
     95c:	01 90       	ld	r0, Z+
     95e:	00 20       	and	r0, r0
     960:	e9 f7       	brne	.-6      	; 0x95c <__stack+0x5d>
     962:	31 97       	sbiw	r30, 0x01	; 1
     964:	e2 51       	subi	r30, 0x12	; 18
     966:	f3 40       	sbci	r31, 0x03	; 3
     968:	8c 2f       	mov	r24, r28
     96a:	90 e0       	ldi	r25, 0x00	; 0
     96c:	8e 17       	cp	r24, r30
     96e:	9f 07       	cpc	r25, r31
     970:	58 f3       	brcs	.-42     	; 0x948 <__stack+0x49>
		{
			ds18b20_MeasureTemperCmd(SKIP_ROM, 0);
		} 
		else
		{
			for(i=1;i<=Dev_Cnt;i++)
     972:	b3 94       	inc	r11
     974:	80 91 11 03 	lds	r24, 0x0311	; 0x800311 <Dev_Cnt>
     978:	8b 15       	cp	r24, r11
     97a:	08 f0       	brcs	.+2      	; 0x97e <__stack+0x7f>
     97c:	7b cf       	rjmp	.-266    	; 0x874 <main+0x80>
// 				for (a=0;a<strlen(str1);a++)USART_Transmit(str1[a]);
			}			
		}	
		
//		n=(float)adc_value*5000/1024;
		Cppm=(adc_value-82)*15.167236;			//4.854*3.125
     97e:	60 91 fc 02 	lds	r22, 0x02FC	; 0x8002fc <adc_value>
     982:	70 91 fd 02 	lds	r23, 0x02FD	; 0x8002fd <adc_value+0x1>
     986:	62 55       	subi	r22, 0x52	; 82
     988:	71 09       	sbc	r23, r1
     98a:	80 e0       	ldi	r24, 0x00	; 0
     98c:	90 e0       	ldi	r25, 0x00	; 0
     98e:	0e 94 80 07 	call	0xf00	; 0xf00 <__floatunsisf>
     992:	20 e0       	ldi	r18, 0x00	; 0
     994:	3d ea       	ldi	r19, 0xAD	; 173
     996:	42 e7       	ldi	r20, 0x72	; 114
     998:	51 e4       	ldi	r21, 0x41	; 65
     99a:	0e 94 0e 08 	call	0x101c	; 0x101c <__mulsf3>
     99e:	60 93 b8 02 	sts	0x02B8, r22	; 0x8002b8 <Cppm>
     9a2:	70 93 b9 02 	sts	0x02B9, r23	; 0x8002b9 <Cppm+0x1>
     9a6:	80 93 ba 02 	sts	0x02BA, r24	; 0x8002ba <Cppm+0x2>
     9aa:	90 93 bb 02 	sts	0x02BB, r25	; 0x8002bb <Cppm+0x3>
		dht11_start();
     9ae:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <dht11_start>
		sprintf(str1,"T=%d  H=%d ADC=%.f tim=%d\r\n", dht11_temp()+3, dht11_humid(), Cppm, b);
     9b2:	a0 90 0f 03 	lds	r10, 0x030F	; 0x80030f <b>
     9b6:	70 90 10 03 	lds	r7, 0x0310	; 0x800310 <b+0x1>
     9ba:	d0 91 b8 02 	lds	r29, 0x02B8	; 0x8002b8 <Cppm>
     9be:	b0 90 b9 02 	lds	r11, 0x02B9	; 0x8002b9 <Cppm+0x1>
     9c2:	90 90 ba 02 	lds	r9, 0x02BA	; 0x8002ba <Cppm+0x2>
     9c6:	80 90 bb 02 	lds	r8, 0x02BB	; 0x8002bb <Cppm+0x3>
     9ca:	0e 94 c3 01 	call	0x386	; 0x386 <dht11_humid>
     9ce:	c8 2f       	mov	r28, r24
     9d0:	0e 94 c0 01 	call	0x380	; 0x380 <dht11_temp>
     9d4:	7f 92       	push	r7
     9d6:	af 92       	push	r10
     9d8:	8f 92       	push	r8
     9da:	9f 92       	push	r9
     9dc:	bf 92       	push	r11
     9de:	df 93       	push	r29
     9e0:	1f 92       	push	r1
     9e2:	cf 93       	push	r28
     9e4:	90 e0       	ldi	r25, 0x00	; 0
     9e6:	03 96       	adiw	r24, 0x03	; 3
     9e8:	9f 93       	push	r25
     9ea:	8f 93       	push	r24
     9ec:	df 92       	push	r13
     9ee:	cf 92       	push	r12
     9f0:	1f 93       	push	r17
     9f2:	0f 93       	push	r16
     9f4:	0e 94 5f 0d 	call	0x1abe	; 0x1abe <sprintf>
// 		for (a=0;a<strlen(str1);a++)USART_Transmit(str1[a]);
		mg12232_string_write(str1, 0);
     9f8:	60 e0       	ldi	r22, 0x00	; 0
     9fa:	c8 01       	movw	r24, r16
     9fc:	0e 94 f1 06 	call	0xde2	; 0xde2 <mg12232_string_write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     a00:	9f ef       	ldi	r25, 0xFF	; 255
     a02:	2b e7       	ldi	r18, 0x7B	; 123
     a04:	82 e9       	ldi	r24, 0x92	; 146
     a06:	91 50       	subi	r25, 0x01	; 1
     a08:	20 40       	sbci	r18, 0x00	; 0
     a0a:	80 40       	sbci	r24, 0x00	; 0
     a0c:	e1 f7       	brne	.-8      	; 0xa06 <__stack+0x107>
     a0e:	00 c0       	rjmp	.+0      	; 0xa10 <__stack+0x111>
     a10:	00 00       	nop
     a12:	8d b7       	in	r24, 0x3d	; 61
     a14:	9e b7       	in	r25, 0x3e	; 62
     a16:	0e 96       	adiw	r24, 0x0e	; 14
     a18:	0f b6       	in	r0, 0x3f	; 63
     a1a:	f8 94       	cli
     a1c:	9e bf       	out	0x3e, r25	; 62
     a1e:	0f be       	out	0x3f, r0	; 63
     a20:	8d bf       	out	0x3d, r24	; 61
     a22:	04 cf       	rjmp	.-504    	; 0x82c <main+0x38>

00000a24 <command_write>:
	command_write(CMD_COLUMN+0,3);
	command_write(CMD_START_LINE+0,3);
}

void command_write(uint8_t data, uint8_t chip){
	cli();
     a24:	f8 94       	cli
	DATA_DDR=0xff;
     a26:	9f ef       	ldi	r25, 0xFF	; 255
     a28:	9a b9       	out	0x0a, r25	; 10
	DATA_PORT=data;
     a2a:	8b b9       	out	0x0b, r24	; 11
	A0_PORT &=~(1<<A0_PIN_NUM);
     a2c:	2a 98       	cbi	0x05, 2	; 5
	if(chip&1) CS1_PORT |=(1<<CS1_PIN_NUM);
     a2e:	60 fd       	sbrc	r22, 0
     a30:	28 9a       	sbi	0x05, 0	; 5
	if(chip&2) CS2_PORT |=(1<<CS2_PIN_NUM);
     a32:	61 fd       	sbrc	r22, 1
     a34:	29 9a       	sbi	0x05, 1	; 5
	CS1_PORT &=~((1<<CS1_PIN_NUM)|(1<<CS2_PIN_NUM));
     a36:	85 b1       	in	r24, 0x05	; 5
     a38:	8c 7f       	andi	r24, 0xFC	; 252
     a3a:	85 b9       	out	0x05, r24	; 5
	DATA_PORT=0;
     a3c:	1b b8       	out	0x0b, r1	; 11
	DATA_DDR=0;
     a3e:	1a b8       	out	0x0a, r1	; 10
	sei();
     a40:	78 94       	sei
     a42:	08 95       	ret

00000a44 <data_write>:
}

void data_write(uint8_t data, uint8_t chip){
	cli();
     a44:	f8 94       	cli
	DATA_DDR=0xff;
     a46:	9f ef       	ldi	r25, 0xFF	; 255
     a48:	9a b9       	out	0x0a, r25	; 10
	DATA_PORT=data;
     a4a:	8b b9       	out	0x0b, r24	; 11
	A0_PORT |=(1<<A0_PIN_NUM);
     a4c:	2a 9a       	sbi	0x05, 2	; 5
	if(chip&1) CS1_PORT |=(1<<CS1_PIN_NUM);
     a4e:	60 fd       	sbrc	r22, 0
     a50:	28 9a       	sbi	0x05, 0	; 5
	if(chip&2) CS2_PORT |=(1<<CS2_PIN_NUM);
     a52:	61 fd       	sbrc	r22, 1
     a54:	29 9a       	sbi	0x05, 1	; 5
	CS1_PORT &= ~((1 << CS1_PIN_NUM)|(1 << CS2_PIN_NUM));
     a56:	85 b1       	in	r24, 0x05	; 5
     a58:	8c 7f       	andi	r24, 0xFC	; 252
     a5a:	85 b9       	out	0x05, r24	; 5
	DATA_PORT=0;
     a5c:	1b b8       	out	0x0b, r1	; 11
	DATA_DDR=0;
     a5e:	1a b8       	out	0x0a, r1	; 10
	sei();
     a60:	78 94       	sei
     a62:	08 95       	ret

00000a64 <clear_lcd>:
}
void clear_lcd(void){
     a64:	cf 93       	push	r28
     a66:	df 93       	push	r29
     a68:	d8 eb       	ldi	r29, 0xB8	; 184
	for (uint8_t page = 0; page < 4; page++) {
		command_write(CMD_PAGE + page, 3);
     a6a:	63 e0       	ldi	r22, 0x03	; 3
     a6c:	8d 2f       	mov	r24, r29
     a6e:	0e 94 12 05 	call	0xa24	; 0xa24 <command_write>
		command_write(CMD_COLUMN + 0, 3);
     a72:	63 e0       	ldi	r22, 0x03	; 3
     a74:	83 e1       	ldi	r24, 0x13	; 19
     a76:	0e 94 12 05 	call	0xa24	; 0xa24 <command_write>
     a7a:	cd e3       	ldi	r28, 0x3D	; 61
		for (uint8_t x = 0; x < 61; x++) {
			data_write(0, 3);
     a7c:	63 e0       	ldi	r22, 0x03	; 3
     a7e:	80 e0       	ldi	r24, 0x00	; 0
     a80:	0e 94 22 05 	call	0xa44	; 0xa44 <data_write>
     a84:	c1 50       	subi	r28, 0x01	; 1
}
void clear_lcd(void){
	for (uint8_t page = 0; page < 4; page++) {
		command_write(CMD_PAGE + page, 3);
		command_write(CMD_COLUMN + 0, 3);
		for (uint8_t x = 0; x < 61; x++) {
     a86:	d1 f7       	brne	.-12     	; 0xa7c <clear_lcd+0x18>
     a88:	df 5f       	subi	r29, 0xFF	; 255
	DATA_PORT=0;
	DATA_DDR=0;
	sei();
}
void clear_lcd(void){
	for (uint8_t page = 0; page < 4; page++) {
     a8a:	dc 3b       	cpi	r29, 0xBC	; 188
     a8c:	71 f7       	brne	.-36     	; 0xa6a <clear_lcd+0x6>
		command_write(CMD_COLUMN + 0, 3);
		for (uint8_t x = 0; x < 61; x++) {
			data_write(0, 3);
		}
	}
}
     a8e:	df 91       	pop	r29
     a90:	cf 91       	pop	r28
     a92:	08 95       	ret

00000a94 <mg12232_init>:
#include "mg12232.h"


void mg12232_init(void){
	DATA_DDR= 0xff;
     a94:	8f ef       	ldi	r24, 0xFF	; 255
     a96:	8a b9       	out	0x0a, r24	; 10
	DATA_PORT=0xff;
     a98:	8b b9       	out	0x0b, r24	; 11
	DDRB|=0x07;
     a9a:	84 b1       	in	r24, 0x04	; 4
     a9c:	87 60       	ori	r24, 0x07	; 7
     a9e:	84 b9       	out	0x04, r24	; 4
	PORTB|=0x07;
     aa0:	85 b1       	in	r24, 0x05	; 5
     aa2:	87 60       	ori	r24, 0x07	; 7
     aa4:	85 b9       	out	0x05, r24	; 5
	PORTB|=0x04;
     aa6:	2a 9a       	sbi	0x05, 2	; 5
	PORTB|=0x07;
     aa8:	85 b1       	in	r24, 0x05	; 5
     aaa:	87 60       	ori	r24, 0x07	; 7
     aac:	85 b9       	out	0x05, r24	; 5
	PORTB|=0x04;
     aae:	2a 9a       	sbi	0x05, 2	; 5
	PORTB|=0x07;
     ab0:	85 b1       	in	r24, 0x05	; 5
     ab2:	87 60       	ori	r24, 0x07	; 7
     ab4:	85 b9       	out	0x05, r24	; 5
	PORTB|=0x00;
     ab6:	85 b1       	in	r24, 0x05	; 5
     ab8:	85 b9       	out	0x05, r24	; 5
	command_write(CMD_RESET,3);
     aba:	63 e0       	ldi	r22, 0x03	; 3
     abc:	82 ee       	ldi	r24, 0xE2	; 226
     abe:	0e 94 12 05 	call	0xa24	; 0xa24 <command_write>
	command_write(CMD_DUTY_CYCLE_32,3);
     ac2:	63 e0       	ldi	r22, 0x03	; 3
     ac4:	89 ea       	ldi	r24, 0xA9	; 169
     ac6:	0e 94 12 05 	call	0xa24	; 0xa24 <command_write>
	command_write(CMD_STATIC_DRIVE_OFF,3);
     aca:	63 e0       	ldi	r22, 0x03	; 3
     acc:	84 ea       	ldi	r24, 0xA4	; 164
     ace:	0e 94 12 05 	call	0xa24	; 0xa24 <command_write>
	command_write(CMD_ADC_CCW,3);
     ad2:	63 e0       	ldi	r22, 0x03	; 3
     ad4:	81 ea       	ldi	r24, 0xA1	; 161
     ad6:	0e 94 12 05 	call	0xa24	; 0xa24 <command_write>
	command_write(CMD_DISPLAY_ON,3);
     ada:	63 e0       	ldi	r22, 0x03	; 3
     adc:	8f ea       	ldi	r24, 0xAF	; 175
     ade:	0e 94 12 05 	call	0xa24	; 0xa24 <command_write>
	clear_lcd();
     ae2:	0e 94 32 05 	call	0xa64	; 0xa64 <clear_lcd>
	command_write(CMD_PAGE+0,3);
     ae6:	63 e0       	ldi	r22, 0x03	; 3
     ae8:	88 eb       	ldi	r24, 0xB8	; 184
     aea:	0e 94 12 05 	call	0xa24	; 0xa24 <command_write>
	command_write(CMD_COLUMN+0,3);
     aee:	63 e0       	ldi	r22, 0x03	; 3
     af0:	83 e1       	ldi	r24, 0x13	; 19
     af2:	0e 94 12 05 	call	0xa24	; 0xa24 <command_write>
	command_write(CMD_START_LINE+0,3);
     af6:	63 e0       	ldi	r22, 0x03	; 3
     af8:	8f ed       	ldi	r24, 0xDF	; 223
     afa:	0e 94 12 05 	call	0xa24	; 0xa24 <command_write>
     afe:	08 95       	ret

00000b00 <simbol_write>:
		for (uint8_t x = 0; x < 61; x++) {
			data_write(0, 3);
		}
	}
}
void simbol_write(unsigned char simbol[], uint8_t chip){
     b00:	ff 92       	push	r15
     b02:	0f 93       	push	r16
     b04:	1f 93       	push	r17
     b06:	cf 93       	push	r28
     b08:	df 93       	push	r29
     b0a:	f6 2e       	mov	r15, r22
     b0c:	ec 01       	movw	r28, r24
     b0e:	8c 01       	movw	r16, r24
     b10:	0a 5f       	subi	r16, 0xFA	; 250
     b12:	1f 4f       	sbci	r17, 0xFF	; 255
	for (unsigned char a=0; a<6;a++)
	{
		data_write(simbol[a],chip);
     b14:	6f 2d       	mov	r22, r15
     b16:	89 91       	ld	r24, Y+
     b18:	0e 94 22 05 	call	0xa44	; 0xa44 <data_write>
			data_write(0, 3);
		}
	}
}
void simbol_write(unsigned char simbol[], uint8_t chip){
	for (unsigned char a=0; a<6;a++)
     b1c:	c0 17       	cp	r28, r16
     b1e:	d1 07       	cpc	r29, r17
     b20:	c9 f7       	brne	.-14     	; 0xb14 <simbol_write+0x14>
	{
		data_write(simbol[a],chip);
	}
}
     b22:	df 91       	pop	r29
     b24:	cf 91       	pop	r28
     b26:	1f 91       	pop	r17
     b28:	0f 91       	pop	r16
     b2a:	ff 90       	pop	r15
     b2c:	08 95       	ret

00000b2e <number_write>:
	{0b00000000, 0b00001000, 0b00001000, 0b00001000, 0b00000000, 0x0},	//-
	{0b00000000, 0b00001000, 0b00011100, 0b00001000, 0b00000000, 0x0}		//+
};

void number_write(char t, uint8_t chip){
	switch(t){
     b2e:	90 e0       	ldi	r25, 0x00	; 0
     b30:	fc 01       	movw	r30, r24
     b32:	b0 97       	sbiw	r30, 0x20	; 32
     b34:	eb 35       	cpi	r30, 0x5B	; 91
     b36:	f1 05       	cpc	r31, r1
     b38:	08 f0       	brcs	.+2      	; 0xb3c <number_write+0xe>
     b3a:	52 c1       	rjmp	.+676    	; 0xde0 <number_write+0x2b2>
     b3c:	ec 5c       	subi	r30, 0xCC	; 204
     b3e:	ff 4f       	sbci	r31, 0xFF	; 255
     b40:	0c 94 f8 0b 	jmp	0x17f0	; 0x17f0 <__tablejump2__>
		case '0' : simbol_write(numbers[0],chip);break;
     b44:	80 e0       	ldi	r24, 0x00	; 0
     b46:	91 e0       	ldi	r25, 0x01	; 1
     b48:	0e 94 80 05 	call	0xb00	; 0xb00 <simbol_write>
     b4c:	08 95       	ret
		case '1' : simbol_write(numbers[1],chip);break;
     b4e:	86 e0       	ldi	r24, 0x06	; 6
     b50:	91 e0       	ldi	r25, 0x01	; 1
     b52:	0e 94 80 05 	call	0xb00	; 0xb00 <simbol_write>
     b56:	08 95       	ret
		case '2' : simbol_write(numbers[2],chip);break;
     b58:	8c e0       	ldi	r24, 0x0C	; 12
     b5a:	91 e0       	ldi	r25, 0x01	; 1
     b5c:	0e 94 80 05 	call	0xb00	; 0xb00 <simbol_write>
     b60:	08 95       	ret
		case '3' : simbol_write(numbers[3],chip);break;
     b62:	82 e1       	ldi	r24, 0x12	; 18
     b64:	91 e0       	ldi	r25, 0x01	; 1
     b66:	0e 94 80 05 	call	0xb00	; 0xb00 <simbol_write>
     b6a:	08 95       	ret
		case '4' : simbol_write(numbers[4],chip);break;
     b6c:	88 e1       	ldi	r24, 0x18	; 24
     b6e:	91 e0       	ldi	r25, 0x01	; 1
     b70:	0e 94 80 05 	call	0xb00	; 0xb00 <simbol_write>
     b74:	08 95       	ret
		case '5' : simbol_write(numbers[5],chip);break;
     b76:	8e e1       	ldi	r24, 0x1E	; 30
     b78:	91 e0       	ldi	r25, 0x01	; 1
     b7a:	0e 94 80 05 	call	0xb00	; 0xb00 <simbol_write>
     b7e:	08 95       	ret
		case '6' : simbol_write(numbers[6],chip);break;
     b80:	84 e2       	ldi	r24, 0x24	; 36
     b82:	91 e0       	ldi	r25, 0x01	; 1
     b84:	0e 94 80 05 	call	0xb00	; 0xb00 <simbol_write>
     b88:	08 95       	ret
		case '7' : simbol_write(numbers[7],chip);break;
     b8a:	8a e2       	ldi	r24, 0x2A	; 42
     b8c:	91 e0       	ldi	r25, 0x01	; 1
     b8e:	0e 94 80 05 	call	0xb00	; 0xb00 <simbol_write>
     b92:	08 95       	ret
		case '8' : simbol_write(numbers[8],chip);break;
     b94:	80 e3       	ldi	r24, 0x30	; 48
     b96:	91 e0       	ldi	r25, 0x01	; 1
     b98:	0e 94 80 05 	call	0xb00	; 0xb00 <simbol_write>
     b9c:	08 95       	ret
		case '9' : simbol_write(numbers[9],chip);break;
     b9e:	86 e3       	ldi	r24, 0x36	; 54
     ba0:	91 e0       	ldi	r25, 0x01	; 1
     ba2:	0e 94 80 05 	call	0xb00	; 0xb00 <simbol_write>
     ba6:	08 95       	ret
		case '=' : simbol_write(numbers[10],chip);break;
     ba8:	8c e3       	ldi	r24, 0x3C	; 60
     baa:	91 e0       	ldi	r25, 0x01	; 1
     bac:	0e 94 80 05 	call	0xb00	; 0xb00 <simbol_write>
     bb0:	08 95       	ret
		case 'A' : simbol_write(numbers[11],chip);break;
     bb2:	82 e4       	ldi	r24, 0x42	; 66
     bb4:	91 e0       	ldi	r25, 0x01	; 1
     bb6:	0e 94 80 05 	call	0xb00	; 0xb00 <simbol_write>
     bba:	08 95       	ret
		case 'B' : simbol_write(numbers[12],chip);break;
     bbc:	88 e4       	ldi	r24, 0x48	; 72
     bbe:	91 e0       	ldi	r25, 0x01	; 1
     bc0:	0e 94 80 05 	call	0xb00	; 0xb00 <simbol_write>
     bc4:	08 95       	ret
		case 'C' : simbol_write(numbers[13],chip);break;
     bc6:	8e e4       	ldi	r24, 0x4E	; 78
     bc8:	91 e0       	ldi	r25, 0x01	; 1
     bca:	0e 94 80 05 	call	0xb00	; 0xb00 <simbol_write>
     bce:	08 95       	ret
		case 'D' : simbol_write(numbers[14],chip);break;
     bd0:	84 e5       	ldi	r24, 0x54	; 84
     bd2:	91 e0       	ldi	r25, 0x01	; 1
     bd4:	0e 94 80 05 	call	0xb00	; 0xb00 <simbol_write>
     bd8:	08 95       	ret
		case 'E' : simbol_write(numbers[15],chip);break;
     bda:	8a e5       	ldi	r24, 0x5A	; 90
     bdc:	91 e0       	ldi	r25, 0x01	; 1
     bde:	0e 94 80 05 	call	0xb00	; 0xb00 <simbol_write>
     be2:	08 95       	ret
		case 'F' : simbol_write(numbers[16],chip);break;
     be4:	80 e6       	ldi	r24, 0x60	; 96
     be6:	91 e0       	ldi	r25, 0x01	; 1
     be8:	0e 94 80 05 	call	0xb00	; 0xb00 <simbol_write>
     bec:	08 95       	ret
		case 'G' : simbol_write(numbers[17],chip);break;
     bee:	86 e6       	ldi	r24, 0x66	; 102
     bf0:	91 e0       	ldi	r25, 0x01	; 1
     bf2:	0e 94 80 05 	call	0xb00	; 0xb00 <simbol_write>
     bf6:	08 95       	ret
		case 'H' : simbol_write(numbers[18],chip);break;
     bf8:	8c e6       	ldi	r24, 0x6C	; 108
     bfa:	91 e0       	ldi	r25, 0x01	; 1
     bfc:	0e 94 80 05 	call	0xb00	; 0xb00 <simbol_write>
     c00:	08 95       	ret
		case 'I' : simbol_write(numbers[19],chip);break;
     c02:	82 e7       	ldi	r24, 0x72	; 114
     c04:	91 e0       	ldi	r25, 0x01	; 1
     c06:	0e 94 80 05 	call	0xb00	; 0xb00 <simbol_write>
     c0a:	08 95       	ret
		case 'J' : simbol_write(numbers[20],chip);break;
     c0c:	88 e7       	ldi	r24, 0x78	; 120
     c0e:	91 e0       	ldi	r25, 0x01	; 1
     c10:	0e 94 80 05 	call	0xb00	; 0xb00 <simbol_write>
     c14:	08 95       	ret
		case 'K' : simbol_write(numbers[21],chip);break;
     c16:	8e e7       	ldi	r24, 0x7E	; 126
     c18:	91 e0       	ldi	r25, 0x01	; 1
     c1a:	0e 94 80 05 	call	0xb00	; 0xb00 <simbol_write>
     c1e:	08 95       	ret
		case 'L' : simbol_write(numbers[22],chip);break;
     c20:	84 e8       	ldi	r24, 0x84	; 132
     c22:	91 e0       	ldi	r25, 0x01	; 1
     c24:	0e 94 80 05 	call	0xb00	; 0xb00 <simbol_write>
     c28:	08 95       	ret
		case 'M' : simbol_write(numbers[23],chip);break;
     c2a:	8a e8       	ldi	r24, 0x8A	; 138
     c2c:	91 e0       	ldi	r25, 0x01	; 1
     c2e:	0e 94 80 05 	call	0xb00	; 0xb00 <simbol_write>
     c32:	08 95       	ret
		case 'N' : simbol_write(numbers[24],chip);break;
     c34:	80 e9       	ldi	r24, 0x90	; 144
     c36:	91 e0       	ldi	r25, 0x01	; 1
     c38:	0e 94 80 05 	call	0xb00	; 0xb00 <simbol_write>
     c3c:	08 95       	ret
		case 'O' : simbol_write(numbers[25],chip);break;
     c3e:	86 e9       	ldi	r24, 0x96	; 150
     c40:	91 e0       	ldi	r25, 0x01	; 1
     c42:	0e 94 80 05 	call	0xb00	; 0xb00 <simbol_write>
     c46:	08 95       	ret
		case 'P' : simbol_write(numbers[26],chip);break;
     c48:	8c e9       	ldi	r24, 0x9C	; 156
     c4a:	91 e0       	ldi	r25, 0x01	; 1
     c4c:	0e 94 80 05 	call	0xb00	; 0xb00 <simbol_write>
     c50:	08 95       	ret
		case 'Q' : simbol_write(numbers[27],chip);break;
     c52:	82 ea       	ldi	r24, 0xA2	; 162
     c54:	91 e0       	ldi	r25, 0x01	; 1
     c56:	0e 94 80 05 	call	0xb00	; 0xb00 <simbol_write>
     c5a:	08 95       	ret
		case 'R' : simbol_write(numbers[28],chip);break;
     c5c:	88 ea       	ldi	r24, 0xA8	; 168
     c5e:	91 e0       	ldi	r25, 0x01	; 1
     c60:	0e 94 80 05 	call	0xb00	; 0xb00 <simbol_write>
     c64:	08 95       	ret
		case 'S' : simbol_write(numbers[29],chip);break;
     c66:	8e ea       	ldi	r24, 0xAE	; 174
     c68:	91 e0       	ldi	r25, 0x01	; 1
     c6a:	0e 94 80 05 	call	0xb00	; 0xb00 <simbol_write>
     c6e:	08 95       	ret
		case 'T' : simbol_write(numbers[30],chip);break;
     c70:	84 eb       	ldi	r24, 0xB4	; 180
     c72:	91 e0       	ldi	r25, 0x01	; 1
     c74:	0e 94 80 05 	call	0xb00	; 0xb00 <simbol_write>
     c78:	08 95       	ret
		case 'U' : simbol_write(numbers[31],chip);break;
     c7a:	8a eb       	ldi	r24, 0xBA	; 186
     c7c:	91 e0       	ldi	r25, 0x01	; 1
     c7e:	0e 94 80 05 	call	0xb00	; 0xb00 <simbol_write>
     c82:	08 95       	ret
		case 'V' : simbol_write(numbers[32],chip);break;
     c84:	80 ec       	ldi	r24, 0xC0	; 192
     c86:	91 e0       	ldi	r25, 0x01	; 1
     c88:	0e 94 80 05 	call	0xb00	; 0xb00 <simbol_write>
     c8c:	08 95       	ret
		case 'W' : simbol_write(numbers[33],chip);break;
     c8e:	86 ec       	ldi	r24, 0xC6	; 198
     c90:	91 e0       	ldi	r25, 0x01	; 1
     c92:	0e 94 80 05 	call	0xb00	; 0xb00 <simbol_write>
     c96:	08 95       	ret
		case 'X' : simbol_write(numbers[34],chip);break;
     c98:	8c ec       	ldi	r24, 0xCC	; 204
     c9a:	91 e0       	ldi	r25, 0x01	; 1
     c9c:	0e 94 80 05 	call	0xb00	; 0xb00 <simbol_write>
     ca0:	08 95       	ret
		case 'Y' : simbol_write(numbers[35],chip);break;
     ca2:	82 ed       	ldi	r24, 0xD2	; 210
     ca4:	91 e0       	ldi	r25, 0x01	; 1
     ca6:	0e 94 80 05 	call	0xb00	; 0xb00 <simbol_write>
     caa:	08 95       	ret
		case 'Z' : simbol_write(numbers[36],chip);break;
     cac:	88 ed       	ldi	r24, 0xD8	; 216
     cae:	91 e0       	ldi	r25, 0x01	; 1
     cb0:	0e 94 80 05 	call	0xb00	; 0xb00 <simbol_write>
     cb4:	08 95       	ret
		case 'a' : simbol_write(numbers[37],chip);break;
     cb6:	8e ed       	ldi	r24, 0xDE	; 222
     cb8:	91 e0       	ldi	r25, 0x01	; 1
     cba:	0e 94 80 05 	call	0xb00	; 0xb00 <simbol_write>
     cbe:	08 95       	ret
		case 'b' : simbol_write(numbers[38],chip);break;
     cc0:	84 ee       	ldi	r24, 0xE4	; 228
     cc2:	91 e0       	ldi	r25, 0x01	; 1
     cc4:	0e 94 80 05 	call	0xb00	; 0xb00 <simbol_write>
     cc8:	08 95       	ret
		case 'c' : simbol_write(numbers[39],chip);break;
     cca:	8a ee       	ldi	r24, 0xEA	; 234
     ccc:	91 e0       	ldi	r25, 0x01	; 1
     cce:	0e 94 80 05 	call	0xb00	; 0xb00 <simbol_write>
     cd2:	08 95       	ret
		case 'd' : simbol_write(numbers[40],chip);break;
     cd4:	80 ef       	ldi	r24, 0xF0	; 240
     cd6:	91 e0       	ldi	r25, 0x01	; 1
     cd8:	0e 94 80 05 	call	0xb00	; 0xb00 <simbol_write>
     cdc:	08 95       	ret
		case 'e' : simbol_write(numbers[41],chip);break;
     cde:	86 ef       	ldi	r24, 0xF6	; 246
     ce0:	91 e0       	ldi	r25, 0x01	; 1
     ce2:	0e 94 80 05 	call	0xb00	; 0xb00 <simbol_write>
     ce6:	08 95       	ret
		case 'f' : simbol_write(numbers[42],chip);break;
     ce8:	8c ef       	ldi	r24, 0xFC	; 252
     cea:	91 e0       	ldi	r25, 0x01	; 1
     cec:	0e 94 80 05 	call	0xb00	; 0xb00 <simbol_write>
     cf0:	08 95       	ret
		case 'g' : simbol_write(numbers[43],chip);break;
     cf2:	82 e0       	ldi	r24, 0x02	; 2
     cf4:	92 e0       	ldi	r25, 0x02	; 2
     cf6:	0e 94 80 05 	call	0xb00	; 0xb00 <simbol_write>
     cfa:	08 95       	ret
		case 'h' : simbol_write(numbers[44],chip);break;
     cfc:	88 e0       	ldi	r24, 0x08	; 8
     cfe:	92 e0       	ldi	r25, 0x02	; 2
     d00:	0e 94 80 05 	call	0xb00	; 0xb00 <simbol_write>
     d04:	08 95       	ret
		case 'i' : simbol_write(numbers[45],chip);break;
     d06:	8e e0       	ldi	r24, 0x0E	; 14
     d08:	92 e0       	ldi	r25, 0x02	; 2
     d0a:	0e 94 80 05 	call	0xb00	; 0xb00 <simbol_write>
     d0e:	08 95       	ret
		case 'j' : simbol_write(numbers[46],chip);break;
     d10:	84 e1       	ldi	r24, 0x14	; 20
     d12:	92 e0       	ldi	r25, 0x02	; 2
     d14:	0e 94 80 05 	call	0xb00	; 0xb00 <simbol_write>
     d18:	08 95       	ret
		case 'k' : simbol_write(numbers[47],chip);break;
     d1a:	8a e1       	ldi	r24, 0x1A	; 26
     d1c:	92 e0       	ldi	r25, 0x02	; 2
     d1e:	0e 94 80 05 	call	0xb00	; 0xb00 <simbol_write>
     d22:	08 95       	ret
		case 'l' : simbol_write(numbers[48],chip);break;
     d24:	80 e2       	ldi	r24, 0x20	; 32
     d26:	92 e0       	ldi	r25, 0x02	; 2
     d28:	0e 94 80 05 	call	0xb00	; 0xb00 <simbol_write>
     d2c:	08 95       	ret
		case 'm' : simbol_write(numbers[49],chip);break;
     d2e:	86 e2       	ldi	r24, 0x26	; 38
     d30:	92 e0       	ldi	r25, 0x02	; 2
     d32:	0e 94 80 05 	call	0xb00	; 0xb00 <simbol_write>
     d36:	08 95       	ret
		case 'n' : simbol_write(numbers[50],chip);break;
     d38:	8c e2       	ldi	r24, 0x2C	; 44
     d3a:	92 e0       	ldi	r25, 0x02	; 2
     d3c:	0e 94 80 05 	call	0xb00	; 0xb00 <simbol_write>
     d40:	08 95       	ret
		case 'o' : simbol_write(numbers[51],chip);break;
     d42:	82 e3       	ldi	r24, 0x32	; 50
     d44:	92 e0       	ldi	r25, 0x02	; 2
     d46:	0e 94 80 05 	call	0xb00	; 0xb00 <simbol_write>
     d4a:	08 95       	ret
		case 'p' : simbol_write(numbers[52],chip);break;
     d4c:	88 e3       	ldi	r24, 0x38	; 56
     d4e:	92 e0       	ldi	r25, 0x02	; 2
     d50:	0e 94 80 05 	call	0xb00	; 0xb00 <simbol_write>
     d54:	08 95       	ret
		case 'q' : simbol_write(numbers[53],chip);break;
     d56:	8e e3       	ldi	r24, 0x3E	; 62
     d58:	92 e0       	ldi	r25, 0x02	; 2
     d5a:	0e 94 80 05 	call	0xb00	; 0xb00 <simbol_write>
     d5e:	08 95       	ret
		case 'r' : simbol_write(numbers[54],chip);break;
     d60:	84 e4       	ldi	r24, 0x44	; 68
     d62:	92 e0       	ldi	r25, 0x02	; 2
     d64:	0e 94 80 05 	call	0xb00	; 0xb00 <simbol_write>
     d68:	08 95       	ret
		case 's' : simbol_write(numbers[55],chip);break;
     d6a:	8a e4       	ldi	r24, 0x4A	; 74
     d6c:	92 e0       	ldi	r25, 0x02	; 2
     d6e:	0e 94 80 05 	call	0xb00	; 0xb00 <simbol_write>
     d72:	08 95       	ret
		case 't' : simbol_write(numbers[56],chip);break;
     d74:	80 e5       	ldi	r24, 0x50	; 80
     d76:	92 e0       	ldi	r25, 0x02	; 2
     d78:	0e 94 80 05 	call	0xb00	; 0xb00 <simbol_write>
     d7c:	08 95       	ret
		case 'u' : simbol_write(numbers[57],chip);break;
     d7e:	86 e5       	ldi	r24, 0x56	; 86
     d80:	92 e0       	ldi	r25, 0x02	; 2
     d82:	0e 94 80 05 	call	0xb00	; 0xb00 <simbol_write>
     d86:	08 95       	ret
		case 'v' : simbol_write(numbers[58],chip);break;
     d88:	8c e5       	ldi	r24, 0x5C	; 92
     d8a:	92 e0       	ldi	r25, 0x02	; 2
     d8c:	0e 94 80 05 	call	0xb00	; 0xb00 <simbol_write>
     d90:	08 95       	ret
		case 'w' : simbol_write(numbers[59],chip);break;
     d92:	82 e6       	ldi	r24, 0x62	; 98
     d94:	92 e0       	ldi	r25, 0x02	; 2
     d96:	0e 94 80 05 	call	0xb00	; 0xb00 <simbol_write>
     d9a:	08 95       	ret
		case 'x' : simbol_write(numbers[60],chip);break;
     d9c:	88 e6       	ldi	r24, 0x68	; 104
     d9e:	92 e0       	ldi	r25, 0x02	; 2
     da0:	0e 94 80 05 	call	0xb00	; 0xb00 <simbol_write>
     da4:	08 95       	ret
		case 'y' : simbol_write(numbers[61],chip);break;
     da6:	8e e6       	ldi	r24, 0x6E	; 110
     da8:	92 e0       	ldi	r25, 0x02	; 2
     daa:	0e 94 80 05 	call	0xb00	; 0xb00 <simbol_write>
     dae:	08 95       	ret
		case 'z' : simbol_write(numbers[62],chip);break;
     db0:	84 e7       	ldi	r24, 0x74	; 116
     db2:	92 e0       	ldi	r25, 0x02	; 2
     db4:	0e 94 80 05 	call	0xb00	; 0xb00 <simbol_write>
     db8:	08 95       	ret
		case '.' : simbol_write(numbers[63],chip);break;
     dba:	8a e7       	ldi	r24, 0x7A	; 122
     dbc:	92 e0       	ldi	r25, 0x02	; 2
     dbe:	0e 94 80 05 	call	0xb00	; 0xb00 <simbol_write>
     dc2:	08 95       	ret
		case ' ' : simbol_write(numbers[64],chip);break;
     dc4:	80 e8       	ldi	r24, 0x80	; 128
     dc6:	92 e0       	ldi	r25, 0x02	; 2
     dc8:	0e 94 80 05 	call	0xb00	; 0xb00 <simbol_write>
     dcc:	08 95       	ret
		case '-' : simbol_write(numbers[65],chip);break;
     dce:	86 e8       	ldi	r24, 0x86	; 134
     dd0:	92 e0       	ldi	r25, 0x02	; 2
     dd2:	0e 94 80 05 	call	0xb00	; 0xb00 <simbol_write>
     dd6:	08 95       	ret
		case '+' : simbol_write(numbers[66],chip);break;
     dd8:	8c e8       	ldi	r24, 0x8C	; 140
     dda:	92 e0       	ldi	r25, 0x02	; 2
     ddc:	0e 94 80 05 	call	0xb00	; 0xb00 <simbol_write>
     de0:	08 95       	ret

00000de2 <mg12232_string_write>:
	for (unsigned char a=0; a<6;a++)
	{
		data_write(simbol[a],chip);
	}
}
void mg12232_string_write(char str[], uint8_t page){
     de2:	bf 92       	push	r11
     de4:	cf 92       	push	r12
     de6:	df 92       	push	r13
     de8:	ef 92       	push	r14
     dea:	ff 92       	push	r15
     dec:	0f 93       	push	r16
     dee:	1f 93       	push	r17
     df0:	cf 93       	push	r28
     df2:	df 93       	push	r29
     df4:	7c 01       	movw	r14, r24
     df6:	d6 2f       	mov	r29, r22
	uint8_t a;
	uint8_t chip;
	for (a=0;a<strlen(str);a++){		
     df8:	c0 e0       	ldi	r28, 0x00	; 0
		if (a==60){
			if (page+3>3) page = 0;
			command_write(CMD_PAGE+page+3,3);
			command_write(CMD_COLUMN+1,3);
		}
		if ((a>=10 && a<=19)||(a>=30 && a<=39)||(a>=50 && a<=59)||(a>=70 && a<=79))chip=2;
     dfa:	68 94       	set
     dfc:	dd 24       	eor	r13, r13
     dfe:	d1 f8       	bld	r13, 1
		else chip=1;
     e00:	bb 24       	eor	r11, r11
     e02:	b3 94       	inc	r11
			if (page+2>3) page = 0;
			command_write(CMD_PAGE+page+2,3);
			command_write(CMD_COLUMN+1,3);
		}
		if (a==60){
			if (page+3>3) page = 0;
     e04:	c1 2c       	mov	r12, r1
	}
}
void mg12232_string_write(char str[], uint8_t page){
	uint8_t a;
	uint8_t chip;
	for (a=0;a<strlen(str);a++){		
     e06:	65 c0       	rjmp	.+202    	; 0xed2 <mg12232_string_write+0xf0>
		if (a==0){
     e08:	c1 11       	cpse	r28, r1
     e0a:	0d c0       	rjmp	.+26     	; 0xe26 <mg12232_string_write+0x44>
			if (page>3) page = 0;
     e0c:	d4 30       	cpi	r29, 0x04	; 4
     e0e:	08 f0       	brcs	.+2      	; 0xe12 <mg12232_string_write+0x30>
     e10:	dc 2d       	mov	r29, r12
			command_write(CMD_PAGE+page,3);
     e12:	63 e0       	ldi	r22, 0x03	; 3
     e14:	88 eb       	ldi	r24, 0xB8	; 184
     e16:	8d 0f       	add	r24, r29
     e18:	0e 94 12 05 	call	0xa24	; 0xa24 <command_write>
			command_write(CMD_COLUMN+1,3);
     e1c:	63 e0       	ldi	r22, 0x03	; 3
     e1e:	84 e1       	ldi	r24, 0x14	; 20
     e20:	0e 94 12 05 	call	0xa24	; 0xa24 <command_write>
     e24:	24 c0       	rjmp	.+72     	; 0xe6e <mg12232_string_write+0x8c>
		}
		if (a==20){
     e26:	c4 31       	cpi	r28, 0x14	; 20
     e28:	81 f4       	brne	.+32     	; 0xe4a <mg12232_string_write+0x68>
			if (page+1>3) page = 0;
     e2a:	8d 2f       	mov	r24, r29
     e2c:	90 e0       	ldi	r25, 0x00	; 0
     e2e:	01 96       	adiw	r24, 0x01	; 1
     e30:	04 97       	sbiw	r24, 0x04	; 4
     e32:	0c f0       	brlt	.+2      	; 0xe36 <mg12232_string_write+0x54>
     e34:	dc 2d       	mov	r29, r12
			command_write(CMD_PAGE+page+1,3);
     e36:	63 e0       	ldi	r22, 0x03	; 3
     e38:	89 eb       	ldi	r24, 0xB9	; 185
     e3a:	8d 0f       	add	r24, r29
     e3c:	0e 94 12 05 	call	0xa24	; 0xa24 <command_write>
			command_write(CMD_COLUMN+1,3);
     e40:	63 e0       	ldi	r22, 0x03	; 3
     e42:	84 e1       	ldi	r24, 0x14	; 20
     e44:	0e 94 12 05 	call	0xa24	; 0xa24 <command_write>
     e48:	24 c0       	rjmp	.+72     	; 0xe92 <mg12232_string_write+0xb0>
		}
		if (a==40){
     e4a:	c8 32       	cpi	r28, 0x28	; 40
     e4c:	81 f4       	brne	.+32     	; 0xe6e <mg12232_string_write+0x8c>
			if (page+2>3) page = 0;
     e4e:	8d 2f       	mov	r24, r29
     e50:	90 e0       	ldi	r25, 0x00	; 0
     e52:	02 96       	adiw	r24, 0x02	; 2
     e54:	04 97       	sbiw	r24, 0x04	; 4
     e56:	0c f0       	brlt	.+2      	; 0xe5a <mg12232_string_write+0x78>
     e58:	dc 2d       	mov	r29, r12
			command_write(CMD_PAGE+page+2,3);
     e5a:	63 e0       	ldi	r22, 0x03	; 3
     e5c:	8a eb       	ldi	r24, 0xBA	; 186
     e5e:	8d 0f       	add	r24, r29
     e60:	0e 94 12 05 	call	0xa24	; 0xa24 <command_write>
			command_write(CMD_COLUMN+1,3);
     e64:	63 e0       	ldi	r22, 0x03	; 3
     e66:	84 e1       	ldi	r24, 0x14	; 20
     e68:	0e 94 12 05 	call	0xa24	; 0xa24 <command_write>
     e6c:	16 c0       	rjmp	.+44     	; 0xe9a <mg12232_string_write+0xb8>
		}
		if (a==60){
     e6e:	cc 33       	cpi	r28, 0x3C	; 60
     e70:	81 f4       	brne	.+32     	; 0xe92 <mg12232_string_write+0xb0>
			if (page+3>3) page = 0;
     e72:	8d 2f       	mov	r24, r29
     e74:	90 e0       	ldi	r25, 0x00	; 0
     e76:	03 96       	adiw	r24, 0x03	; 3
     e78:	04 97       	sbiw	r24, 0x04	; 4
     e7a:	0c f0       	brlt	.+2      	; 0xe7e <mg12232_string_write+0x9c>
     e7c:	dc 2d       	mov	r29, r12
			command_write(CMD_PAGE+page+3,3);
     e7e:	63 e0       	ldi	r22, 0x03	; 3
     e80:	8b eb       	ldi	r24, 0xBB	; 187
     e82:	8d 0f       	add	r24, r29
     e84:	0e 94 12 05 	call	0xa24	; 0xa24 <command_write>
			command_write(CMD_COLUMN+1,3);
     e88:	63 e0       	ldi	r22, 0x03	; 3
     e8a:	84 e1       	ldi	r24, 0x14	; 20
     e8c:	0e 94 12 05 	call	0xa24	; 0xa24 <command_write>
     e90:	08 c0       	rjmp	.+16     	; 0xea2 <mg12232_string_write+0xc0>
		}
		if ((a>=10 && a<=19)||(a>=30 && a<=39)||(a>=50 && a<=59)||(a>=70 && a<=79))chip=2;
     e92:	86 ef       	ldi	r24, 0xF6	; 246
     e94:	8c 0f       	add	r24, r28
     e96:	8a 30       	cpi	r24, 0x0A	; 10
     e98:	70 f0       	brcs	.+28     	; 0xeb6 <mg12232_string_write+0xd4>
     e9a:	82 ee       	ldi	r24, 0xE2	; 226
     e9c:	8c 0f       	add	r24, r28
     e9e:	8a 30       	cpi	r24, 0x0A	; 10
     ea0:	60 f0       	brcs	.+24     	; 0xeba <mg12232_string_write+0xd8>
     ea2:	8e ec       	ldi	r24, 0xCE	; 206
     ea4:	8c 0f       	add	r24, r28
     ea6:	8a 30       	cpi	r24, 0x0A	; 10
     ea8:	50 f0       	brcs	.+20     	; 0xebe <mg12232_string_write+0xdc>
     eaa:	8a eb       	ldi	r24, 0xBA	; 186
     eac:	8c 0f       	add	r24, r28
     eae:	8a 30       	cpi	r24, 0x0A	; 10
     eb0:	40 f0       	brcs	.+16     	; 0xec2 <mg12232_string_write+0xe0>
		else chip=1;
     eb2:	6b 2d       	mov	r22, r11
     eb4:	07 c0       	rjmp	.+14     	; 0xec4 <mg12232_string_write+0xe2>
		if (a==60){
			if (page+3>3) page = 0;
			command_write(CMD_PAGE+page+3,3);
			command_write(CMD_COLUMN+1,3);
		}
		if ((a>=10 && a<=19)||(a>=30 && a<=39)||(a>=50 && a<=59)||(a>=70 && a<=79))chip=2;
     eb6:	6d 2d       	mov	r22, r13
     eb8:	05 c0       	rjmp	.+10     	; 0xec4 <mg12232_string_write+0xe2>
     eba:	6d 2d       	mov	r22, r13
     ebc:	03 c0       	rjmp	.+6      	; 0xec4 <mg12232_string_write+0xe2>
     ebe:	6d 2d       	mov	r22, r13
     ec0:	01 c0       	rjmp	.+2      	; 0xec4 <mg12232_string_write+0xe2>
     ec2:	6d 2d       	mov	r22, r13
		else chip=1;
		number_write(str[a],chip);
     ec4:	f7 01       	movw	r30, r14
     ec6:	e0 0f       	add	r30, r16
     ec8:	f1 1f       	adc	r31, r17
     eca:	80 81       	ld	r24, Z
     ecc:	0e 94 97 05 	call	0xb2e	; 0xb2e <number_write>
	}
}
void mg12232_string_write(char str[], uint8_t page){
	uint8_t a;
	uint8_t chip;
	for (a=0;a<strlen(str);a++){		
     ed0:	cf 5f       	subi	r28, 0xFF	; 255
     ed2:	0c 2f       	mov	r16, r28
     ed4:	10 e0       	ldi	r17, 0x00	; 0
     ed6:	f7 01       	movw	r30, r14
     ed8:	01 90       	ld	r0, Z+
     eda:	00 20       	and	r0, r0
     edc:	e9 f7       	brne	.-6      	; 0xed8 <mg12232_string_write+0xf6>
     ede:	31 97       	sbiw	r30, 0x01	; 1
     ee0:	ee 19       	sub	r30, r14
     ee2:	ff 09       	sbc	r31, r15
     ee4:	0e 17       	cp	r16, r30
     ee6:	1f 07       	cpc	r17, r31
     ee8:	08 f4       	brcc	.+2      	; 0xeec <mg12232_string_write+0x10a>
     eea:	8e cf       	rjmp	.-228    	; 0xe08 <mg12232_string_write+0x26>
		}
		if ((a>=10 && a<=19)||(a>=30 && a<=39)||(a>=50 && a<=59)||(a>=70 && a<=79))chip=2;
		else chip=1;
		number_write(str[a],chip);
	}
}
     eec:	df 91       	pop	r29
     eee:	cf 91       	pop	r28
     ef0:	1f 91       	pop	r17
     ef2:	0f 91       	pop	r16
     ef4:	ff 90       	pop	r15
     ef6:	ef 90       	pop	r14
     ef8:	df 90       	pop	r13
     efa:	cf 90       	pop	r12
     efc:	bf 90       	pop	r11
     efe:	08 95       	ret

00000f00 <__floatunsisf>:
     f00:	e8 94       	clt
     f02:	09 c0       	rjmp	.+18     	; 0xf16 <__floatsisf+0x12>

00000f04 <__floatsisf>:
     f04:	97 fb       	bst	r25, 7
     f06:	3e f4       	brtc	.+14     	; 0xf16 <__floatsisf+0x12>
     f08:	90 95       	com	r25
     f0a:	80 95       	com	r24
     f0c:	70 95       	com	r23
     f0e:	61 95       	neg	r22
     f10:	7f 4f       	sbci	r23, 0xFF	; 255
     f12:	8f 4f       	sbci	r24, 0xFF	; 255
     f14:	9f 4f       	sbci	r25, 0xFF	; 255
     f16:	99 23       	and	r25, r25
     f18:	a9 f0       	breq	.+42     	; 0xf44 <__floatsisf+0x40>
     f1a:	f9 2f       	mov	r31, r25
     f1c:	96 e9       	ldi	r25, 0x96	; 150
     f1e:	bb 27       	eor	r27, r27
     f20:	93 95       	inc	r25
     f22:	f6 95       	lsr	r31
     f24:	87 95       	ror	r24
     f26:	77 95       	ror	r23
     f28:	67 95       	ror	r22
     f2a:	b7 95       	ror	r27
     f2c:	f1 11       	cpse	r31, r1
     f2e:	f8 cf       	rjmp	.-16     	; 0xf20 <__floatsisf+0x1c>
     f30:	fa f4       	brpl	.+62     	; 0xf70 <__floatsisf+0x6c>
     f32:	bb 0f       	add	r27, r27
     f34:	11 f4       	brne	.+4      	; 0xf3a <__floatsisf+0x36>
     f36:	60 ff       	sbrs	r22, 0
     f38:	1b c0       	rjmp	.+54     	; 0xf70 <__floatsisf+0x6c>
     f3a:	6f 5f       	subi	r22, 0xFF	; 255
     f3c:	7f 4f       	sbci	r23, 0xFF	; 255
     f3e:	8f 4f       	sbci	r24, 0xFF	; 255
     f40:	9f 4f       	sbci	r25, 0xFF	; 255
     f42:	16 c0       	rjmp	.+44     	; 0xf70 <__floatsisf+0x6c>
     f44:	88 23       	and	r24, r24
     f46:	11 f0       	breq	.+4      	; 0xf4c <__floatsisf+0x48>
     f48:	96 e9       	ldi	r25, 0x96	; 150
     f4a:	11 c0       	rjmp	.+34     	; 0xf6e <__floatsisf+0x6a>
     f4c:	77 23       	and	r23, r23
     f4e:	21 f0       	breq	.+8      	; 0xf58 <__floatsisf+0x54>
     f50:	9e e8       	ldi	r25, 0x8E	; 142
     f52:	87 2f       	mov	r24, r23
     f54:	76 2f       	mov	r23, r22
     f56:	05 c0       	rjmp	.+10     	; 0xf62 <__floatsisf+0x5e>
     f58:	66 23       	and	r22, r22
     f5a:	71 f0       	breq	.+28     	; 0xf78 <__floatsisf+0x74>
     f5c:	96 e8       	ldi	r25, 0x86	; 134
     f5e:	86 2f       	mov	r24, r22
     f60:	70 e0       	ldi	r23, 0x00	; 0
     f62:	60 e0       	ldi	r22, 0x00	; 0
     f64:	2a f0       	brmi	.+10     	; 0xf70 <__floatsisf+0x6c>
     f66:	9a 95       	dec	r25
     f68:	66 0f       	add	r22, r22
     f6a:	77 1f       	adc	r23, r23
     f6c:	88 1f       	adc	r24, r24
     f6e:	da f7       	brpl	.-10     	; 0xf66 <__floatsisf+0x62>
     f70:	88 0f       	add	r24, r24
     f72:	96 95       	lsr	r25
     f74:	87 95       	ror	r24
     f76:	97 f9       	bld	r25, 7
     f78:	08 95       	ret

00000f7a <__fp_inf>:
     f7a:	97 f9       	bld	r25, 7
     f7c:	9f 67       	ori	r25, 0x7F	; 127
     f7e:	80 e8       	ldi	r24, 0x80	; 128
     f80:	70 e0       	ldi	r23, 0x00	; 0
     f82:	60 e0       	ldi	r22, 0x00	; 0
     f84:	08 95       	ret

00000f86 <__fp_nan>:
     f86:	9f ef       	ldi	r25, 0xFF	; 255
     f88:	80 ec       	ldi	r24, 0xC0	; 192
     f8a:	08 95       	ret

00000f8c <__fp_pscA>:
     f8c:	00 24       	eor	r0, r0
     f8e:	0a 94       	dec	r0
     f90:	16 16       	cp	r1, r22
     f92:	17 06       	cpc	r1, r23
     f94:	18 06       	cpc	r1, r24
     f96:	09 06       	cpc	r0, r25
     f98:	08 95       	ret

00000f9a <__fp_pscB>:
     f9a:	00 24       	eor	r0, r0
     f9c:	0a 94       	dec	r0
     f9e:	12 16       	cp	r1, r18
     fa0:	13 06       	cpc	r1, r19
     fa2:	14 06       	cpc	r1, r20
     fa4:	05 06       	cpc	r0, r21
     fa6:	08 95       	ret

00000fa8 <__fp_round>:
     fa8:	09 2e       	mov	r0, r25
     faa:	03 94       	inc	r0
     fac:	00 0c       	add	r0, r0
     fae:	11 f4       	brne	.+4      	; 0xfb4 <__fp_round+0xc>
     fb0:	88 23       	and	r24, r24
     fb2:	52 f0       	brmi	.+20     	; 0xfc8 <__fp_round+0x20>
     fb4:	bb 0f       	add	r27, r27
     fb6:	40 f4       	brcc	.+16     	; 0xfc8 <__fp_round+0x20>
     fb8:	bf 2b       	or	r27, r31
     fba:	11 f4       	brne	.+4      	; 0xfc0 <__fp_round+0x18>
     fbc:	60 ff       	sbrs	r22, 0
     fbe:	04 c0       	rjmp	.+8      	; 0xfc8 <__fp_round+0x20>
     fc0:	6f 5f       	subi	r22, 0xFF	; 255
     fc2:	7f 4f       	sbci	r23, 0xFF	; 255
     fc4:	8f 4f       	sbci	r24, 0xFF	; 255
     fc6:	9f 4f       	sbci	r25, 0xFF	; 255
     fc8:	08 95       	ret

00000fca <__fp_split3>:
     fca:	57 fd       	sbrc	r21, 7
     fcc:	90 58       	subi	r25, 0x80	; 128
     fce:	44 0f       	add	r20, r20
     fd0:	55 1f       	adc	r21, r21
     fd2:	59 f0       	breq	.+22     	; 0xfea <__fp_splitA+0x10>
     fd4:	5f 3f       	cpi	r21, 0xFF	; 255
     fd6:	71 f0       	breq	.+28     	; 0xff4 <__fp_splitA+0x1a>
     fd8:	47 95       	ror	r20

00000fda <__fp_splitA>:
     fda:	88 0f       	add	r24, r24
     fdc:	97 fb       	bst	r25, 7
     fde:	99 1f       	adc	r25, r25
     fe0:	61 f0       	breq	.+24     	; 0xffa <__fp_splitA+0x20>
     fe2:	9f 3f       	cpi	r25, 0xFF	; 255
     fe4:	79 f0       	breq	.+30     	; 0x1004 <__fp_splitA+0x2a>
     fe6:	87 95       	ror	r24
     fe8:	08 95       	ret
     fea:	12 16       	cp	r1, r18
     fec:	13 06       	cpc	r1, r19
     fee:	14 06       	cpc	r1, r20
     ff0:	55 1f       	adc	r21, r21
     ff2:	f2 cf       	rjmp	.-28     	; 0xfd8 <__fp_split3+0xe>
     ff4:	46 95       	lsr	r20
     ff6:	f1 df       	rcall	.-30     	; 0xfda <__fp_splitA>
     ff8:	08 c0       	rjmp	.+16     	; 0x100a <__fp_splitA+0x30>
     ffa:	16 16       	cp	r1, r22
     ffc:	17 06       	cpc	r1, r23
     ffe:	18 06       	cpc	r1, r24
    1000:	99 1f       	adc	r25, r25
    1002:	f1 cf       	rjmp	.-30     	; 0xfe6 <__fp_splitA+0xc>
    1004:	86 95       	lsr	r24
    1006:	71 05       	cpc	r23, r1
    1008:	61 05       	cpc	r22, r1
    100a:	08 94       	sec
    100c:	08 95       	ret

0000100e <__fp_zero>:
    100e:	e8 94       	clt

00001010 <__fp_szero>:
    1010:	bb 27       	eor	r27, r27
    1012:	66 27       	eor	r22, r22
    1014:	77 27       	eor	r23, r23
    1016:	cb 01       	movw	r24, r22
    1018:	97 f9       	bld	r25, 7
    101a:	08 95       	ret

0000101c <__mulsf3>:
    101c:	0e 94 21 08 	call	0x1042	; 0x1042 <__mulsf3x>
    1020:	0c 94 d4 07 	jmp	0xfa8	; 0xfa8 <__fp_round>
    1024:	0e 94 c6 07 	call	0xf8c	; 0xf8c <__fp_pscA>
    1028:	38 f0       	brcs	.+14     	; 0x1038 <__mulsf3+0x1c>
    102a:	0e 94 cd 07 	call	0xf9a	; 0xf9a <__fp_pscB>
    102e:	20 f0       	brcs	.+8      	; 0x1038 <__mulsf3+0x1c>
    1030:	95 23       	and	r25, r21
    1032:	11 f0       	breq	.+4      	; 0x1038 <__mulsf3+0x1c>
    1034:	0c 94 bd 07 	jmp	0xf7a	; 0xf7a <__fp_inf>
    1038:	0c 94 c3 07 	jmp	0xf86	; 0xf86 <__fp_nan>
    103c:	11 24       	eor	r1, r1
    103e:	0c 94 08 08 	jmp	0x1010	; 0x1010 <__fp_szero>

00001042 <__mulsf3x>:
    1042:	0e 94 e5 07 	call	0xfca	; 0xfca <__fp_split3>
    1046:	70 f3       	brcs	.-36     	; 0x1024 <__mulsf3+0x8>

00001048 <__mulsf3_pse>:
    1048:	95 9f       	mul	r25, r21
    104a:	c1 f3       	breq	.-16     	; 0x103c <__mulsf3+0x20>
    104c:	95 0f       	add	r25, r21
    104e:	50 e0       	ldi	r21, 0x00	; 0
    1050:	55 1f       	adc	r21, r21
    1052:	62 9f       	mul	r22, r18
    1054:	f0 01       	movw	r30, r0
    1056:	72 9f       	mul	r23, r18
    1058:	bb 27       	eor	r27, r27
    105a:	f0 0d       	add	r31, r0
    105c:	b1 1d       	adc	r27, r1
    105e:	63 9f       	mul	r22, r19
    1060:	aa 27       	eor	r26, r26
    1062:	f0 0d       	add	r31, r0
    1064:	b1 1d       	adc	r27, r1
    1066:	aa 1f       	adc	r26, r26
    1068:	64 9f       	mul	r22, r20
    106a:	66 27       	eor	r22, r22
    106c:	b0 0d       	add	r27, r0
    106e:	a1 1d       	adc	r26, r1
    1070:	66 1f       	adc	r22, r22
    1072:	82 9f       	mul	r24, r18
    1074:	22 27       	eor	r18, r18
    1076:	b0 0d       	add	r27, r0
    1078:	a1 1d       	adc	r26, r1
    107a:	62 1f       	adc	r22, r18
    107c:	73 9f       	mul	r23, r19
    107e:	b0 0d       	add	r27, r0
    1080:	a1 1d       	adc	r26, r1
    1082:	62 1f       	adc	r22, r18
    1084:	83 9f       	mul	r24, r19
    1086:	a0 0d       	add	r26, r0
    1088:	61 1d       	adc	r22, r1
    108a:	22 1f       	adc	r18, r18
    108c:	74 9f       	mul	r23, r20
    108e:	33 27       	eor	r19, r19
    1090:	a0 0d       	add	r26, r0
    1092:	61 1d       	adc	r22, r1
    1094:	23 1f       	adc	r18, r19
    1096:	84 9f       	mul	r24, r20
    1098:	60 0d       	add	r22, r0
    109a:	21 1d       	adc	r18, r1
    109c:	82 2f       	mov	r24, r18
    109e:	76 2f       	mov	r23, r22
    10a0:	6a 2f       	mov	r22, r26
    10a2:	11 24       	eor	r1, r1
    10a4:	9f 57       	subi	r25, 0x7F	; 127
    10a6:	50 40       	sbci	r21, 0x00	; 0
    10a8:	9a f0       	brmi	.+38     	; 0x10d0 <__mulsf3_pse+0x88>
    10aa:	f1 f0       	breq	.+60     	; 0x10e8 <__mulsf3_pse+0xa0>
    10ac:	88 23       	and	r24, r24
    10ae:	4a f0       	brmi	.+18     	; 0x10c2 <__mulsf3_pse+0x7a>
    10b0:	ee 0f       	add	r30, r30
    10b2:	ff 1f       	adc	r31, r31
    10b4:	bb 1f       	adc	r27, r27
    10b6:	66 1f       	adc	r22, r22
    10b8:	77 1f       	adc	r23, r23
    10ba:	88 1f       	adc	r24, r24
    10bc:	91 50       	subi	r25, 0x01	; 1
    10be:	50 40       	sbci	r21, 0x00	; 0
    10c0:	a9 f7       	brne	.-22     	; 0x10ac <__mulsf3_pse+0x64>
    10c2:	9e 3f       	cpi	r25, 0xFE	; 254
    10c4:	51 05       	cpc	r21, r1
    10c6:	80 f0       	brcs	.+32     	; 0x10e8 <__mulsf3_pse+0xa0>
    10c8:	0c 94 bd 07 	jmp	0xf7a	; 0xf7a <__fp_inf>
    10cc:	0c 94 08 08 	jmp	0x1010	; 0x1010 <__fp_szero>
    10d0:	5f 3f       	cpi	r21, 0xFF	; 255
    10d2:	e4 f3       	brlt	.-8      	; 0x10cc <__mulsf3_pse+0x84>
    10d4:	98 3e       	cpi	r25, 0xE8	; 232
    10d6:	d4 f3       	brlt	.-12     	; 0x10cc <__mulsf3_pse+0x84>
    10d8:	86 95       	lsr	r24
    10da:	77 95       	ror	r23
    10dc:	67 95       	ror	r22
    10de:	b7 95       	ror	r27
    10e0:	f7 95       	ror	r31
    10e2:	e7 95       	ror	r30
    10e4:	9f 5f       	subi	r25, 0xFF	; 255
    10e6:	c1 f7       	brne	.-16     	; 0x10d8 <__mulsf3_pse+0x90>
    10e8:	fe 2b       	or	r31, r30
    10ea:	88 0f       	add	r24, r24
    10ec:	91 1d       	adc	r25, r1
    10ee:	96 95       	lsr	r25
    10f0:	87 95       	ror	r24
    10f2:	97 f9       	bld	r25, 7
    10f4:	08 95       	ret

000010f6 <vfprintf>:
    10f6:	a0 e1       	ldi	r26, 0x10	; 16
    10f8:	b0 e0       	ldi	r27, 0x00	; 0
    10fa:	e1 e8       	ldi	r30, 0x81	; 129
    10fc:	f8 e0       	ldi	r31, 0x08	; 8
    10fe:	0c 94 fe 0b 	jmp	0x17fc	; 0x17fc <__prologue_saves__>
    1102:	7c 01       	movw	r14, r24
    1104:	1b 01       	movw	r2, r22
    1106:	6a 01       	movw	r12, r20
    1108:	fc 01       	movw	r30, r24
    110a:	17 82       	std	Z+7, r1	; 0x07
    110c:	16 82       	std	Z+6, r1	; 0x06
    110e:	83 81       	ldd	r24, Z+3	; 0x03
    1110:	81 ff       	sbrs	r24, 1
    1112:	44 c3       	rjmp	.+1672   	; 0x179c <vfprintf+0x6a6>
    1114:	9e 01       	movw	r18, r28
    1116:	2f 5f       	subi	r18, 0xFF	; 255
    1118:	3f 4f       	sbci	r19, 0xFF	; 255
    111a:	39 01       	movw	r6, r18
    111c:	f7 01       	movw	r30, r14
    111e:	93 81       	ldd	r25, Z+3	; 0x03
    1120:	f1 01       	movw	r30, r2
    1122:	93 fd       	sbrc	r25, 3
    1124:	85 91       	lpm	r24, Z+
    1126:	93 ff       	sbrs	r25, 3
    1128:	81 91       	ld	r24, Z+
    112a:	1f 01       	movw	r2, r30
    112c:	88 23       	and	r24, r24
    112e:	09 f4       	brne	.+2      	; 0x1132 <vfprintf+0x3c>
    1130:	31 c3       	rjmp	.+1634   	; 0x1794 <vfprintf+0x69e>
    1132:	85 32       	cpi	r24, 0x25	; 37
    1134:	39 f4       	brne	.+14     	; 0x1144 <vfprintf+0x4e>
    1136:	93 fd       	sbrc	r25, 3
    1138:	85 91       	lpm	r24, Z+
    113a:	93 ff       	sbrs	r25, 3
    113c:	81 91       	ld	r24, Z+
    113e:	1f 01       	movw	r2, r30
    1140:	85 32       	cpi	r24, 0x25	; 37
    1142:	39 f4       	brne	.+14     	; 0x1152 <vfprintf+0x5c>
    1144:	b7 01       	movw	r22, r14
    1146:	90 e0       	ldi	r25, 0x00	; 0
    1148:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <fputc>
    114c:	56 01       	movw	r10, r12
    114e:	65 01       	movw	r12, r10
    1150:	e5 cf       	rjmp	.-54     	; 0x111c <vfprintf+0x26>
    1152:	10 e0       	ldi	r17, 0x00	; 0
    1154:	51 2c       	mov	r5, r1
    1156:	91 2c       	mov	r9, r1
    1158:	ff e1       	ldi	r31, 0x1F	; 31
    115a:	f9 15       	cp	r31, r9
    115c:	d8 f0       	brcs	.+54     	; 0x1194 <vfprintf+0x9e>
    115e:	8b 32       	cpi	r24, 0x2B	; 43
    1160:	79 f0       	breq	.+30     	; 0x1180 <vfprintf+0x8a>
    1162:	38 f4       	brcc	.+14     	; 0x1172 <vfprintf+0x7c>
    1164:	80 32       	cpi	r24, 0x20	; 32
    1166:	79 f0       	breq	.+30     	; 0x1186 <vfprintf+0x90>
    1168:	83 32       	cpi	r24, 0x23	; 35
    116a:	a1 f4       	brne	.+40     	; 0x1194 <vfprintf+0x9e>
    116c:	f9 2d       	mov	r31, r9
    116e:	f0 61       	ori	r31, 0x10	; 16
    1170:	2e c0       	rjmp	.+92     	; 0x11ce <vfprintf+0xd8>
    1172:	8d 32       	cpi	r24, 0x2D	; 45
    1174:	61 f0       	breq	.+24     	; 0x118e <vfprintf+0x98>
    1176:	80 33       	cpi	r24, 0x30	; 48
    1178:	69 f4       	brne	.+26     	; 0x1194 <vfprintf+0x9e>
    117a:	29 2d       	mov	r18, r9
    117c:	21 60       	ori	r18, 0x01	; 1
    117e:	2d c0       	rjmp	.+90     	; 0x11da <vfprintf+0xe4>
    1180:	39 2d       	mov	r19, r9
    1182:	32 60       	ori	r19, 0x02	; 2
    1184:	93 2e       	mov	r9, r19
    1186:	89 2d       	mov	r24, r9
    1188:	84 60       	ori	r24, 0x04	; 4
    118a:	98 2e       	mov	r9, r24
    118c:	2a c0       	rjmp	.+84     	; 0x11e2 <vfprintf+0xec>
    118e:	e9 2d       	mov	r30, r9
    1190:	e8 60       	ori	r30, 0x08	; 8
    1192:	15 c0       	rjmp	.+42     	; 0x11be <vfprintf+0xc8>
    1194:	97 fc       	sbrc	r9, 7
    1196:	2d c0       	rjmp	.+90     	; 0x11f2 <vfprintf+0xfc>
    1198:	20 ed       	ldi	r18, 0xD0	; 208
    119a:	28 0f       	add	r18, r24
    119c:	2a 30       	cpi	r18, 0x0A	; 10
    119e:	88 f4       	brcc	.+34     	; 0x11c2 <vfprintf+0xcc>
    11a0:	96 fe       	sbrs	r9, 6
    11a2:	06 c0       	rjmp	.+12     	; 0x11b0 <vfprintf+0xba>
    11a4:	3a e0       	ldi	r19, 0x0A	; 10
    11a6:	13 9f       	mul	r17, r19
    11a8:	20 0d       	add	r18, r0
    11aa:	11 24       	eor	r1, r1
    11ac:	12 2f       	mov	r17, r18
    11ae:	19 c0       	rjmp	.+50     	; 0x11e2 <vfprintf+0xec>
    11b0:	8a e0       	ldi	r24, 0x0A	; 10
    11b2:	58 9e       	mul	r5, r24
    11b4:	20 0d       	add	r18, r0
    11b6:	11 24       	eor	r1, r1
    11b8:	52 2e       	mov	r5, r18
    11ba:	e9 2d       	mov	r30, r9
    11bc:	e0 62       	ori	r30, 0x20	; 32
    11be:	9e 2e       	mov	r9, r30
    11c0:	10 c0       	rjmp	.+32     	; 0x11e2 <vfprintf+0xec>
    11c2:	8e 32       	cpi	r24, 0x2E	; 46
    11c4:	31 f4       	brne	.+12     	; 0x11d2 <vfprintf+0xdc>
    11c6:	96 fc       	sbrc	r9, 6
    11c8:	e5 c2       	rjmp	.+1482   	; 0x1794 <vfprintf+0x69e>
    11ca:	f9 2d       	mov	r31, r9
    11cc:	f0 64       	ori	r31, 0x40	; 64
    11ce:	9f 2e       	mov	r9, r31
    11d0:	08 c0       	rjmp	.+16     	; 0x11e2 <vfprintf+0xec>
    11d2:	8c 36       	cpi	r24, 0x6C	; 108
    11d4:	21 f4       	brne	.+8      	; 0x11de <vfprintf+0xe8>
    11d6:	29 2d       	mov	r18, r9
    11d8:	20 68       	ori	r18, 0x80	; 128
    11da:	92 2e       	mov	r9, r18
    11dc:	02 c0       	rjmp	.+4      	; 0x11e2 <vfprintf+0xec>
    11de:	88 36       	cpi	r24, 0x68	; 104
    11e0:	41 f4       	brne	.+16     	; 0x11f2 <vfprintf+0xfc>
    11e2:	f1 01       	movw	r30, r2
    11e4:	93 fd       	sbrc	r25, 3
    11e6:	85 91       	lpm	r24, Z+
    11e8:	93 ff       	sbrs	r25, 3
    11ea:	81 91       	ld	r24, Z+
    11ec:	1f 01       	movw	r2, r30
    11ee:	81 11       	cpse	r24, r1
    11f0:	b3 cf       	rjmp	.-154    	; 0x1158 <vfprintf+0x62>
    11f2:	9b eb       	ldi	r25, 0xBB	; 187
    11f4:	98 0f       	add	r25, r24
    11f6:	93 30       	cpi	r25, 0x03	; 3
    11f8:	20 f4       	brcc	.+8      	; 0x1202 <vfprintf+0x10c>
    11fa:	99 2d       	mov	r25, r9
    11fc:	90 61       	ori	r25, 0x10	; 16
    11fe:	80 5e       	subi	r24, 0xE0	; 224
    1200:	07 c0       	rjmp	.+14     	; 0x1210 <vfprintf+0x11a>
    1202:	9b e9       	ldi	r25, 0x9B	; 155
    1204:	98 0f       	add	r25, r24
    1206:	93 30       	cpi	r25, 0x03	; 3
    1208:	08 f0       	brcs	.+2      	; 0x120c <vfprintf+0x116>
    120a:	66 c1       	rjmp	.+716    	; 0x14d8 <vfprintf+0x3e2>
    120c:	99 2d       	mov	r25, r9
    120e:	9f 7e       	andi	r25, 0xEF	; 239
    1210:	96 ff       	sbrs	r25, 6
    1212:	16 e0       	ldi	r17, 0x06	; 6
    1214:	9f 73       	andi	r25, 0x3F	; 63
    1216:	99 2e       	mov	r9, r25
    1218:	85 36       	cpi	r24, 0x65	; 101
    121a:	19 f4       	brne	.+6      	; 0x1222 <vfprintf+0x12c>
    121c:	90 64       	ori	r25, 0x40	; 64
    121e:	99 2e       	mov	r9, r25
    1220:	08 c0       	rjmp	.+16     	; 0x1232 <vfprintf+0x13c>
    1222:	86 36       	cpi	r24, 0x66	; 102
    1224:	21 f4       	brne	.+8      	; 0x122e <vfprintf+0x138>
    1226:	39 2f       	mov	r19, r25
    1228:	30 68       	ori	r19, 0x80	; 128
    122a:	93 2e       	mov	r9, r19
    122c:	02 c0       	rjmp	.+4      	; 0x1232 <vfprintf+0x13c>
    122e:	11 11       	cpse	r17, r1
    1230:	11 50       	subi	r17, 0x01	; 1
    1232:	97 fe       	sbrs	r9, 7
    1234:	07 c0       	rjmp	.+14     	; 0x1244 <vfprintf+0x14e>
    1236:	1c 33       	cpi	r17, 0x3C	; 60
    1238:	50 f4       	brcc	.+20     	; 0x124e <vfprintf+0x158>
    123a:	44 24       	eor	r4, r4
    123c:	43 94       	inc	r4
    123e:	41 0e       	add	r4, r17
    1240:	27 e0       	ldi	r18, 0x07	; 7
    1242:	0b c0       	rjmp	.+22     	; 0x125a <vfprintf+0x164>
    1244:	18 30       	cpi	r17, 0x08	; 8
    1246:	38 f0       	brcs	.+14     	; 0x1256 <vfprintf+0x160>
    1248:	27 e0       	ldi	r18, 0x07	; 7
    124a:	17 e0       	ldi	r17, 0x07	; 7
    124c:	05 c0       	rjmp	.+10     	; 0x1258 <vfprintf+0x162>
    124e:	27 e0       	ldi	r18, 0x07	; 7
    1250:	9c e3       	ldi	r25, 0x3C	; 60
    1252:	49 2e       	mov	r4, r25
    1254:	02 c0       	rjmp	.+4      	; 0x125a <vfprintf+0x164>
    1256:	21 2f       	mov	r18, r17
    1258:	41 2c       	mov	r4, r1
    125a:	56 01       	movw	r10, r12
    125c:	84 e0       	ldi	r24, 0x04	; 4
    125e:	a8 0e       	add	r10, r24
    1260:	b1 1c       	adc	r11, r1
    1262:	f6 01       	movw	r30, r12
    1264:	60 81       	ld	r22, Z
    1266:	71 81       	ldd	r23, Z+1	; 0x01
    1268:	82 81       	ldd	r24, Z+2	; 0x02
    126a:	93 81       	ldd	r25, Z+3	; 0x03
    126c:	04 2d       	mov	r16, r4
    126e:	a3 01       	movw	r20, r6
    1270:	0e 94 35 0c 	call	0x186a	; 0x186a <__ftoa_engine>
    1274:	6c 01       	movw	r12, r24
    1276:	f9 81       	ldd	r31, Y+1	; 0x01
    1278:	fc 87       	std	Y+12, r31	; 0x0c
    127a:	f0 ff       	sbrs	r31, 0
    127c:	02 c0       	rjmp	.+4      	; 0x1282 <vfprintf+0x18c>
    127e:	f3 ff       	sbrs	r31, 3
    1280:	06 c0       	rjmp	.+12     	; 0x128e <vfprintf+0x198>
    1282:	91 fc       	sbrc	r9, 1
    1284:	06 c0       	rjmp	.+12     	; 0x1292 <vfprintf+0x19c>
    1286:	92 fe       	sbrs	r9, 2
    1288:	06 c0       	rjmp	.+12     	; 0x1296 <vfprintf+0x1a0>
    128a:	00 e2       	ldi	r16, 0x20	; 32
    128c:	05 c0       	rjmp	.+10     	; 0x1298 <vfprintf+0x1a2>
    128e:	0d e2       	ldi	r16, 0x2D	; 45
    1290:	03 c0       	rjmp	.+6      	; 0x1298 <vfprintf+0x1a2>
    1292:	0b e2       	ldi	r16, 0x2B	; 43
    1294:	01 c0       	rjmp	.+2      	; 0x1298 <vfprintf+0x1a2>
    1296:	00 e0       	ldi	r16, 0x00	; 0
    1298:	8c 85       	ldd	r24, Y+12	; 0x0c
    129a:	8c 70       	andi	r24, 0x0C	; 12
    129c:	19 f0       	breq	.+6      	; 0x12a4 <vfprintf+0x1ae>
    129e:	01 11       	cpse	r16, r1
    12a0:	5a c2       	rjmp	.+1204   	; 0x1756 <vfprintf+0x660>
    12a2:	9b c2       	rjmp	.+1334   	; 0x17da <vfprintf+0x6e4>
    12a4:	97 fe       	sbrs	r9, 7
    12a6:	10 c0       	rjmp	.+32     	; 0x12c8 <vfprintf+0x1d2>
    12a8:	4c 0c       	add	r4, r12
    12aa:	fc 85       	ldd	r31, Y+12	; 0x0c
    12ac:	f4 ff       	sbrs	r31, 4
    12ae:	04 c0       	rjmp	.+8      	; 0x12b8 <vfprintf+0x1c2>
    12b0:	8a 81       	ldd	r24, Y+2	; 0x02
    12b2:	81 33       	cpi	r24, 0x31	; 49
    12b4:	09 f4       	brne	.+2      	; 0x12b8 <vfprintf+0x1c2>
    12b6:	4a 94       	dec	r4
    12b8:	14 14       	cp	r1, r4
    12ba:	74 f5       	brge	.+92     	; 0x1318 <vfprintf+0x222>
    12bc:	28 e0       	ldi	r18, 0x08	; 8
    12be:	24 15       	cp	r18, r4
    12c0:	78 f5       	brcc	.+94     	; 0x1320 <vfprintf+0x22a>
    12c2:	88 e0       	ldi	r24, 0x08	; 8
    12c4:	48 2e       	mov	r4, r24
    12c6:	2c c0       	rjmp	.+88     	; 0x1320 <vfprintf+0x22a>
    12c8:	96 fc       	sbrc	r9, 6
    12ca:	2a c0       	rjmp	.+84     	; 0x1320 <vfprintf+0x22a>
    12cc:	81 2f       	mov	r24, r17
    12ce:	90 e0       	ldi	r25, 0x00	; 0
    12d0:	8c 15       	cp	r24, r12
    12d2:	9d 05       	cpc	r25, r13
    12d4:	9c f0       	brlt	.+38     	; 0x12fc <vfprintf+0x206>
    12d6:	3c ef       	ldi	r19, 0xFC	; 252
    12d8:	c3 16       	cp	r12, r19
    12da:	3f ef       	ldi	r19, 0xFF	; 255
    12dc:	d3 06       	cpc	r13, r19
    12de:	74 f0       	brlt	.+28     	; 0x12fc <vfprintf+0x206>
    12e0:	89 2d       	mov	r24, r9
    12e2:	80 68       	ori	r24, 0x80	; 128
    12e4:	98 2e       	mov	r9, r24
    12e6:	0a c0       	rjmp	.+20     	; 0x12fc <vfprintf+0x206>
    12e8:	e2 e0       	ldi	r30, 0x02	; 2
    12ea:	f0 e0       	ldi	r31, 0x00	; 0
    12ec:	ec 0f       	add	r30, r28
    12ee:	fd 1f       	adc	r31, r29
    12f0:	e1 0f       	add	r30, r17
    12f2:	f1 1d       	adc	r31, r1
    12f4:	80 81       	ld	r24, Z
    12f6:	80 33       	cpi	r24, 0x30	; 48
    12f8:	19 f4       	brne	.+6      	; 0x1300 <vfprintf+0x20a>
    12fa:	11 50       	subi	r17, 0x01	; 1
    12fc:	11 11       	cpse	r17, r1
    12fe:	f4 cf       	rjmp	.-24     	; 0x12e8 <vfprintf+0x1f2>
    1300:	97 fe       	sbrs	r9, 7
    1302:	0e c0       	rjmp	.+28     	; 0x1320 <vfprintf+0x22a>
    1304:	44 24       	eor	r4, r4
    1306:	43 94       	inc	r4
    1308:	41 0e       	add	r4, r17
    130a:	81 2f       	mov	r24, r17
    130c:	90 e0       	ldi	r25, 0x00	; 0
    130e:	c8 16       	cp	r12, r24
    1310:	d9 06       	cpc	r13, r25
    1312:	2c f4       	brge	.+10     	; 0x131e <vfprintf+0x228>
    1314:	1c 19       	sub	r17, r12
    1316:	04 c0       	rjmp	.+8      	; 0x1320 <vfprintf+0x22a>
    1318:	44 24       	eor	r4, r4
    131a:	43 94       	inc	r4
    131c:	01 c0       	rjmp	.+2      	; 0x1320 <vfprintf+0x22a>
    131e:	10 e0       	ldi	r17, 0x00	; 0
    1320:	97 fe       	sbrs	r9, 7
    1322:	06 c0       	rjmp	.+12     	; 0x1330 <vfprintf+0x23a>
    1324:	1c 14       	cp	r1, r12
    1326:	1d 04       	cpc	r1, r13
    1328:	34 f4       	brge	.+12     	; 0x1336 <vfprintf+0x240>
    132a:	c6 01       	movw	r24, r12
    132c:	01 96       	adiw	r24, 0x01	; 1
    132e:	05 c0       	rjmp	.+10     	; 0x133a <vfprintf+0x244>
    1330:	85 e0       	ldi	r24, 0x05	; 5
    1332:	90 e0       	ldi	r25, 0x00	; 0
    1334:	02 c0       	rjmp	.+4      	; 0x133a <vfprintf+0x244>
    1336:	81 e0       	ldi	r24, 0x01	; 1
    1338:	90 e0       	ldi	r25, 0x00	; 0
    133a:	01 11       	cpse	r16, r1
    133c:	01 96       	adiw	r24, 0x01	; 1
    133e:	11 23       	and	r17, r17
    1340:	31 f0       	breq	.+12     	; 0x134e <vfprintf+0x258>
    1342:	21 2f       	mov	r18, r17
    1344:	30 e0       	ldi	r19, 0x00	; 0
    1346:	2f 5f       	subi	r18, 0xFF	; 255
    1348:	3f 4f       	sbci	r19, 0xFF	; 255
    134a:	82 0f       	add	r24, r18
    134c:	93 1f       	adc	r25, r19
    134e:	25 2d       	mov	r18, r5
    1350:	30 e0       	ldi	r19, 0x00	; 0
    1352:	82 17       	cp	r24, r18
    1354:	93 07       	cpc	r25, r19
    1356:	14 f4       	brge	.+4      	; 0x135c <vfprintf+0x266>
    1358:	58 1a       	sub	r5, r24
    135a:	01 c0       	rjmp	.+2      	; 0x135e <vfprintf+0x268>
    135c:	51 2c       	mov	r5, r1
    135e:	89 2d       	mov	r24, r9
    1360:	89 70       	andi	r24, 0x09	; 9
    1362:	49 f4       	brne	.+18     	; 0x1376 <vfprintf+0x280>
    1364:	55 20       	and	r5, r5
    1366:	39 f0       	breq	.+14     	; 0x1376 <vfprintf+0x280>
    1368:	b7 01       	movw	r22, r14
    136a:	80 e2       	ldi	r24, 0x20	; 32
    136c:	90 e0       	ldi	r25, 0x00	; 0
    136e:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <fputc>
    1372:	5a 94       	dec	r5
    1374:	f7 cf       	rjmp	.-18     	; 0x1364 <vfprintf+0x26e>
    1376:	00 23       	and	r16, r16
    1378:	29 f0       	breq	.+10     	; 0x1384 <vfprintf+0x28e>
    137a:	b7 01       	movw	r22, r14
    137c:	80 2f       	mov	r24, r16
    137e:	90 e0       	ldi	r25, 0x00	; 0
    1380:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <fputc>
    1384:	93 fc       	sbrc	r9, 3
    1386:	09 c0       	rjmp	.+18     	; 0x139a <vfprintf+0x2a4>
    1388:	55 20       	and	r5, r5
    138a:	39 f0       	breq	.+14     	; 0x139a <vfprintf+0x2a4>
    138c:	b7 01       	movw	r22, r14
    138e:	80 e3       	ldi	r24, 0x30	; 48
    1390:	90 e0       	ldi	r25, 0x00	; 0
    1392:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <fputc>
    1396:	5a 94       	dec	r5
    1398:	f7 cf       	rjmp	.-18     	; 0x1388 <vfprintf+0x292>
    139a:	97 fe       	sbrs	r9, 7
    139c:	4c c0       	rjmp	.+152    	; 0x1436 <vfprintf+0x340>
    139e:	46 01       	movw	r8, r12
    13a0:	d7 fe       	sbrs	r13, 7
    13a2:	02 c0       	rjmp	.+4      	; 0x13a8 <vfprintf+0x2b2>
    13a4:	81 2c       	mov	r8, r1
    13a6:	91 2c       	mov	r9, r1
    13a8:	c6 01       	movw	r24, r12
    13aa:	88 19       	sub	r24, r8
    13ac:	99 09       	sbc	r25, r9
    13ae:	f3 01       	movw	r30, r6
    13b0:	e8 0f       	add	r30, r24
    13b2:	f9 1f       	adc	r31, r25
    13b4:	fe 87       	std	Y+14, r31	; 0x0e
    13b6:	ed 87       	std	Y+13, r30	; 0x0d
    13b8:	96 01       	movw	r18, r12
    13ba:	24 19       	sub	r18, r4
    13bc:	31 09       	sbc	r19, r1
    13be:	38 8b       	std	Y+16, r19	; 0x10
    13c0:	2f 87       	std	Y+15, r18	; 0x0f
    13c2:	01 2f       	mov	r16, r17
    13c4:	10 e0       	ldi	r17, 0x00	; 0
    13c6:	11 95       	neg	r17
    13c8:	01 95       	neg	r16
    13ca:	11 09       	sbc	r17, r1
    13cc:	3f ef       	ldi	r19, 0xFF	; 255
    13ce:	83 16       	cp	r8, r19
    13d0:	93 06       	cpc	r9, r19
    13d2:	29 f4       	brne	.+10     	; 0x13de <vfprintf+0x2e8>
    13d4:	b7 01       	movw	r22, r14
    13d6:	8e e2       	ldi	r24, 0x2E	; 46
    13d8:	90 e0       	ldi	r25, 0x00	; 0
    13da:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <fputc>
    13de:	c8 14       	cp	r12, r8
    13e0:	d9 04       	cpc	r13, r9
    13e2:	4c f0       	brlt	.+18     	; 0x13f6 <vfprintf+0x300>
    13e4:	8f 85       	ldd	r24, Y+15	; 0x0f
    13e6:	98 89       	ldd	r25, Y+16	; 0x10
    13e8:	88 15       	cp	r24, r8
    13ea:	99 05       	cpc	r25, r9
    13ec:	24 f4       	brge	.+8      	; 0x13f6 <vfprintf+0x300>
    13ee:	ed 85       	ldd	r30, Y+13	; 0x0d
    13f0:	fe 85       	ldd	r31, Y+14	; 0x0e
    13f2:	81 81       	ldd	r24, Z+1	; 0x01
    13f4:	01 c0       	rjmp	.+2      	; 0x13f8 <vfprintf+0x302>
    13f6:	80 e3       	ldi	r24, 0x30	; 48
    13f8:	f1 e0       	ldi	r31, 0x01	; 1
    13fa:	8f 1a       	sub	r8, r31
    13fc:	91 08       	sbc	r9, r1
    13fe:	2d 85       	ldd	r18, Y+13	; 0x0d
    1400:	3e 85       	ldd	r19, Y+14	; 0x0e
    1402:	2f 5f       	subi	r18, 0xFF	; 255
    1404:	3f 4f       	sbci	r19, 0xFF	; 255
    1406:	3e 87       	std	Y+14, r19	; 0x0e
    1408:	2d 87       	std	Y+13, r18	; 0x0d
    140a:	80 16       	cp	r8, r16
    140c:	91 06       	cpc	r9, r17
    140e:	2c f0       	brlt	.+10     	; 0x141a <vfprintf+0x324>
    1410:	b7 01       	movw	r22, r14
    1412:	90 e0       	ldi	r25, 0x00	; 0
    1414:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <fputc>
    1418:	d9 cf       	rjmp	.-78     	; 0x13cc <vfprintf+0x2d6>
    141a:	c8 14       	cp	r12, r8
    141c:	d9 04       	cpc	r13, r9
    141e:	41 f4       	brne	.+16     	; 0x1430 <vfprintf+0x33a>
    1420:	9a 81       	ldd	r25, Y+2	; 0x02
    1422:	96 33       	cpi	r25, 0x36	; 54
    1424:	20 f4       	brcc	.+8      	; 0x142e <vfprintf+0x338>
    1426:	95 33       	cpi	r25, 0x35	; 53
    1428:	19 f4       	brne	.+6      	; 0x1430 <vfprintf+0x33a>
    142a:	3c 85       	ldd	r19, Y+12	; 0x0c
    142c:	34 ff       	sbrs	r19, 4
    142e:	81 e3       	ldi	r24, 0x31	; 49
    1430:	b7 01       	movw	r22, r14
    1432:	90 e0       	ldi	r25, 0x00	; 0
    1434:	4e c0       	rjmp	.+156    	; 0x14d2 <vfprintf+0x3dc>
    1436:	8a 81       	ldd	r24, Y+2	; 0x02
    1438:	81 33       	cpi	r24, 0x31	; 49
    143a:	19 f0       	breq	.+6      	; 0x1442 <vfprintf+0x34c>
    143c:	9c 85       	ldd	r25, Y+12	; 0x0c
    143e:	9f 7e       	andi	r25, 0xEF	; 239
    1440:	9c 87       	std	Y+12, r25	; 0x0c
    1442:	b7 01       	movw	r22, r14
    1444:	90 e0       	ldi	r25, 0x00	; 0
    1446:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <fputc>
    144a:	11 11       	cpse	r17, r1
    144c:	05 c0       	rjmp	.+10     	; 0x1458 <vfprintf+0x362>
    144e:	94 fc       	sbrc	r9, 4
    1450:	18 c0       	rjmp	.+48     	; 0x1482 <vfprintf+0x38c>
    1452:	85 e6       	ldi	r24, 0x65	; 101
    1454:	90 e0       	ldi	r25, 0x00	; 0
    1456:	17 c0       	rjmp	.+46     	; 0x1486 <vfprintf+0x390>
    1458:	b7 01       	movw	r22, r14
    145a:	8e e2       	ldi	r24, 0x2E	; 46
    145c:	90 e0       	ldi	r25, 0x00	; 0
    145e:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <fputc>
    1462:	1e 5f       	subi	r17, 0xFE	; 254
    1464:	82 e0       	ldi	r24, 0x02	; 2
    1466:	01 e0       	ldi	r16, 0x01	; 1
    1468:	08 0f       	add	r16, r24
    146a:	f3 01       	movw	r30, r6
    146c:	e8 0f       	add	r30, r24
    146e:	f1 1d       	adc	r31, r1
    1470:	80 81       	ld	r24, Z
    1472:	b7 01       	movw	r22, r14
    1474:	90 e0       	ldi	r25, 0x00	; 0
    1476:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <fputc>
    147a:	80 2f       	mov	r24, r16
    147c:	01 13       	cpse	r16, r17
    147e:	f3 cf       	rjmp	.-26     	; 0x1466 <vfprintf+0x370>
    1480:	e6 cf       	rjmp	.-52     	; 0x144e <vfprintf+0x358>
    1482:	85 e4       	ldi	r24, 0x45	; 69
    1484:	90 e0       	ldi	r25, 0x00	; 0
    1486:	b7 01       	movw	r22, r14
    1488:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <fputc>
    148c:	d7 fc       	sbrc	r13, 7
    148e:	06 c0       	rjmp	.+12     	; 0x149c <vfprintf+0x3a6>
    1490:	c1 14       	cp	r12, r1
    1492:	d1 04       	cpc	r13, r1
    1494:	41 f4       	brne	.+16     	; 0x14a6 <vfprintf+0x3b0>
    1496:	ec 85       	ldd	r30, Y+12	; 0x0c
    1498:	e4 ff       	sbrs	r30, 4
    149a:	05 c0       	rjmp	.+10     	; 0x14a6 <vfprintf+0x3b0>
    149c:	d1 94       	neg	r13
    149e:	c1 94       	neg	r12
    14a0:	d1 08       	sbc	r13, r1
    14a2:	8d e2       	ldi	r24, 0x2D	; 45
    14a4:	01 c0       	rjmp	.+2      	; 0x14a8 <vfprintf+0x3b2>
    14a6:	8b e2       	ldi	r24, 0x2B	; 43
    14a8:	b7 01       	movw	r22, r14
    14aa:	90 e0       	ldi	r25, 0x00	; 0
    14ac:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <fputc>
    14b0:	80 e3       	ldi	r24, 0x30	; 48
    14b2:	2a e0       	ldi	r18, 0x0A	; 10
    14b4:	c2 16       	cp	r12, r18
    14b6:	d1 04       	cpc	r13, r1
    14b8:	2c f0       	brlt	.+10     	; 0x14c4 <vfprintf+0x3ce>
    14ba:	8f 5f       	subi	r24, 0xFF	; 255
    14bc:	fa e0       	ldi	r31, 0x0A	; 10
    14be:	cf 1a       	sub	r12, r31
    14c0:	d1 08       	sbc	r13, r1
    14c2:	f7 cf       	rjmp	.-18     	; 0x14b2 <vfprintf+0x3bc>
    14c4:	b7 01       	movw	r22, r14
    14c6:	90 e0       	ldi	r25, 0x00	; 0
    14c8:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <fputc>
    14cc:	b7 01       	movw	r22, r14
    14ce:	c6 01       	movw	r24, r12
    14d0:	c0 96       	adiw	r24, 0x30	; 48
    14d2:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <fputc>
    14d6:	54 c1       	rjmp	.+680    	; 0x1780 <vfprintf+0x68a>
    14d8:	83 36       	cpi	r24, 0x63	; 99
    14da:	31 f0       	breq	.+12     	; 0x14e8 <vfprintf+0x3f2>
    14dc:	83 37       	cpi	r24, 0x73	; 115
    14de:	79 f0       	breq	.+30     	; 0x14fe <vfprintf+0x408>
    14e0:	83 35       	cpi	r24, 0x53	; 83
    14e2:	09 f0       	breq	.+2      	; 0x14e6 <vfprintf+0x3f0>
    14e4:	56 c0       	rjmp	.+172    	; 0x1592 <vfprintf+0x49c>
    14e6:	20 c0       	rjmp	.+64     	; 0x1528 <vfprintf+0x432>
    14e8:	56 01       	movw	r10, r12
    14ea:	32 e0       	ldi	r19, 0x02	; 2
    14ec:	a3 0e       	add	r10, r19
    14ee:	b1 1c       	adc	r11, r1
    14f0:	f6 01       	movw	r30, r12
    14f2:	80 81       	ld	r24, Z
    14f4:	89 83       	std	Y+1, r24	; 0x01
    14f6:	01 e0       	ldi	r16, 0x01	; 1
    14f8:	10 e0       	ldi	r17, 0x00	; 0
    14fa:	63 01       	movw	r12, r6
    14fc:	12 c0       	rjmp	.+36     	; 0x1522 <vfprintf+0x42c>
    14fe:	56 01       	movw	r10, r12
    1500:	f2 e0       	ldi	r31, 0x02	; 2
    1502:	af 0e       	add	r10, r31
    1504:	b1 1c       	adc	r11, r1
    1506:	f6 01       	movw	r30, r12
    1508:	c0 80       	ld	r12, Z
    150a:	d1 80       	ldd	r13, Z+1	; 0x01
    150c:	96 fe       	sbrs	r9, 6
    150e:	03 c0       	rjmp	.+6      	; 0x1516 <vfprintf+0x420>
    1510:	61 2f       	mov	r22, r17
    1512:	70 e0       	ldi	r23, 0x00	; 0
    1514:	02 c0       	rjmp	.+4      	; 0x151a <vfprintf+0x424>
    1516:	6f ef       	ldi	r22, 0xFF	; 255
    1518:	7f ef       	ldi	r23, 0xFF	; 255
    151a:	c6 01       	movw	r24, r12
    151c:	0e 94 18 0d 	call	0x1a30	; 0x1a30 <strnlen>
    1520:	8c 01       	movw	r16, r24
    1522:	f9 2d       	mov	r31, r9
    1524:	ff 77       	andi	r31, 0x7F	; 127
    1526:	14 c0       	rjmp	.+40     	; 0x1550 <vfprintf+0x45a>
    1528:	56 01       	movw	r10, r12
    152a:	22 e0       	ldi	r18, 0x02	; 2
    152c:	a2 0e       	add	r10, r18
    152e:	b1 1c       	adc	r11, r1
    1530:	f6 01       	movw	r30, r12
    1532:	c0 80       	ld	r12, Z
    1534:	d1 80       	ldd	r13, Z+1	; 0x01
    1536:	96 fe       	sbrs	r9, 6
    1538:	03 c0       	rjmp	.+6      	; 0x1540 <vfprintf+0x44a>
    153a:	61 2f       	mov	r22, r17
    153c:	70 e0       	ldi	r23, 0x00	; 0
    153e:	02 c0       	rjmp	.+4      	; 0x1544 <vfprintf+0x44e>
    1540:	6f ef       	ldi	r22, 0xFF	; 255
    1542:	7f ef       	ldi	r23, 0xFF	; 255
    1544:	c6 01       	movw	r24, r12
    1546:	0e 94 0d 0d 	call	0x1a1a	; 0x1a1a <strnlen_P>
    154a:	8c 01       	movw	r16, r24
    154c:	f9 2d       	mov	r31, r9
    154e:	f0 68       	ori	r31, 0x80	; 128
    1550:	9f 2e       	mov	r9, r31
    1552:	f3 fd       	sbrc	r31, 3
    1554:	1a c0       	rjmp	.+52     	; 0x158a <vfprintf+0x494>
    1556:	85 2d       	mov	r24, r5
    1558:	90 e0       	ldi	r25, 0x00	; 0
    155a:	08 17       	cp	r16, r24
    155c:	19 07       	cpc	r17, r25
    155e:	a8 f4       	brcc	.+42     	; 0x158a <vfprintf+0x494>
    1560:	b7 01       	movw	r22, r14
    1562:	80 e2       	ldi	r24, 0x20	; 32
    1564:	90 e0       	ldi	r25, 0x00	; 0
    1566:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <fputc>
    156a:	5a 94       	dec	r5
    156c:	f4 cf       	rjmp	.-24     	; 0x1556 <vfprintf+0x460>
    156e:	f6 01       	movw	r30, r12
    1570:	97 fc       	sbrc	r9, 7
    1572:	85 91       	lpm	r24, Z+
    1574:	97 fe       	sbrs	r9, 7
    1576:	81 91       	ld	r24, Z+
    1578:	6f 01       	movw	r12, r30
    157a:	b7 01       	movw	r22, r14
    157c:	90 e0       	ldi	r25, 0x00	; 0
    157e:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <fputc>
    1582:	51 10       	cpse	r5, r1
    1584:	5a 94       	dec	r5
    1586:	01 50       	subi	r16, 0x01	; 1
    1588:	11 09       	sbc	r17, r1
    158a:	01 15       	cp	r16, r1
    158c:	11 05       	cpc	r17, r1
    158e:	79 f7       	brne	.-34     	; 0x156e <vfprintf+0x478>
    1590:	f7 c0       	rjmp	.+494    	; 0x1780 <vfprintf+0x68a>
    1592:	84 36       	cpi	r24, 0x64	; 100
    1594:	11 f0       	breq	.+4      	; 0x159a <vfprintf+0x4a4>
    1596:	89 36       	cpi	r24, 0x69	; 105
    1598:	61 f5       	brne	.+88     	; 0x15f2 <vfprintf+0x4fc>
    159a:	56 01       	movw	r10, r12
    159c:	97 fe       	sbrs	r9, 7
    159e:	09 c0       	rjmp	.+18     	; 0x15b2 <vfprintf+0x4bc>
    15a0:	24 e0       	ldi	r18, 0x04	; 4
    15a2:	a2 0e       	add	r10, r18
    15a4:	b1 1c       	adc	r11, r1
    15a6:	f6 01       	movw	r30, r12
    15a8:	60 81       	ld	r22, Z
    15aa:	71 81       	ldd	r23, Z+1	; 0x01
    15ac:	82 81       	ldd	r24, Z+2	; 0x02
    15ae:	93 81       	ldd	r25, Z+3	; 0x03
    15b0:	0a c0       	rjmp	.+20     	; 0x15c6 <vfprintf+0x4d0>
    15b2:	f2 e0       	ldi	r31, 0x02	; 2
    15b4:	af 0e       	add	r10, r31
    15b6:	b1 1c       	adc	r11, r1
    15b8:	f6 01       	movw	r30, r12
    15ba:	60 81       	ld	r22, Z
    15bc:	71 81       	ldd	r23, Z+1	; 0x01
    15be:	07 2e       	mov	r0, r23
    15c0:	00 0c       	add	r0, r0
    15c2:	88 0b       	sbc	r24, r24
    15c4:	99 0b       	sbc	r25, r25
    15c6:	f9 2d       	mov	r31, r9
    15c8:	ff 76       	andi	r31, 0x6F	; 111
    15ca:	9f 2e       	mov	r9, r31
    15cc:	97 ff       	sbrs	r25, 7
    15ce:	09 c0       	rjmp	.+18     	; 0x15e2 <vfprintf+0x4ec>
    15d0:	90 95       	com	r25
    15d2:	80 95       	com	r24
    15d4:	70 95       	com	r23
    15d6:	61 95       	neg	r22
    15d8:	7f 4f       	sbci	r23, 0xFF	; 255
    15da:	8f 4f       	sbci	r24, 0xFF	; 255
    15dc:	9f 4f       	sbci	r25, 0xFF	; 255
    15de:	f0 68       	ori	r31, 0x80	; 128
    15e0:	9f 2e       	mov	r9, r31
    15e2:	2a e0       	ldi	r18, 0x0A	; 10
    15e4:	30 e0       	ldi	r19, 0x00	; 0
    15e6:	a3 01       	movw	r20, r6
    15e8:	0e 94 81 0d 	call	0x1b02	; 0x1b02 <__ultoa_invert>
    15ec:	c8 2e       	mov	r12, r24
    15ee:	c6 18       	sub	r12, r6
    15f0:	3f c0       	rjmp	.+126    	; 0x1670 <vfprintf+0x57a>
    15f2:	09 2d       	mov	r16, r9
    15f4:	85 37       	cpi	r24, 0x75	; 117
    15f6:	21 f4       	brne	.+8      	; 0x1600 <vfprintf+0x50a>
    15f8:	0f 7e       	andi	r16, 0xEF	; 239
    15fa:	2a e0       	ldi	r18, 0x0A	; 10
    15fc:	30 e0       	ldi	r19, 0x00	; 0
    15fe:	1d c0       	rjmp	.+58     	; 0x163a <vfprintf+0x544>
    1600:	09 7f       	andi	r16, 0xF9	; 249
    1602:	8f 36       	cpi	r24, 0x6F	; 111
    1604:	91 f0       	breq	.+36     	; 0x162a <vfprintf+0x534>
    1606:	18 f4       	brcc	.+6      	; 0x160e <vfprintf+0x518>
    1608:	88 35       	cpi	r24, 0x58	; 88
    160a:	59 f0       	breq	.+22     	; 0x1622 <vfprintf+0x52c>
    160c:	c3 c0       	rjmp	.+390    	; 0x1794 <vfprintf+0x69e>
    160e:	80 37       	cpi	r24, 0x70	; 112
    1610:	19 f0       	breq	.+6      	; 0x1618 <vfprintf+0x522>
    1612:	88 37       	cpi	r24, 0x78	; 120
    1614:	11 f0       	breq	.+4      	; 0x161a <vfprintf+0x524>
    1616:	be c0       	rjmp	.+380    	; 0x1794 <vfprintf+0x69e>
    1618:	00 61       	ori	r16, 0x10	; 16
    161a:	04 ff       	sbrs	r16, 4
    161c:	09 c0       	rjmp	.+18     	; 0x1630 <vfprintf+0x53a>
    161e:	04 60       	ori	r16, 0x04	; 4
    1620:	07 c0       	rjmp	.+14     	; 0x1630 <vfprintf+0x53a>
    1622:	94 fe       	sbrs	r9, 4
    1624:	08 c0       	rjmp	.+16     	; 0x1636 <vfprintf+0x540>
    1626:	06 60       	ori	r16, 0x06	; 6
    1628:	06 c0       	rjmp	.+12     	; 0x1636 <vfprintf+0x540>
    162a:	28 e0       	ldi	r18, 0x08	; 8
    162c:	30 e0       	ldi	r19, 0x00	; 0
    162e:	05 c0       	rjmp	.+10     	; 0x163a <vfprintf+0x544>
    1630:	20 e1       	ldi	r18, 0x10	; 16
    1632:	30 e0       	ldi	r19, 0x00	; 0
    1634:	02 c0       	rjmp	.+4      	; 0x163a <vfprintf+0x544>
    1636:	20 e1       	ldi	r18, 0x10	; 16
    1638:	32 e0       	ldi	r19, 0x02	; 2
    163a:	56 01       	movw	r10, r12
    163c:	07 ff       	sbrs	r16, 7
    163e:	09 c0       	rjmp	.+18     	; 0x1652 <vfprintf+0x55c>
    1640:	84 e0       	ldi	r24, 0x04	; 4
    1642:	a8 0e       	add	r10, r24
    1644:	b1 1c       	adc	r11, r1
    1646:	f6 01       	movw	r30, r12
    1648:	60 81       	ld	r22, Z
    164a:	71 81       	ldd	r23, Z+1	; 0x01
    164c:	82 81       	ldd	r24, Z+2	; 0x02
    164e:	93 81       	ldd	r25, Z+3	; 0x03
    1650:	08 c0       	rjmp	.+16     	; 0x1662 <vfprintf+0x56c>
    1652:	f2 e0       	ldi	r31, 0x02	; 2
    1654:	af 0e       	add	r10, r31
    1656:	b1 1c       	adc	r11, r1
    1658:	f6 01       	movw	r30, r12
    165a:	60 81       	ld	r22, Z
    165c:	71 81       	ldd	r23, Z+1	; 0x01
    165e:	80 e0       	ldi	r24, 0x00	; 0
    1660:	90 e0       	ldi	r25, 0x00	; 0
    1662:	a3 01       	movw	r20, r6
    1664:	0e 94 81 0d 	call	0x1b02	; 0x1b02 <__ultoa_invert>
    1668:	c8 2e       	mov	r12, r24
    166a:	c6 18       	sub	r12, r6
    166c:	0f 77       	andi	r16, 0x7F	; 127
    166e:	90 2e       	mov	r9, r16
    1670:	96 fe       	sbrs	r9, 6
    1672:	0b c0       	rjmp	.+22     	; 0x168a <vfprintf+0x594>
    1674:	09 2d       	mov	r16, r9
    1676:	0e 7f       	andi	r16, 0xFE	; 254
    1678:	c1 16       	cp	r12, r17
    167a:	50 f4       	brcc	.+20     	; 0x1690 <vfprintf+0x59a>
    167c:	94 fe       	sbrs	r9, 4
    167e:	0a c0       	rjmp	.+20     	; 0x1694 <vfprintf+0x59e>
    1680:	92 fc       	sbrc	r9, 2
    1682:	08 c0       	rjmp	.+16     	; 0x1694 <vfprintf+0x59e>
    1684:	09 2d       	mov	r16, r9
    1686:	0e 7e       	andi	r16, 0xEE	; 238
    1688:	05 c0       	rjmp	.+10     	; 0x1694 <vfprintf+0x59e>
    168a:	dc 2c       	mov	r13, r12
    168c:	09 2d       	mov	r16, r9
    168e:	03 c0       	rjmp	.+6      	; 0x1696 <vfprintf+0x5a0>
    1690:	dc 2c       	mov	r13, r12
    1692:	01 c0       	rjmp	.+2      	; 0x1696 <vfprintf+0x5a0>
    1694:	d1 2e       	mov	r13, r17
    1696:	04 ff       	sbrs	r16, 4
    1698:	0d c0       	rjmp	.+26     	; 0x16b4 <vfprintf+0x5be>
    169a:	fe 01       	movw	r30, r28
    169c:	ec 0d       	add	r30, r12
    169e:	f1 1d       	adc	r31, r1
    16a0:	80 81       	ld	r24, Z
    16a2:	80 33       	cpi	r24, 0x30	; 48
    16a4:	11 f4       	brne	.+4      	; 0x16aa <vfprintf+0x5b4>
    16a6:	09 7e       	andi	r16, 0xE9	; 233
    16a8:	09 c0       	rjmp	.+18     	; 0x16bc <vfprintf+0x5c6>
    16aa:	02 ff       	sbrs	r16, 2
    16ac:	06 c0       	rjmp	.+12     	; 0x16ba <vfprintf+0x5c4>
    16ae:	d3 94       	inc	r13
    16b0:	d3 94       	inc	r13
    16b2:	04 c0       	rjmp	.+8      	; 0x16bc <vfprintf+0x5c6>
    16b4:	80 2f       	mov	r24, r16
    16b6:	86 78       	andi	r24, 0x86	; 134
    16b8:	09 f0       	breq	.+2      	; 0x16bc <vfprintf+0x5c6>
    16ba:	d3 94       	inc	r13
    16bc:	03 fd       	sbrc	r16, 3
    16be:	11 c0       	rjmp	.+34     	; 0x16e2 <vfprintf+0x5ec>
    16c0:	00 ff       	sbrs	r16, 0
    16c2:	06 c0       	rjmp	.+12     	; 0x16d0 <vfprintf+0x5da>
    16c4:	1c 2d       	mov	r17, r12
    16c6:	d5 14       	cp	r13, r5
    16c8:	80 f4       	brcc	.+32     	; 0x16ea <vfprintf+0x5f4>
    16ca:	15 0d       	add	r17, r5
    16cc:	1d 19       	sub	r17, r13
    16ce:	0d c0       	rjmp	.+26     	; 0x16ea <vfprintf+0x5f4>
    16d0:	d5 14       	cp	r13, r5
    16d2:	58 f4       	brcc	.+22     	; 0x16ea <vfprintf+0x5f4>
    16d4:	b7 01       	movw	r22, r14
    16d6:	80 e2       	ldi	r24, 0x20	; 32
    16d8:	90 e0       	ldi	r25, 0x00	; 0
    16da:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <fputc>
    16de:	d3 94       	inc	r13
    16e0:	f7 cf       	rjmp	.-18     	; 0x16d0 <vfprintf+0x5da>
    16e2:	d5 14       	cp	r13, r5
    16e4:	10 f4       	brcc	.+4      	; 0x16ea <vfprintf+0x5f4>
    16e6:	5d 18       	sub	r5, r13
    16e8:	01 c0       	rjmp	.+2      	; 0x16ec <vfprintf+0x5f6>
    16ea:	51 2c       	mov	r5, r1
    16ec:	04 ff       	sbrs	r16, 4
    16ee:	10 c0       	rjmp	.+32     	; 0x1710 <vfprintf+0x61a>
    16f0:	b7 01       	movw	r22, r14
    16f2:	80 e3       	ldi	r24, 0x30	; 48
    16f4:	90 e0       	ldi	r25, 0x00	; 0
    16f6:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <fputc>
    16fa:	02 ff       	sbrs	r16, 2
    16fc:	17 c0       	rjmp	.+46     	; 0x172c <vfprintf+0x636>
    16fe:	01 fd       	sbrc	r16, 1
    1700:	03 c0       	rjmp	.+6      	; 0x1708 <vfprintf+0x612>
    1702:	88 e7       	ldi	r24, 0x78	; 120
    1704:	90 e0       	ldi	r25, 0x00	; 0
    1706:	02 c0       	rjmp	.+4      	; 0x170c <vfprintf+0x616>
    1708:	88 e5       	ldi	r24, 0x58	; 88
    170a:	90 e0       	ldi	r25, 0x00	; 0
    170c:	b7 01       	movw	r22, r14
    170e:	0c c0       	rjmp	.+24     	; 0x1728 <vfprintf+0x632>
    1710:	80 2f       	mov	r24, r16
    1712:	86 78       	andi	r24, 0x86	; 134
    1714:	59 f0       	breq	.+22     	; 0x172c <vfprintf+0x636>
    1716:	01 ff       	sbrs	r16, 1
    1718:	02 c0       	rjmp	.+4      	; 0x171e <vfprintf+0x628>
    171a:	8b e2       	ldi	r24, 0x2B	; 43
    171c:	01 c0       	rjmp	.+2      	; 0x1720 <vfprintf+0x62a>
    171e:	80 e2       	ldi	r24, 0x20	; 32
    1720:	07 fd       	sbrc	r16, 7
    1722:	8d e2       	ldi	r24, 0x2D	; 45
    1724:	b7 01       	movw	r22, r14
    1726:	90 e0       	ldi	r25, 0x00	; 0
    1728:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <fputc>
    172c:	c1 16       	cp	r12, r17
    172e:	38 f4       	brcc	.+14     	; 0x173e <vfprintf+0x648>
    1730:	b7 01       	movw	r22, r14
    1732:	80 e3       	ldi	r24, 0x30	; 48
    1734:	90 e0       	ldi	r25, 0x00	; 0
    1736:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <fputc>
    173a:	11 50       	subi	r17, 0x01	; 1
    173c:	f7 cf       	rjmp	.-18     	; 0x172c <vfprintf+0x636>
    173e:	ca 94       	dec	r12
    1740:	f3 01       	movw	r30, r6
    1742:	ec 0d       	add	r30, r12
    1744:	f1 1d       	adc	r31, r1
    1746:	80 81       	ld	r24, Z
    1748:	b7 01       	movw	r22, r14
    174a:	90 e0       	ldi	r25, 0x00	; 0
    174c:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <fputc>
    1750:	c1 10       	cpse	r12, r1
    1752:	f5 cf       	rjmp	.-22     	; 0x173e <vfprintf+0x648>
    1754:	15 c0       	rjmp	.+42     	; 0x1780 <vfprintf+0x68a>
    1756:	f4 e0       	ldi	r31, 0x04	; 4
    1758:	f5 15       	cp	r31, r5
    175a:	60 f5       	brcc	.+88     	; 0x17b4 <vfprintf+0x6be>
    175c:	84 e0       	ldi	r24, 0x04	; 4
    175e:	58 1a       	sub	r5, r24
    1760:	93 fe       	sbrs	r9, 3
    1762:	1f c0       	rjmp	.+62     	; 0x17a2 <vfprintf+0x6ac>
    1764:	01 11       	cpse	r16, r1
    1766:	27 c0       	rjmp	.+78     	; 0x17b6 <vfprintf+0x6c0>
    1768:	2c 85       	ldd	r18, Y+12	; 0x0c
    176a:	23 ff       	sbrs	r18, 3
    176c:	2a c0       	rjmp	.+84     	; 0x17c2 <vfprintf+0x6cc>
    176e:	0e e1       	ldi	r16, 0x1E	; 30
    1770:	11 e0       	ldi	r17, 0x01	; 1
    1772:	39 2d       	mov	r19, r9
    1774:	30 71       	andi	r19, 0x10	; 16
    1776:	93 2e       	mov	r9, r19
    1778:	f8 01       	movw	r30, r16
    177a:	84 91       	lpm	r24, Z
    177c:	81 11       	cpse	r24, r1
    177e:	24 c0       	rjmp	.+72     	; 0x17c8 <vfprintf+0x6d2>
    1780:	55 20       	and	r5, r5
    1782:	09 f4       	brne	.+2      	; 0x1786 <vfprintf+0x690>
    1784:	e4 cc       	rjmp	.-1592   	; 0x114e <vfprintf+0x58>
    1786:	b7 01       	movw	r22, r14
    1788:	80 e2       	ldi	r24, 0x20	; 32
    178a:	90 e0       	ldi	r25, 0x00	; 0
    178c:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <fputc>
    1790:	5a 94       	dec	r5
    1792:	f6 cf       	rjmp	.-20     	; 0x1780 <vfprintf+0x68a>
    1794:	f7 01       	movw	r30, r14
    1796:	86 81       	ldd	r24, Z+6	; 0x06
    1798:	97 81       	ldd	r25, Z+7	; 0x07
    179a:	26 c0       	rjmp	.+76     	; 0x17e8 <vfprintf+0x6f2>
    179c:	8f ef       	ldi	r24, 0xFF	; 255
    179e:	9f ef       	ldi	r25, 0xFF	; 255
    17a0:	23 c0       	rjmp	.+70     	; 0x17e8 <vfprintf+0x6f2>
    17a2:	b7 01       	movw	r22, r14
    17a4:	80 e2       	ldi	r24, 0x20	; 32
    17a6:	90 e0       	ldi	r25, 0x00	; 0
    17a8:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <fputc>
    17ac:	5a 94       	dec	r5
    17ae:	51 10       	cpse	r5, r1
    17b0:	f8 cf       	rjmp	.-16     	; 0x17a2 <vfprintf+0x6ac>
    17b2:	d8 cf       	rjmp	.-80     	; 0x1764 <vfprintf+0x66e>
    17b4:	51 2c       	mov	r5, r1
    17b6:	b7 01       	movw	r22, r14
    17b8:	80 2f       	mov	r24, r16
    17ba:	90 e0       	ldi	r25, 0x00	; 0
    17bc:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <fputc>
    17c0:	d3 cf       	rjmp	.-90     	; 0x1768 <vfprintf+0x672>
    17c2:	02 e2       	ldi	r16, 0x22	; 34
    17c4:	11 e0       	ldi	r17, 0x01	; 1
    17c6:	d5 cf       	rjmp	.-86     	; 0x1772 <vfprintf+0x67c>
    17c8:	91 10       	cpse	r9, r1
    17ca:	80 52       	subi	r24, 0x20	; 32
    17cc:	b7 01       	movw	r22, r14
    17ce:	90 e0       	ldi	r25, 0x00	; 0
    17d0:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <fputc>
    17d4:	0f 5f       	subi	r16, 0xFF	; 255
    17d6:	1f 4f       	sbci	r17, 0xFF	; 255
    17d8:	cf cf       	rjmp	.-98     	; 0x1778 <vfprintf+0x682>
    17da:	23 e0       	ldi	r18, 0x03	; 3
    17dc:	25 15       	cp	r18, r5
    17de:	10 f4       	brcc	.+4      	; 0x17e4 <vfprintf+0x6ee>
    17e0:	83 e0       	ldi	r24, 0x03	; 3
    17e2:	bd cf       	rjmp	.-134    	; 0x175e <vfprintf+0x668>
    17e4:	51 2c       	mov	r5, r1
    17e6:	c0 cf       	rjmp	.-128    	; 0x1768 <vfprintf+0x672>
    17e8:	60 96       	adiw	r28, 0x10	; 16
    17ea:	e2 e1       	ldi	r30, 0x12	; 18
    17ec:	0c 94 1a 0c 	jmp	0x1834	; 0x1834 <__epilogue_restores__>

000017f0 <__tablejump2__>:
    17f0:	ee 0f       	add	r30, r30
    17f2:	ff 1f       	adc	r31, r31
    17f4:	05 90       	lpm	r0, Z+
    17f6:	f4 91       	lpm	r31, Z
    17f8:	e0 2d       	mov	r30, r0
    17fa:	09 94       	ijmp

000017fc <__prologue_saves__>:
    17fc:	2f 92       	push	r2
    17fe:	3f 92       	push	r3
    1800:	4f 92       	push	r4
    1802:	5f 92       	push	r5
    1804:	6f 92       	push	r6
    1806:	7f 92       	push	r7
    1808:	8f 92       	push	r8
    180a:	9f 92       	push	r9
    180c:	af 92       	push	r10
    180e:	bf 92       	push	r11
    1810:	cf 92       	push	r12
    1812:	df 92       	push	r13
    1814:	ef 92       	push	r14
    1816:	ff 92       	push	r15
    1818:	0f 93       	push	r16
    181a:	1f 93       	push	r17
    181c:	cf 93       	push	r28
    181e:	df 93       	push	r29
    1820:	cd b7       	in	r28, 0x3d	; 61
    1822:	de b7       	in	r29, 0x3e	; 62
    1824:	ca 1b       	sub	r28, r26
    1826:	db 0b       	sbc	r29, r27
    1828:	0f b6       	in	r0, 0x3f	; 63
    182a:	f8 94       	cli
    182c:	de bf       	out	0x3e, r29	; 62
    182e:	0f be       	out	0x3f, r0	; 63
    1830:	cd bf       	out	0x3d, r28	; 61
    1832:	09 94       	ijmp

00001834 <__epilogue_restores__>:
    1834:	2a 88       	ldd	r2, Y+18	; 0x12
    1836:	39 88       	ldd	r3, Y+17	; 0x11
    1838:	48 88       	ldd	r4, Y+16	; 0x10
    183a:	5f 84       	ldd	r5, Y+15	; 0x0f
    183c:	6e 84       	ldd	r6, Y+14	; 0x0e
    183e:	7d 84       	ldd	r7, Y+13	; 0x0d
    1840:	8c 84       	ldd	r8, Y+12	; 0x0c
    1842:	9b 84       	ldd	r9, Y+11	; 0x0b
    1844:	aa 84       	ldd	r10, Y+10	; 0x0a
    1846:	b9 84       	ldd	r11, Y+9	; 0x09
    1848:	c8 84       	ldd	r12, Y+8	; 0x08
    184a:	df 80       	ldd	r13, Y+7	; 0x07
    184c:	ee 80       	ldd	r14, Y+6	; 0x06
    184e:	fd 80       	ldd	r15, Y+5	; 0x05
    1850:	0c 81       	ldd	r16, Y+4	; 0x04
    1852:	1b 81       	ldd	r17, Y+3	; 0x03
    1854:	aa 81       	ldd	r26, Y+2	; 0x02
    1856:	b9 81       	ldd	r27, Y+1	; 0x01
    1858:	ce 0f       	add	r28, r30
    185a:	d1 1d       	adc	r29, r1
    185c:	0f b6       	in	r0, 0x3f	; 63
    185e:	f8 94       	cli
    1860:	de bf       	out	0x3e, r29	; 62
    1862:	0f be       	out	0x3f, r0	; 63
    1864:	cd bf       	out	0x3d, r28	; 61
    1866:	ed 01       	movw	r28, r26
    1868:	08 95       	ret

0000186a <__ftoa_engine>:
    186a:	28 30       	cpi	r18, 0x08	; 8
    186c:	08 f0       	brcs	.+2      	; 0x1870 <__ftoa_engine+0x6>
    186e:	27 e0       	ldi	r18, 0x07	; 7
    1870:	33 27       	eor	r19, r19
    1872:	da 01       	movw	r26, r20
    1874:	99 0f       	add	r25, r25
    1876:	31 1d       	adc	r19, r1
    1878:	87 fd       	sbrc	r24, 7
    187a:	91 60       	ori	r25, 0x01	; 1
    187c:	00 96       	adiw	r24, 0x00	; 0
    187e:	61 05       	cpc	r22, r1
    1880:	71 05       	cpc	r23, r1
    1882:	39 f4       	brne	.+14     	; 0x1892 <__ftoa_engine+0x28>
    1884:	32 60       	ori	r19, 0x02	; 2
    1886:	2e 5f       	subi	r18, 0xFE	; 254
    1888:	3d 93       	st	X+, r19
    188a:	30 e3       	ldi	r19, 0x30	; 48
    188c:	2a 95       	dec	r18
    188e:	e1 f7       	brne	.-8      	; 0x1888 <__ftoa_engine+0x1e>
    1890:	08 95       	ret
    1892:	9f 3f       	cpi	r25, 0xFF	; 255
    1894:	30 f0       	brcs	.+12     	; 0x18a2 <__ftoa_engine+0x38>
    1896:	80 38       	cpi	r24, 0x80	; 128
    1898:	71 05       	cpc	r23, r1
    189a:	61 05       	cpc	r22, r1
    189c:	09 f0       	breq	.+2      	; 0x18a0 <__ftoa_engine+0x36>
    189e:	3c 5f       	subi	r19, 0xFC	; 252
    18a0:	3c 5f       	subi	r19, 0xFC	; 252
    18a2:	3d 93       	st	X+, r19
    18a4:	91 30       	cpi	r25, 0x01	; 1
    18a6:	08 f0       	brcs	.+2      	; 0x18aa <__ftoa_engine+0x40>
    18a8:	80 68       	ori	r24, 0x80	; 128
    18aa:	91 1d       	adc	r25, r1
    18ac:	df 93       	push	r29
    18ae:	cf 93       	push	r28
    18b0:	1f 93       	push	r17
    18b2:	0f 93       	push	r16
    18b4:	ff 92       	push	r15
    18b6:	ef 92       	push	r14
    18b8:	19 2f       	mov	r17, r25
    18ba:	98 7f       	andi	r25, 0xF8	; 248
    18bc:	96 95       	lsr	r25
    18be:	e9 2f       	mov	r30, r25
    18c0:	96 95       	lsr	r25
    18c2:	96 95       	lsr	r25
    18c4:	e9 0f       	add	r30, r25
    18c6:	ff 27       	eor	r31, r31
    18c8:	e0 58       	subi	r30, 0x80	; 128
    18ca:	fe 4f       	sbci	r31, 0xFE	; 254
    18cc:	99 27       	eor	r25, r25
    18ce:	33 27       	eor	r19, r19
    18d0:	ee 24       	eor	r14, r14
    18d2:	ff 24       	eor	r15, r15
    18d4:	a7 01       	movw	r20, r14
    18d6:	e7 01       	movw	r28, r14
    18d8:	05 90       	lpm	r0, Z+
    18da:	08 94       	sec
    18dc:	07 94       	ror	r0
    18de:	28 f4       	brcc	.+10     	; 0x18ea <__ftoa_engine+0x80>
    18e0:	36 0f       	add	r19, r22
    18e2:	e7 1e       	adc	r14, r23
    18e4:	f8 1e       	adc	r15, r24
    18e6:	49 1f       	adc	r20, r25
    18e8:	51 1d       	adc	r21, r1
    18ea:	66 0f       	add	r22, r22
    18ec:	77 1f       	adc	r23, r23
    18ee:	88 1f       	adc	r24, r24
    18f0:	99 1f       	adc	r25, r25
    18f2:	06 94       	lsr	r0
    18f4:	a1 f7       	brne	.-24     	; 0x18de <__ftoa_engine+0x74>
    18f6:	05 90       	lpm	r0, Z+
    18f8:	07 94       	ror	r0
    18fa:	28 f4       	brcc	.+10     	; 0x1906 <__ftoa_engine+0x9c>
    18fc:	e7 0e       	add	r14, r23
    18fe:	f8 1e       	adc	r15, r24
    1900:	49 1f       	adc	r20, r25
    1902:	56 1f       	adc	r21, r22
    1904:	c1 1d       	adc	r28, r1
    1906:	77 0f       	add	r23, r23
    1908:	88 1f       	adc	r24, r24
    190a:	99 1f       	adc	r25, r25
    190c:	66 1f       	adc	r22, r22
    190e:	06 94       	lsr	r0
    1910:	a1 f7       	brne	.-24     	; 0x18fa <__ftoa_engine+0x90>
    1912:	05 90       	lpm	r0, Z+
    1914:	07 94       	ror	r0
    1916:	28 f4       	brcc	.+10     	; 0x1922 <__ftoa_engine+0xb8>
    1918:	f8 0e       	add	r15, r24
    191a:	49 1f       	adc	r20, r25
    191c:	56 1f       	adc	r21, r22
    191e:	c7 1f       	adc	r28, r23
    1920:	d1 1d       	adc	r29, r1
    1922:	88 0f       	add	r24, r24
    1924:	99 1f       	adc	r25, r25
    1926:	66 1f       	adc	r22, r22
    1928:	77 1f       	adc	r23, r23
    192a:	06 94       	lsr	r0
    192c:	a1 f7       	brne	.-24     	; 0x1916 <__ftoa_engine+0xac>
    192e:	05 90       	lpm	r0, Z+
    1930:	07 94       	ror	r0
    1932:	20 f4       	brcc	.+8      	; 0x193c <__ftoa_engine+0xd2>
    1934:	49 0f       	add	r20, r25
    1936:	56 1f       	adc	r21, r22
    1938:	c7 1f       	adc	r28, r23
    193a:	d8 1f       	adc	r29, r24
    193c:	99 0f       	add	r25, r25
    193e:	66 1f       	adc	r22, r22
    1940:	77 1f       	adc	r23, r23
    1942:	88 1f       	adc	r24, r24
    1944:	06 94       	lsr	r0
    1946:	a9 f7       	brne	.-22     	; 0x1932 <__ftoa_engine+0xc8>
    1948:	84 91       	lpm	r24, Z
    194a:	10 95       	com	r17
    194c:	17 70       	andi	r17, 0x07	; 7
    194e:	41 f0       	breq	.+16     	; 0x1960 <__ftoa_engine+0xf6>
    1950:	d6 95       	lsr	r29
    1952:	c7 95       	ror	r28
    1954:	57 95       	ror	r21
    1956:	47 95       	ror	r20
    1958:	f7 94       	ror	r15
    195a:	e7 94       	ror	r14
    195c:	1a 95       	dec	r17
    195e:	c1 f7       	brne	.-16     	; 0x1950 <__ftoa_engine+0xe6>
    1960:	e6 e2       	ldi	r30, 0x26	; 38
    1962:	f1 e0       	ldi	r31, 0x01	; 1
    1964:	68 94       	set
    1966:	15 90       	lpm	r1, Z+
    1968:	15 91       	lpm	r17, Z+
    196a:	35 91       	lpm	r19, Z+
    196c:	65 91       	lpm	r22, Z+
    196e:	95 91       	lpm	r25, Z+
    1970:	05 90       	lpm	r0, Z+
    1972:	7f e2       	ldi	r23, 0x2F	; 47
    1974:	73 95       	inc	r23
    1976:	e1 18       	sub	r14, r1
    1978:	f1 0a       	sbc	r15, r17
    197a:	43 0b       	sbc	r20, r19
    197c:	56 0b       	sbc	r21, r22
    197e:	c9 0b       	sbc	r28, r25
    1980:	d0 09       	sbc	r29, r0
    1982:	c0 f7       	brcc	.-16     	; 0x1974 <__ftoa_engine+0x10a>
    1984:	e1 0c       	add	r14, r1
    1986:	f1 1e       	adc	r15, r17
    1988:	43 1f       	adc	r20, r19
    198a:	56 1f       	adc	r21, r22
    198c:	c9 1f       	adc	r28, r25
    198e:	d0 1d       	adc	r29, r0
    1990:	7e f4       	brtc	.+30     	; 0x19b0 <__ftoa_engine+0x146>
    1992:	70 33       	cpi	r23, 0x30	; 48
    1994:	11 f4       	brne	.+4      	; 0x199a <__ftoa_engine+0x130>
    1996:	8a 95       	dec	r24
    1998:	e6 cf       	rjmp	.-52     	; 0x1966 <__ftoa_engine+0xfc>
    199a:	e8 94       	clt
    199c:	01 50       	subi	r16, 0x01	; 1
    199e:	30 f0       	brcs	.+12     	; 0x19ac <__ftoa_engine+0x142>
    19a0:	08 0f       	add	r16, r24
    19a2:	0a f4       	brpl	.+2      	; 0x19a6 <__ftoa_engine+0x13c>
    19a4:	00 27       	eor	r16, r16
    19a6:	02 17       	cp	r16, r18
    19a8:	08 f4       	brcc	.+2      	; 0x19ac <__ftoa_engine+0x142>
    19aa:	20 2f       	mov	r18, r16
    19ac:	23 95       	inc	r18
    19ae:	02 2f       	mov	r16, r18
    19b0:	7a 33       	cpi	r23, 0x3A	; 58
    19b2:	28 f0       	brcs	.+10     	; 0x19be <__ftoa_engine+0x154>
    19b4:	79 e3       	ldi	r23, 0x39	; 57
    19b6:	7d 93       	st	X+, r23
    19b8:	2a 95       	dec	r18
    19ba:	e9 f7       	brne	.-6      	; 0x19b6 <__ftoa_engine+0x14c>
    19bc:	10 c0       	rjmp	.+32     	; 0x19de <__ftoa_engine+0x174>
    19be:	7d 93       	st	X+, r23
    19c0:	2a 95       	dec	r18
    19c2:	89 f6       	brne	.-94     	; 0x1966 <__ftoa_engine+0xfc>
    19c4:	06 94       	lsr	r0
    19c6:	97 95       	ror	r25
    19c8:	67 95       	ror	r22
    19ca:	37 95       	ror	r19
    19cc:	17 95       	ror	r17
    19ce:	17 94       	ror	r1
    19d0:	e1 18       	sub	r14, r1
    19d2:	f1 0a       	sbc	r15, r17
    19d4:	43 0b       	sbc	r20, r19
    19d6:	56 0b       	sbc	r21, r22
    19d8:	c9 0b       	sbc	r28, r25
    19da:	d0 09       	sbc	r29, r0
    19dc:	98 f0       	brcs	.+38     	; 0x1a04 <__ftoa_engine+0x19a>
    19de:	23 95       	inc	r18
    19e0:	7e 91       	ld	r23, -X
    19e2:	73 95       	inc	r23
    19e4:	7a 33       	cpi	r23, 0x3A	; 58
    19e6:	08 f0       	brcs	.+2      	; 0x19ea <__ftoa_engine+0x180>
    19e8:	70 e3       	ldi	r23, 0x30	; 48
    19ea:	7c 93       	st	X, r23
    19ec:	20 13       	cpse	r18, r16
    19ee:	b8 f7       	brcc	.-18     	; 0x19de <__ftoa_engine+0x174>
    19f0:	7e 91       	ld	r23, -X
    19f2:	70 61       	ori	r23, 0x10	; 16
    19f4:	7d 93       	st	X+, r23
    19f6:	30 f0       	brcs	.+12     	; 0x1a04 <__ftoa_engine+0x19a>
    19f8:	83 95       	inc	r24
    19fa:	71 e3       	ldi	r23, 0x31	; 49
    19fc:	7d 93       	st	X+, r23
    19fe:	70 e3       	ldi	r23, 0x30	; 48
    1a00:	2a 95       	dec	r18
    1a02:	e1 f7       	brne	.-8      	; 0x19fc <__ftoa_engine+0x192>
    1a04:	11 24       	eor	r1, r1
    1a06:	ef 90       	pop	r14
    1a08:	ff 90       	pop	r15
    1a0a:	0f 91       	pop	r16
    1a0c:	1f 91       	pop	r17
    1a0e:	cf 91       	pop	r28
    1a10:	df 91       	pop	r29
    1a12:	99 27       	eor	r25, r25
    1a14:	87 fd       	sbrc	r24, 7
    1a16:	90 95       	com	r25
    1a18:	08 95       	ret

00001a1a <strnlen_P>:
    1a1a:	fc 01       	movw	r30, r24
    1a1c:	05 90       	lpm	r0, Z+
    1a1e:	61 50       	subi	r22, 0x01	; 1
    1a20:	70 40       	sbci	r23, 0x00	; 0
    1a22:	01 10       	cpse	r0, r1
    1a24:	d8 f7       	brcc	.-10     	; 0x1a1c <strnlen_P+0x2>
    1a26:	80 95       	com	r24
    1a28:	90 95       	com	r25
    1a2a:	8e 0f       	add	r24, r30
    1a2c:	9f 1f       	adc	r25, r31
    1a2e:	08 95       	ret

00001a30 <strnlen>:
    1a30:	fc 01       	movw	r30, r24
    1a32:	61 50       	subi	r22, 0x01	; 1
    1a34:	70 40       	sbci	r23, 0x00	; 0
    1a36:	01 90       	ld	r0, Z+
    1a38:	01 10       	cpse	r0, r1
    1a3a:	d8 f7       	brcc	.-10     	; 0x1a32 <strnlen+0x2>
    1a3c:	80 95       	com	r24
    1a3e:	90 95       	com	r25
    1a40:	8e 0f       	add	r24, r30
    1a42:	9f 1f       	adc	r25, r31
    1a44:	08 95       	ret

00001a46 <fputc>:
    1a46:	0f 93       	push	r16
    1a48:	1f 93       	push	r17
    1a4a:	cf 93       	push	r28
    1a4c:	df 93       	push	r29
    1a4e:	fb 01       	movw	r30, r22
    1a50:	23 81       	ldd	r18, Z+3	; 0x03
    1a52:	21 fd       	sbrc	r18, 1
    1a54:	03 c0       	rjmp	.+6      	; 0x1a5c <fputc+0x16>
    1a56:	8f ef       	ldi	r24, 0xFF	; 255
    1a58:	9f ef       	ldi	r25, 0xFF	; 255
    1a5a:	2c c0       	rjmp	.+88     	; 0x1ab4 <fputc+0x6e>
    1a5c:	22 ff       	sbrs	r18, 2
    1a5e:	16 c0       	rjmp	.+44     	; 0x1a8c <fputc+0x46>
    1a60:	46 81       	ldd	r20, Z+6	; 0x06
    1a62:	57 81       	ldd	r21, Z+7	; 0x07
    1a64:	24 81       	ldd	r18, Z+4	; 0x04
    1a66:	35 81       	ldd	r19, Z+5	; 0x05
    1a68:	42 17       	cp	r20, r18
    1a6a:	53 07       	cpc	r21, r19
    1a6c:	44 f4       	brge	.+16     	; 0x1a7e <fputc+0x38>
    1a6e:	a0 81       	ld	r26, Z
    1a70:	b1 81       	ldd	r27, Z+1	; 0x01
    1a72:	9d 01       	movw	r18, r26
    1a74:	2f 5f       	subi	r18, 0xFF	; 255
    1a76:	3f 4f       	sbci	r19, 0xFF	; 255
    1a78:	31 83       	std	Z+1, r19	; 0x01
    1a7a:	20 83       	st	Z, r18
    1a7c:	8c 93       	st	X, r24
    1a7e:	26 81       	ldd	r18, Z+6	; 0x06
    1a80:	37 81       	ldd	r19, Z+7	; 0x07
    1a82:	2f 5f       	subi	r18, 0xFF	; 255
    1a84:	3f 4f       	sbci	r19, 0xFF	; 255
    1a86:	37 83       	std	Z+7, r19	; 0x07
    1a88:	26 83       	std	Z+6, r18	; 0x06
    1a8a:	14 c0       	rjmp	.+40     	; 0x1ab4 <fputc+0x6e>
    1a8c:	8b 01       	movw	r16, r22
    1a8e:	ec 01       	movw	r28, r24
    1a90:	fb 01       	movw	r30, r22
    1a92:	00 84       	ldd	r0, Z+8	; 0x08
    1a94:	f1 85       	ldd	r31, Z+9	; 0x09
    1a96:	e0 2d       	mov	r30, r0
    1a98:	09 95       	icall
    1a9a:	89 2b       	or	r24, r25
    1a9c:	e1 f6       	brne	.-72     	; 0x1a56 <fputc+0x10>
    1a9e:	d8 01       	movw	r26, r16
    1aa0:	16 96       	adiw	r26, 0x06	; 6
    1aa2:	8d 91       	ld	r24, X+
    1aa4:	9c 91       	ld	r25, X
    1aa6:	17 97       	sbiw	r26, 0x07	; 7
    1aa8:	01 96       	adiw	r24, 0x01	; 1
    1aaa:	17 96       	adiw	r26, 0x07	; 7
    1aac:	9c 93       	st	X, r25
    1aae:	8e 93       	st	-X, r24
    1ab0:	16 97       	sbiw	r26, 0x06	; 6
    1ab2:	ce 01       	movw	r24, r28
    1ab4:	df 91       	pop	r29
    1ab6:	cf 91       	pop	r28
    1ab8:	1f 91       	pop	r17
    1aba:	0f 91       	pop	r16
    1abc:	08 95       	ret

00001abe <sprintf>:
    1abe:	ae e0       	ldi	r26, 0x0E	; 14
    1ac0:	b0 e0       	ldi	r27, 0x00	; 0
    1ac2:	e5 e6       	ldi	r30, 0x65	; 101
    1ac4:	fd e0       	ldi	r31, 0x0D	; 13
    1ac6:	0c 94 0c 0c 	jmp	0x1818	; 0x1818 <__prologue_saves__+0x1c>
    1aca:	0d 89       	ldd	r16, Y+21	; 0x15
    1acc:	1e 89       	ldd	r17, Y+22	; 0x16
    1ace:	86 e0       	ldi	r24, 0x06	; 6
    1ad0:	8c 83       	std	Y+4, r24	; 0x04
    1ad2:	1a 83       	std	Y+2, r17	; 0x02
    1ad4:	09 83       	std	Y+1, r16	; 0x01
    1ad6:	8f ef       	ldi	r24, 0xFF	; 255
    1ad8:	9f e7       	ldi	r25, 0x7F	; 127
    1ada:	9e 83       	std	Y+6, r25	; 0x06
    1adc:	8d 83       	std	Y+5, r24	; 0x05
    1ade:	ae 01       	movw	r20, r28
    1ae0:	47 5e       	subi	r20, 0xE7	; 231
    1ae2:	5f 4f       	sbci	r21, 0xFF	; 255
    1ae4:	6f 89       	ldd	r22, Y+23	; 0x17
    1ae6:	78 8d       	ldd	r23, Y+24	; 0x18
    1ae8:	ce 01       	movw	r24, r28
    1aea:	01 96       	adiw	r24, 0x01	; 1
    1aec:	0e 94 7b 08 	call	0x10f6	; 0x10f6 <vfprintf>
    1af0:	ef 81       	ldd	r30, Y+7	; 0x07
    1af2:	f8 85       	ldd	r31, Y+8	; 0x08
    1af4:	e0 0f       	add	r30, r16
    1af6:	f1 1f       	adc	r31, r17
    1af8:	10 82       	st	Z, r1
    1afa:	2e 96       	adiw	r28, 0x0e	; 14
    1afc:	e4 e0       	ldi	r30, 0x04	; 4
    1afe:	0c 94 28 0c 	jmp	0x1850	; 0x1850 <__epilogue_restores__+0x1c>

00001b02 <__ultoa_invert>:
    1b02:	fa 01       	movw	r30, r20
    1b04:	aa 27       	eor	r26, r26
    1b06:	28 30       	cpi	r18, 0x08	; 8
    1b08:	51 f1       	breq	.+84     	; 0x1b5e <__ultoa_invert+0x5c>
    1b0a:	20 31       	cpi	r18, 0x10	; 16
    1b0c:	81 f1       	breq	.+96     	; 0x1b6e <__ultoa_invert+0x6c>
    1b0e:	e8 94       	clt
    1b10:	6f 93       	push	r22
    1b12:	6e 7f       	andi	r22, 0xFE	; 254
    1b14:	6e 5f       	subi	r22, 0xFE	; 254
    1b16:	7f 4f       	sbci	r23, 0xFF	; 255
    1b18:	8f 4f       	sbci	r24, 0xFF	; 255
    1b1a:	9f 4f       	sbci	r25, 0xFF	; 255
    1b1c:	af 4f       	sbci	r26, 0xFF	; 255
    1b1e:	b1 e0       	ldi	r27, 0x01	; 1
    1b20:	3e d0       	rcall	.+124    	; 0x1b9e <__ultoa_invert+0x9c>
    1b22:	b4 e0       	ldi	r27, 0x04	; 4
    1b24:	3c d0       	rcall	.+120    	; 0x1b9e <__ultoa_invert+0x9c>
    1b26:	67 0f       	add	r22, r23
    1b28:	78 1f       	adc	r23, r24
    1b2a:	89 1f       	adc	r24, r25
    1b2c:	9a 1f       	adc	r25, r26
    1b2e:	a1 1d       	adc	r26, r1
    1b30:	68 0f       	add	r22, r24
    1b32:	79 1f       	adc	r23, r25
    1b34:	8a 1f       	adc	r24, r26
    1b36:	91 1d       	adc	r25, r1
    1b38:	a1 1d       	adc	r26, r1
    1b3a:	6a 0f       	add	r22, r26
    1b3c:	71 1d       	adc	r23, r1
    1b3e:	81 1d       	adc	r24, r1
    1b40:	91 1d       	adc	r25, r1
    1b42:	a1 1d       	adc	r26, r1
    1b44:	20 d0       	rcall	.+64     	; 0x1b86 <__ultoa_invert+0x84>
    1b46:	09 f4       	brne	.+2      	; 0x1b4a <__ultoa_invert+0x48>
    1b48:	68 94       	set
    1b4a:	3f 91       	pop	r19
    1b4c:	2a e0       	ldi	r18, 0x0A	; 10
    1b4e:	26 9f       	mul	r18, r22
    1b50:	11 24       	eor	r1, r1
    1b52:	30 19       	sub	r19, r0
    1b54:	30 5d       	subi	r19, 0xD0	; 208
    1b56:	31 93       	st	Z+, r19
    1b58:	de f6       	brtc	.-74     	; 0x1b10 <__ultoa_invert+0xe>
    1b5a:	cf 01       	movw	r24, r30
    1b5c:	08 95       	ret
    1b5e:	46 2f       	mov	r20, r22
    1b60:	47 70       	andi	r20, 0x07	; 7
    1b62:	40 5d       	subi	r20, 0xD0	; 208
    1b64:	41 93       	st	Z+, r20
    1b66:	b3 e0       	ldi	r27, 0x03	; 3
    1b68:	0f d0       	rcall	.+30     	; 0x1b88 <__ultoa_invert+0x86>
    1b6a:	c9 f7       	brne	.-14     	; 0x1b5e <__ultoa_invert+0x5c>
    1b6c:	f6 cf       	rjmp	.-20     	; 0x1b5a <__ultoa_invert+0x58>
    1b6e:	46 2f       	mov	r20, r22
    1b70:	4f 70       	andi	r20, 0x0F	; 15
    1b72:	40 5d       	subi	r20, 0xD0	; 208
    1b74:	4a 33       	cpi	r20, 0x3A	; 58
    1b76:	18 f0       	brcs	.+6      	; 0x1b7e <__ultoa_invert+0x7c>
    1b78:	49 5d       	subi	r20, 0xD9	; 217
    1b7a:	31 fd       	sbrc	r19, 1
    1b7c:	40 52       	subi	r20, 0x20	; 32
    1b7e:	41 93       	st	Z+, r20
    1b80:	02 d0       	rcall	.+4      	; 0x1b86 <__ultoa_invert+0x84>
    1b82:	a9 f7       	brne	.-22     	; 0x1b6e <__ultoa_invert+0x6c>
    1b84:	ea cf       	rjmp	.-44     	; 0x1b5a <__ultoa_invert+0x58>
    1b86:	b4 e0       	ldi	r27, 0x04	; 4
    1b88:	a6 95       	lsr	r26
    1b8a:	97 95       	ror	r25
    1b8c:	87 95       	ror	r24
    1b8e:	77 95       	ror	r23
    1b90:	67 95       	ror	r22
    1b92:	ba 95       	dec	r27
    1b94:	c9 f7       	brne	.-14     	; 0x1b88 <__ultoa_invert+0x86>
    1b96:	00 97       	sbiw	r24, 0x00	; 0
    1b98:	61 05       	cpc	r22, r1
    1b9a:	71 05       	cpc	r23, r1
    1b9c:	08 95       	ret
    1b9e:	9b 01       	movw	r18, r22
    1ba0:	ac 01       	movw	r20, r24
    1ba2:	0a 2e       	mov	r0, r26
    1ba4:	06 94       	lsr	r0
    1ba6:	57 95       	ror	r21
    1ba8:	47 95       	ror	r20
    1baa:	37 95       	ror	r19
    1bac:	27 95       	ror	r18
    1bae:	ba 95       	dec	r27
    1bb0:	c9 f7       	brne	.-14     	; 0x1ba4 <__ultoa_invert+0xa2>
    1bb2:	62 0f       	add	r22, r18
    1bb4:	73 1f       	adc	r23, r19
    1bb6:	84 1f       	adc	r24, r20
    1bb8:	95 1f       	adc	r25, r21
    1bba:	a0 1d       	adc	r26, r0
    1bbc:	08 95       	ret

00001bbe <_exit>:
    1bbe:	f8 94       	cli

00001bc0 <__stop_program>:
    1bc0:	ff cf       	rjmp	.-2      	; 0x1bc0 <__stop_program>
