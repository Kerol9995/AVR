
MG12232.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001e6  00800100  00001eba  00001f4e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001eba  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000b8  008002e6  008002e6  00002134  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00002134  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002190  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001c8  00000000  00000000  000021d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002663  00000000  00000000  00002398  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000da4  00000000  00000000  000049fb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000014cf  00000000  00000000  0000579f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000584  00000000  00000000  00006c70  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000748  00000000  00000000  000071f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000246e  00000000  00000000  0000793c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000170  00000000  00000000  00009daa  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 10 01 	jmp	0x220	; 0x220 <__ctors_end>
       4:	0c 94 75 08 	jmp	0x10ea	; 0x10ea <__vector_1>
       8:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
       c:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
      10:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
      14:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
      18:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
      1c:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
      20:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
      24:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
      28:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
      2c:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
      30:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
      34:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
      38:	0c 94 16 08 	jmp	0x102c	; 0x102c <__vector_14>
      3c:	0c 94 49 08 	jmp	0x1092	; 0x1092 <__vector_15>
      40:	0c 94 ed 03 	jmp	0x7da	; 0x7da <__vector_16>
      44:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
      48:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
      4c:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
      50:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
      54:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__vector_21>
      58:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
      5c:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
      60:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
      64:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
      68:	78 07       	cpc	r23, r24
      6a:	86 07       	cpc	r24, r22
      6c:	86 07       	cpc	r24, r22
      6e:	86 07       	cpc	r24, r22
      70:	86 07       	cpc	r24, r22
      72:	86 07       	cpc	r24, r22
      74:	86 07       	cpc	r24, r22
      76:	86 07       	cpc	r24, r22
      78:	86 07       	cpc	r24, r22
      7a:	86 07       	cpc	r24, r22
      7c:	86 07       	cpc	r24, r22
      7e:	82 07       	cpc	r24, r18
      80:	86 07       	cpc	r24, r22
      82:	7d 07       	cpc	r23, r29
      84:	73 07       	cpc	r23, r19
      86:	86 07       	cpc	r24, r22
      88:	38 06       	cpc	r3, r24
      8a:	3d 06       	cpc	r3, r29
      8c:	42 06       	cpc	r4, r18
      8e:	47 06       	cpc	r4, r23
      90:	4c 06       	cpc	r4, r28
      92:	51 06       	cpc	r5, r17
      94:	56 06       	cpc	r5, r22
      96:	5b 06       	cpc	r5, r27
      98:	60 06       	cpc	r6, r16
      9a:	65 06       	cpc	r6, r21
      9c:	86 07       	cpc	r24, r22
      9e:	86 07       	cpc	r24, r22
      a0:	86 07       	cpc	r24, r22
      a2:	6a 06       	cpc	r6, r26
      a4:	86 07       	cpc	r24, r22
      a6:	86 07       	cpc	r24, r22
      a8:	86 07       	cpc	r24, r22
      aa:	6f 06       	cpc	r6, r31
      ac:	74 06       	cpc	r7, r20
      ae:	79 06       	cpc	r7, r25
      b0:	7e 06       	cpc	r7, r30
      b2:	83 06       	cpc	r8, r19
      b4:	88 06       	cpc	r8, r24
      b6:	8d 06       	cpc	r8, r29
      b8:	92 06       	cpc	r9, r18
      ba:	97 06       	cpc	r9, r23
      bc:	9c 06       	cpc	r9, r28
      be:	a1 06       	cpc	r10, r17
      c0:	a6 06       	cpc	r10, r22
      c2:	ab 06       	cpc	r10, r27
      c4:	b0 06       	cpc	r11, r16
      c6:	b5 06       	cpc	r11, r21
      c8:	ba 06       	cpc	r11, r26
      ca:	bf 06       	cpc	r11, r31
      cc:	c4 06       	cpc	r12, r20
      ce:	c9 06       	cpc	r12, r25
      d0:	ce 06       	cpc	r12, r30
      d2:	d3 06       	cpc	r13, r19
      d4:	d8 06       	cpc	r13, r24
      d6:	dd 06       	cpc	r13, r29
      d8:	e2 06       	cpc	r14, r18
      da:	e7 06       	cpc	r14, r23
      dc:	ec 06       	cpc	r14, r28
      de:	86 07       	cpc	r24, r22
      e0:	86 07       	cpc	r24, r22
      e2:	86 07       	cpc	r24, r22
      e4:	86 07       	cpc	r24, r22
      e6:	86 07       	cpc	r24, r22
      e8:	86 07       	cpc	r24, r22
      ea:	f1 06       	cpc	r15, r17
      ec:	f6 06       	cpc	r15, r22
      ee:	fb 06       	cpc	r15, r27
      f0:	00 07       	cpc	r16, r16
      f2:	05 07       	cpc	r16, r21
      f4:	0a 07       	cpc	r16, r26
      f6:	0f 07       	cpc	r16, r31
      f8:	14 07       	cpc	r17, r20
      fa:	19 07       	cpc	r17, r25
      fc:	1e 07       	cpc	r17, r30
      fe:	23 07       	cpc	r18, r19
     100:	28 07       	cpc	r18, r24
     102:	2d 07       	cpc	r18, r29
     104:	32 07       	cpc	r19, r18
     106:	37 07       	cpc	r19, r23
     108:	3c 07       	cpc	r19, r28
     10a:	41 07       	cpc	r20, r17
     10c:	46 07       	cpc	r20, r22
     10e:	4b 07       	cpc	r20, r27
     110:	50 07       	cpc	r21, r16
     112:	55 07       	cpc	r21, r21
     114:	5a 07       	cpc	r21, r26
     116:	5f 07       	cpc	r21, r31
     118:	64 07       	cpc	r22, r20
     11a:	69 07       	cpc	r22, r25
     11c:	6e 07       	cpc	r22, r30

0000011e <__trampolines_end>:
     11e:	6e 61       	ori	r22, 0x1E	; 30
     120:	6e 00       	.word	0x006e	; ????

00000122 <__c.2332>:
     122:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     132:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     142:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     152:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     162:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     172:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     182:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     192:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     1a2:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     1b2:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     1c2:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     1d2:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     1e2:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     1f2:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     202:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     212:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

00000220 <__ctors_end>:
     220:	11 24       	eor	r1, r1
     222:	1f be       	out	0x3f, r1	; 63
     224:	cf ef       	ldi	r28, 0xFF	; 255
     226:	d8 e0       	ldi	r29, 0x08	; 8
     228:	de bf       	out	0x3e, r29	; 62
     22a:	cd bf       	out	0x3d, r28	; 61

0000022c <__do_copy_data>:
     22c:	12 e0       	ldi	r17, 0x02	; 2
     22e:	a0 e0       	ldi	r26, 0x00	; 0
     230:	b1 e0       	ldi	r27, 0x01	; 1
     232:	ea eb       	ldi	r30, 0xBA	; 186
     234:	fe e1       	ldi	r31, 0x1E	; 30
     236:	02 c0       	rjmp	.+4      	; 0x23c <__do_copy_data+0x10>
     238:	05 90       	lpm	r0, Z+
     23a:	0d 92       	st	X+, r0
     23c:	a6 3e       	cpi	r26, 0xE6	; 230
     23e:	b1 07       	cpc	r27, r17
     240:	d9 f7       	brne	.-10     	; 0x238 <__do_copy_data+0xc>

00000242 <__do_clear_bss>:
     242:	23 e0       	ldi	r18, 0x03	; 3
     244:	a6 ee       	ldi	r26, 0xE6	; 230
     246:	b2 e0       	ldi	r27, 0x02	; 2
     248:	01 c0       	rjmp	.+2      	; 0x24c <.do_clear_bss_start>

0000024a <.do_clear_bss_loop>:
     24a:	1d 92       	st	X+, r1

0000024c <.do_clear_bss_start>:
     24c:	ae 39       	cpi	r26, 0x9E	; 158
     24e:	b2 07       	cpc	r27, r18
     250:	e1 f7       	brne	.-8      	; 0x24a <.do_clear_bss_loop>
     252:	0e 94 04 04 	call	0x808	; 0x808 <main>
     256:	0c 94 5b 0f 	jmp	0x1eb6	; 0x1eb6 <_exit>

0000025a <__bad_interrupt>:
     25a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000025e <__vector_21>:
extern uint16_t adc_value;
//----------------------------------------
char high_adc=0,low_adc=0;
//----------------------------------------
ISR(ADC_vect)
{
     25e:	1f 92       	push	r1
     260:	0f 92       	push	r0
     262:	0f b6       	in	r0, 0x3f	; 63
     264:	0f 92       	push	r0
     266:	11 24       	eor	r1, r1
     268:	2f 93       	push	r18
     26a:	8f 93       	push	r24
     26c:	9f 93       	push	r25
	low_adc = ADCL;
     26e:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
     272:	80 93 e6 02 	sts	0x02E6, r24	; 0x8002e6 <__data_end>
	high_adc = ADCH;//Верхняя часть регистра ADC должна быть считана последней, иначе не продолжится преобразование
     276:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
     27a:	20 93 e7 02 	sts	0x02E7, r18	; 0x8002e7 <high_adc>
	adc_value = ((uint16_t)high_adc<<8)|low_adc;
     27e:	90 e0       	ldi	r25, 0x00	; 0
     280:	92 2b       	or	r25, r18
     282:	90 93 2f 03 	sts	0x032F, r25	; 0x80032f <adc_value+0x1>
     286:	80 93 2e 03 	sts	0x032E, r24	; 0x80032e <adc_value>
}
     28a:	9f 91       	pop	r25
     28c:	8f 91       	pop	r24
     28e:	2f 91       	pop	r18
     290:	0f 90       	pop	r0
     292:	0f be       	out	0x3f, r0	; 63
     294:	0f 90       	pop	r0
     296:	1f 90       	pop	r1
     298:	18 95       	reti

0000029a <adc_init>:

void adc_init(void)
{	
	ADCSRA |= (1<<ADEN) // Разрешение использования АЦП
     29a:	ea e7       	ldi	r30, 0x7A	; 122
     29c:	f0 e0       	ldi	r31, 0x00	; 0
     29e:	80 81       	ld	r24, Z
     2a0:	87 68       	ori	r24, 0x87	; 135
     2a2:	80 83       	st	Z, r24
// 	|(1<<ADSC)//Запуск преобразования
// 	|(1<<ADATE)//Непрерывный режим работы АЦП
// 	|(1<<ADIE)//Разрешение прерывания от АЦП
	|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);//Делитель 128 = 125 кГц
	ADMUX |= (1<<REFS0)|(1<<MUX1)|(1<<MUX0); // ИОН=AVcc, вход ADC3 |(1<<MUX1)|(1<<MUX0)
     2a4:	ec e7       	ldi	r30, 0x7C	; 124
     2a6:	f0 e0       	ldi	r31, 0x00	; 0
     2a8:	80 81       	ld	r24, Z
     2aa:	83 64       	ori	r24, 0x43	; 67
     2ac:	80 83       	st	Z, r24
     2ae:	08 95       	ret

000002b0 <adc_convert>:
}

unsigned int adc_convert (void)

{
	ADCSRA |= (1<<ADSC); //Начинаем преобразование
     2b0:	ea e7       	ldi	r30, 0x7A	; 122
     2b2:	f0 e0       	ldi	r31, 0x00	; 0
     2b4:	80 81       	ld	r24, Z
     2b6:	80 64       	ori	r24, 0x40	; 64
     2b8:	80 83       	st	Z, r24
	while((ADCSRA & (1<<ADSC))); //проверим закончилось ли аналого-цифровое преобразование
     2ba:	80 81       	ld	r24, Z
     2bc:	86 fd       	sbrc	r24, 6
     2be:	fd cf       	rjmp	.-6      	; 0x2ba <adc_convert+0xa>
	return (unsigned int) ADC;
     2c0:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
     2c4:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
     2c8:	08 95       	ret

000002ca <timer0_init>:
#include "timer0.h"

void timer0_init(){
	TCCR0A = 0b00000000;//COM0A1 COM0A0 COM0B1 COM0B0 – – WGM01 WGM00
     2ca:	14 bc       	out	0x24, r1	; 36
	TCCR0B = 0b00000101;//FOC0A FOC0B – – WGM02 CS02 CS01 CS00
     2cc:	85 e0       	ldi	r24, 0x05	; 5
     2ce:	85 bd       	out	0x25, r24	; 37
	TIMSK0 = 0b00000001;//– – – – – OCIE0B OCIE0A TOIE0
     2d0:	81 e0       	ldi	r24, 0x01	; 1
     2d2:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
     2d6:	08 95       	ret

000002d8 <read_dht11_dat>:

	char dht11_dat[5];
	char dht11_in;

char read_dht11_dat()
{
     2d8:	27 e0       	ldi	r18, 0x07	; 7
     2da:	30 e0       	ldi	r19, 0x00	; 0
	char i = 0;
	char result=0;
     2dc:	80 e0       	ldi	r24, 0x00	; 0
		while(!(PINC & (1<<(DHT11_PIN))))
		{}; // wait forever until analog input port 0 is '1' (NOTICE: PINC reads all the analog input ports
		//and _BV(X) is the macro operation which pull up position 'X' to '1' and the rest positions to '0'. it is equivalent to 1<
		_delay_us(30);
		if(PINC & (1<<(DHT11_PIN))) //if analog input port 0 is still '1' after 30 us
		result |=(1<<(7-i)); //this position is 1
     2de:	61 e0       	ldi	r22, 0x01	; 1
     2e0:	70 e0       	ldi	r23, 0x00	; 0
{
	char i = 0;
	char result=0;
	for(i=0; i< 8; i++)
	{
		while(!(PINC & (1<<(DHT11_PIN))))
     2e2:	30 9b       	sbis	0x06, 0	; 6
     2e4:	fe cf       	rjmp	.-4      	; 0x2e2 <read_dht11_dat+0xa>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     2e6:	90 ea       	ldi	r25, 0xA0	; 160
     2e8:	9a 95       	dec	r25
     2ea:	f1 f7       	brne	.-4      	; 0x2e8 <read_dht11_dat+0x10>
		{}; // wait forever until analog input port 0 is '1' (NOTICE: PINC reads all the analog input ports
		//and _BV(X) is the macro operation which pull up position 'X' to '1' and the rest positions to '0'. it is equivalent to 1<
		_delay_us(30);
		if(PINC & (1<<(DHT11_PIN))) //if analog input port 0 is still '1' after 30 us
     2ec:	30 9b       	sbis	0x06, 0	; 6
     2ee:	08 c0       	rjmp	.+16     	; 0x300 <read_dht11_dat+0x28>
		result |=(1<<(7-i)); //this position is 1
     2f0:	ab 01       	movw	r20, r22
     2f2:	02 2e       	mov	r0, r18
     2f4:	02 c0       	rjmp	.+4      	; 0x2fa <read_dht11_dat+0x22>
     2f6:	44 0f       	add	r20, r20
     2f8:	55 1f       	adc	r21, r21
     2fa:	0a 94       	dec	r0
     2fc:	e2 f7       	brpl	.-8      	; 0x2f6 <read_dht11_dat+0x1e>
     2fe:	84 2b       	or	r24, r20
		while((PINC & (1<<(DHT11_PIN)))); // wait '1' finish
     300:	30 99       	sbic	0x06, 0	; 6
     302:	fe cf       	rjmp	.-4      	; 0x300 <read_dht11_dat+0x28>
     304:	21 50       	subi	r18, 0x01	; 1
     306:	31 09       	sbc	r19, r1
     308:	60 f7       	brcc	.-40     	; 0x2e2 <read_dht11_dat+0xa>
	}
	return result;
}
     30a:	08 95       	ret

0000030c <dht11_start>:

void dht11_start()
{
     30c:	0f 93       	push	r16
     30e:	1f 93       	push	r17
     310:	cf 93       	push	r28
     312:	df 93       	push	r29
	dht11_dat[0]=0;
     314:	e3 e3       	ldi	r30, 0x33	; 51
     316:	f3 e0       	ldi	r31, 0x03	; 3
     318:	10 82       	st	Z, r1
	dht11_dat[2]=0;
     31a:	12 82       	std	Z+2, r1	; 0x02
	DDRC |= (1<<(DHT11_PIN));// start condition
     31c:	38 9a       	sbi	0x07, 0	; 7
	PORTC &= ~(1<<(DHT11_PIN)); // 1. pull-down i/o pin for 18ms
     31e:	40 98       	cbi	0x08, 0	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     320:	2f ef       	ldi	r18, 0xFF	; 255
     322:	89 ef       	ldi	r24, 0xF9	; 249
     324:	90 e0       	ldi	r25, 0x00	; 0
     326:	21 50       	subi	r18, 0x01	; 1
     328:	80 40       	sbci	r24, 0x00	; 0
     32a:	90 40       	sbci	r25, 0x00	; 0
     32c:	e1 f7       	brne	.-8      	; 0x326 <dht11_start+0x1a>
     32e:	00 c0       	rjmp	.+0      	; 0x330 <dht11_start+0x24>
     330:	00 00       	nop
	_delay_ms(20);
	PORTC |= (1<<(DHT11_PIN)); // 2. pull-up i/o pin for 40ms
     332:	40 9a       	sbi	0x08, 0	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     334:	20 ea       	ldi	r18, 0xA0	; 160
     336:	2a 95       	dec	r18
     338:	f1 f7       	brne	.-4      	; 0x336 <dht11_start+0x2a>
	_delay_us(30);
	DDRC &= ~(1<<(DHT11_PIN)); //let analog port 0 be input port
     33a:	38 98       	cbi	0x07, 0	; 7
     33c:	85 e0       	ldi	r24, 0x05	; 5
     33e:	8a 95       	dec	r24
     340:	f1 f7       	brne	.-4      	; 0x33e <dht11_start+0x32>
     342:	00 00       	nop
	_delay_us(1);

	dht11_in = PINC & (1<<(DHT11_PIN)); // read only the input port 0
     344:	86 b1       	in	r24, 0x06	; 6
     346:	81 70       	andi	r24, 0x01	; 1
     348:	80 93 38 03 	sts	0x0338, r24	; 0x800338 <dht11_in>
	if (dht11_in)
     34c:	81 11       	cpse	r24, r1
     34e:	1d c0       	rjmp	.+58     	; 0x38a <dht11_start+0x7e>
     350:	8f e3       	ldi	r24, 0x3F	; 63
     352:	91 e0       	ldi	r25, 0x01	; 1
     354:	01 97       	sbiw	r24, 0x01	; 1
     356:	f1 f7       	brne	.-4      	; 0x354 <dht11_start+0x48>
     358:	00 c0       	rjmp	.+0      	; 0x35a <dht11_start+0x4e>
     35a:	00 00       	nop
		/*		Serial.println("dht11 start condition 1 not met"); //wait for DHT11 response signal:LOW*/
	}
	else
	{
		_delay_us(80);
		dht11_in = PINC & (1<<(DHT11_PIN)); //
     35c:	86 b1       	in	r24, 0x06	; 6
     35e:	81 70       	andi	r24, 0x01	; 1
     360:	80 93 38 03 	sts	0x0338, r24	; 0x800338 <dht11_in>
		if(!dht11_in)
     364:	88 23       	and	r24, r24
     366:	89 f0       	breq	.+34     	; 0x38a <dht11_start+0x7e>
     368:	8f e3       	ldi	r24, 0x3F	; 63
     36a:	91 e0       	ldi	r25, 0x01	; 1
     36c:	01 97       	sbiw	r24, 0x01	; 1
     36e:	f1 f7       	brne	.-4      	; 0x36c <dht11_start+0x60>
     370:	00 c0       	rjmp	.+0      	; 0x372 <dht11_start+0x66>
     372:	00 00       	nop
     374:	ef 01       	movw	r28, r30
     376:	08 e3       	ldi	r16, 0x38	; 56
     378:	13 e0       	ldi	r17, 0x03	; 3
		}
		else
		{
			_delay_us(80);// now ready for data reception
			for (int i=0; i<5; i++)
			{ dht11_dat[i] = read_dht11_dat();} //received 40 bits data. Details are described in datasheet
     37a:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <read_dht11_dat>
     37e:	89 93       	st	Y+, r24
			/*		Serial.println("dht11 start condition 2 not met"); //wait for second response signal:HIGH*/
		}
		else
		{
			_delay_us(80);// now ready for data reception
			for (int i=0; i<5; i++)
     380:	c0 17       	cp	r28, r16
     382:	d1 07       	cpc	r29, r17
     384:	d1 f7       	brne	.-12     	; 0x37a <dht11_start+0x6e>
			{ dht11_dat[i] = read_dht11_dat();} //received 40 bits data. Details are described in datasheet

			DDRC |= (1<<(DHT11_PIN)); //let analog port 0 be output port after all the data have been received
     386:	38 9a       	sbi	0x07, 0	; 7
			PORTC |= (1<<(DHT11_PIN)); //let the value of this port be '1' after all the data have been received
     388:	40 9a       	sbi	0x08, 0	; 8
// 				number_write(H);
// 				number_write(h);
// 			}
		}
	}
}
     38a:	df 91       	pop	r29
     38c:	cf 91       	pop	r28
     38e:	1f 91       	pop	r17
     390:	0f 91       	pop	r16
     392:	08 95       	ret

00000394 <dht11_temp>:

char dht11_temp(){
// 	dht11_start();
	return dht11_dat[2];
}
     394:	80 91 35 03 	lds	r24, 0x0335	; 0x800335 <dht11_dat+0x2>
     398:	08 95       	ret

0000039a <dht11_humid>:

char dht11_humid(){
// 	dht11_start();
	return dht11_dat[0];
     39a:	80 91 33 03 	lds	r24, 0x0333	; 0x800333 <dht11_dat>
     39e:	08 95       	ret

000003a0 <ds18b20_Reset>:
//РїСЂРµРѕР±СЂР°Р·РѕРІР°РЅРёРµ С‚РµРјРїРµСЂР°С‚СѓСЂС‹ РІ РµРґРёРЅРёС†С‹
char converttemp (unsigned int tt)
{
	char t = tt>>4;//СЃРґРІРёРі Рё РѕС‚СЃРµС‡РµРЅРёРµ С‡Р°СЃС‚Рё СЃС‚Р°СЂС€РµРіРѕ Р±Р°Р№С‚Р°
	return t;
}
     3a0:	f8 94       	cli
     3a2:	39 9a       	sbi	0x07, 1	; 7
     3a4:	83 e9       	ldi	r24, 0x93	; 147
     3a6:	97 e0       	ldi	r25, 0x07	; 7
     3a8:	01 97       	sbiw	r24, 0x01	; 1
     3aa:	f1 f7       	brne	.-4      	; 0x3a8 <ds18b20_Reset+0x8>
     3ac:	00 c0       	rjmp	.+0      	; 0x3ae <ds18b20_Reset+0xe>
     3ae:	00 00       	nop
     3b0:	39 98       	cbi	0x07, 1	; 7
     3b2:	ef e8       	ldi	r30, 0x8F	; 143
     3b4:	f1 e0       	ldi	r31, 0x01	; 1
     3b6:	31 97       	sbiw	r30, 0x01	; 1
     3b8:	f1 f7       	brne	.-4      	; 0x3b6 <ds18b20_Reset+0x16>
     3ba:	00 c0       	rjmp	.+0      	; 0x3bc <ds18b20_Reset+0x1c>
     3bc:	00 00       	nop
     3be:	86 b1       	in	r24, 0x06	; 6
     3c0:	e3 e0       	ldi	r30, 0x03	; 3
     3c2:	f6 e0       	ldi	r31, 0x06	; 6
     3c4:	31 97       	sbiw	r30, 0x01	; 1
     3c6:	f1 f7       	brne	.-4      	; 0x3c4 <ds18b20_Reset+0x24>
     3c8:	00 c0       	rjmp	.+0      	; 0x3ca <ds18b20_Reset+0x2a>
     3ca:	00 00       	nop
     3cc:	86 95       	lsr	r24
     3ce:	81 70       	andi	r24, 0x01	; 1
     3d0:	91 e0       	ldi	r25, 0x01	; 1
     3d2:	89 27       	eor	r24, r25
     3d4:	08 95       	ret

000003d6 <ds18b20_WriteBit>:
     3d6:	f8 94       	cli
     3d8:	39 9a       	sbi	0x07, 1	; 7
     3da:	9a e0       	ldi	r25, 0x0A	; 10
     3dc:	9a 95       	dec	r25
     3de:	f1 f7       	brne	.-4      	; 0x3dc <ds18b20_WriteBit+0x6>
     3e0:	00 c0       	rjmp	.+0      	; 0x3e2 <ds18b20_WriteBit+0xc>
     3e2:	81 11       	cpse	r24, r1
     3e4:	39 98       	cbi	0x07, 1	; 7
     3e6:	87 ef       	ldi	r24, 0xF7	; 247
     3e8:	90 e0       	ldi	r25, 0x00	; 0
     3ea:	01 97       	sbiw	r24, 0x01	; 1
     3ec:	f1 f7       	brne	.-4      	; 0x3ea <ds18b20_WriteBit+0x14>
     3ee:	00 c0       	rjmp	.+0      	; 0x3f0 <ds18b20_WriteBit+0x1a>
     3f0:	00 00       	nop
     3f2:	39 98       	cbi	0x07, 1	; 7
     3f4:	08 95       	ret

000003f6 <ds18b20_WriteByte>:
     3f6:	ef 92       	push	r14
     3f8:	ff 92       	push	r15
     3fa:	0f 93       	push	r16
     3fc:	1f 93       	push	r17
     3fe:	cf 93       	push	r28
     400:	df 93       	push	r29
     402:	c0 e0       	ldi	r28, 0x00	; 0
     404:	d0 e0       	ldi	r29, 0x00	; 0
     406:	ee 24       	eor	r14, r14
     408:	e3 94       	inc	r14
     40a:	f1 2c       	mov	r15, r1
     40c:	08 2f       	mov	r16, r24
     40e:	10 e0       	ldi	r17, 0x00	; 0
     410:	97 01       	movw	r18, r14
     412:	0c 2e       	mov	r0, r28
     414:	02 c0       	rjmp	.+4      	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
     416:	22 0f       	add	r18, r18
     418:	33 1f       	adc	r19, r19
     41a:	0a 94       	dec	r0
     41c:	e2 f7       	brpl	.-8      	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
     41e:	a8 01       	movw	r20, r16
     420:	42 23       	and	r20, r18
     422:	53 23       	and	r21, r19
     424:	24 17       	cp	r18, r20
     426:	35 07       	cpc	r19, r21
     428:	21 f4       	brne	.+8      	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
     42a:	81 e0       	ldi	r24, 0x01	; 1
     42c:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <ds18b20_WriteBit>
     430:	03 c0       	rjmp	.+6      	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
     432:	80 e0       	ldi	r24, 0x00	; 0
     434:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <ds18b20_WriteBit>
     438:	21 96       	adiw	r28, 0x01	; 1
     43a:	c8 30       	cpi	r28, 0x08	; 8
     43c:	d1 05       	cpc	r29, r1
     43e:	41 f7       	brne	.-48     	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
     440:	df 91       	pop	r29
     442:	cf 91       	pop	r28
     444:	1f 91       	pop	r17
     446:	0f 91       	pop	r16
     448:	ff 90       	pop	r15
     44a:	ef 90       	pop	r14
     44c:	08 95       	ret

0000044e <ds18b20_ReadBit>:
     44e:	f8 94       	cli
     450:	39 9a       	sbi	0x07, 1	; 7
     452:	8a e0       	ldi	r24, 0x0A	; 10
     454:	8a 95       	dec	r24
     456:	f1 f7       	brne	.-4      	; 0x454 <ds18b20_ReadBit+0x6>
     458:	00 c0       	rjmp	.+0      	; 0x45a <ds18b20_ReadBit+0xc>
     45a:	39 98       	cbi	0x07, 1	; 7
     45c:	e5 e3       	ldi	r30, 0x35	; 53
     45e:	ea 95       	dec	r30
     460:	f1 f7       	brne	.-4      	; 0x45e <ds18b20_ReadBit+0x10>
     462:	00 00       	nop
     464:	86 b1       	in	r24, 0x06	; 6
     466:	ef ec       	ldi	r30, 0xCF	; 207
     468:	f0 e0       	ldi	r31, 0x00	; 0
     46a:	31 97       	sbiw	r30, 0x01	; 1
     46c:	f1 f7       	brne	.-4      	; 0x46a <ds18b20_ReadBit+0x1c>
     46e:	00 c0       	rjmp	.+0      	; 0x470 <ds18b20_ReadBit+0x22>
     470:	00 00       	nop
     472:	86 95       	lsr	r24
     474:	81 70       	andi	r24, 0x01	; 1
     476:	08 95       	ret

00000478 <ds18b20_ReadByte>:
     478:	1f 93       	push	r17
     47a:	cf 93       	push	r28
     47c:	df 93       	push	r29
     47e:	c0 e0       	ldi	r28, 0x00	; 0
     480:	d0 e0       	ldi	r29, 0x00	; 0
     482:	10 e0       	ldi	r17, 0x00	; 0
     484:	0e 94 27 02 	call	0x44e	; 0x44e <ds18b20_ReadBit>
     488:	90 e0       	ldi	r25, 0x00	; 0
     48a:	0c 2e       	mov	r0, r28
     48c:	02 c0       	rjmp	.+4      	; 0x492 <ds18b20_ReadByte+0x1a>
     48e:	88 0f       	add	r24, r24
     490:	99 1f       	adc	r25, r25
     492:	0a 94       	dec	r0
     494:	e2 f7       	brpl	.-8      	; 0x48e <ds18b20_ReadByte+0x16>
     496:	18 2b       	or	r17, r24
     498:	21 96       	adiw	r28, 0x01	; 1
     49a:	c8 30       	cpi	r28, 0x08	; 8
     49c:	d1 05       	cpc	r29, r1
     49e:	91 f7       	brne	.-28     	; 0x484 <ds18b20_ReadByte+0xc>
     4a0:	81 2f       	mov	r24, r17
     4a2:	df 91       	pop	r29
     4a4:	cf 91       	pop	r28
     4a6:	1f 91       	pop	r17
     4a8:	08 95       	ret

000004aa <ds18b20_SearhRom>:
uint8_t ds18b20_SearhRom(uint8_t *Addr)
{
     4aa:	bf 92       	push	r11
     4ac:	cf 92       	push	r12
     4ae:	df 92       	push	r13
     4b0:	ef 92       	push	r14
     4b2:	ff 92       	push	r15
     4b4:	0f 93       	push	r16
     4b6:	1f 93       	push	r17
     4b8:	cf 93       	push	r28
     4ba:	df 93       	push	r29
     4bc:	b8 2e       	mov	r11, r24
     4be:	c9 2e       	mov	r12, r25
	id_bit_number = 1;
	last_zero = 0;
	rom_byte_number = 0;
	rom_byte_mask = 1;
	search_result = 0;
	if (!LastDeviceFlag)
     4c0:	80 91 42 03 	lds	r24, 0x0342	; 0x800342 <LastDeviceFlag>
     4c4:	81 11       	cpse	r24, r1
     4c6:	05 c0       	rjmp	.+10     	; 0x4d2 <ds18b20_SearhRom+0x28>
	{
		ds18b20_Reset();
     4c8:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <ds18b20_Reset>
		ds18b20_WriteByte(0xF0);
     4cc:	80 ef       	ldi	r24, 0xF0	; 240
     4ce:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <ds18b20_WriteByte>
{
	char t = tt>>4;//СЃРґРІРёРі Рё РѕС‚СЃРµС‡РµРЅРёРµ С‡Р°СЃС‚Рё СЃС‚Р°СЂС€РµРіРѕ Р±Р°Р№С‚Р°
	return t;
}
uint8_t ds18b20_SearhRom(uint8_t *Addr)
{
     4d2:	d1 e0       	ldi	r29, 0x01	; 1
     4d4:	10 e0       	ldi	r17, 0x00	; 0
     4d6:	e1 2c       	mov	r14, r1
     4d8:	01 e0       	ldi	r16, 0x01	; 1
			else
			{
				if (id_bit_number < LastDiscrepancy)
				search_direction = ((ROM_NO[rom_byte_number] & rom_byte_mask) > 0);
				else
				search_direction = (id_bit_number == LastDiscrepancy);
     4da:	ff 24       	eor	r15, r15
     4dc:	f3 94       	inc	r15
     4de:	d1 2c       	mov	r13, r1
		ds18b20_Reset();
		ds18b20_WriteByte(0xF0);
	}
	do
	{
		id_bit = ds18b20_ReadBit();
     4e0:	0e 94 27 02 	call	0x44e	; 0x44e <ds18b20_ReadBit>
     4e4:	c8 2f       	mov	r28, r24
		cmp_id_bit = ds18b20_ReadBit();
     4e6:	0e 94 27 02 	call	0x44e	; 0x44e <ds18b20_ReadBit>
		if ((id_bit == 1) && (cmp_id_bit == 1))
     4ea:	c1 30       	cpi	r28, 0x01	; 1
     4ec:	09 f0       	breq	.+2      	; 0x4f0 <ds18b20_SearhRom+0x46>
     4ee:	54 c0       	rjmp	.+168    	; 0x598 <ds18b20_SearhRom+0xee>
     4f0:	81 30       	cpi	r24, 0x01	; 1
     4f2:	e1 f4       	brne	.+56     	; 0x52c <ds18b20_SearhRom+0x82>
     4f4:	38 c0       	rjmp	.+112    	; 0x566 <ds18b20_SearhRom+0xbc>
		{
			if (id_bit != cmp_id_bit)
			search_direction = id_bit; // bit write value for search
			else
			{
				if (id_bit_number < LastDiscrepancy)
     4f6:	80 91 43 03 	lds	r24, 0x0343	; 0x800343 <LastDiscrepancy>
     4fa:	08 17       	cp	r16, r24
     4fc:	50 f4       	brcc	.+20     	; 0x512 <ds18b20_SearhRom+0x68>
				search_direction = ((ROM_NO[rom_byte_number] & rom_byte_mask) > 0);
     4fe:	e1 2f       	mov	r30, r17
     500:	f0 e0       	ldi	r31, 0x00	; 0
     502:	e7 5c       	subi	r30, 0xC7	; 199
     504:	fc 4f       	sbci	r31, 0xFC	; 252
     506:	80 81       	ld	r24, Z
     508:	8d 23       	and	r24, r29
     50a:	cf 2d       	mov	r28, r15
     50c:	29 f4       	brne	.+10     	; 0x518 <ds18b20_SearhRom+0x6e>
     50e:	cd 2d       	mov	r28, r13
     510:	03 c0       	rjmp	.+6      	; 0x518 <ds18b20_SearhRom+0x6e>
				else
				search_direction = (id_bit_number == LastDiscrepancy);
     512:	cf 2d       	mov	r28, r15
     514:	08 13       	cpse	r16, r24
     516:	cd 2d       	mov	r28, r13
				if (search_direction == 0)
     518:	c1 11       	cpse	r28, r1
     51a:	06 c0       	rjmp	.+12     	; 0x528 <ds18b20_SearhRom+0x7e>
				{
					last_zero = id_bit_number;
					if (last_zero < 9)
     51c:	09 30       	cpi	r16, 0x09	; 9
     51e:	08 f0       	brcs	.+2      	; 0x522 <ds18b20_SearhRom+0x78>
     520:	3e c0       	rjmp	.+124    	; 0x59e <ds18b20_SearhRom+0xf4>
					LastFamilyDiscrepancy = last_zero;
     522:	00 93 41 03 	sts	0x0341, r16	; 0x800341 <LastFamilyDiscrepancy>
     526:	3b c0       	rjmp	.+118    	; 0x59e <ds18b20_SearhRom+0xf4>
				}
			}
			if (search_direction == 1)
     528:	c1 30       	cpi	r28, 0x01	; 1
     52a:	49 f4       	brne	.+18     	; 0x53e <ds18b20_SearhRom+0x94>
			ROM_NO[rom_byte_number] |= rom_byte_mask;
     52c:	e1 2f       	mov	r30, r17
     52e:	f0 e0       	ldi	r31, 0x00	; 0
     530:	e7 5c       	subi	r30, 0xC7	; 199
     532:	fc 4f       	sbci	r31, 0xFC	; 252
     534:	80 81       	ld	r24, Z
     536:	8d 2b       	or	r24, r29
     538:	80 83       	st	Z, r24
     53a:	cf 2d       	mov	r28, r15
     53c:	09 c0       	rjmp	.+18     	; 0x550 <ds18b20_SearhRom+0xa6>
			else
			ROM_NO[rom_byte_number] &= ~rom_byte_mask;
     53e:	e1 2f       	mov	r30, r17
     540:	f0 e0       	ldi	r31, 0x00	; 0
     542:	e7 5c       	subi	r30, 0xC7	; 199
     544:	fc 4f       	sbci	r31, 0xFC	; 252
     546:	90 81       	ld	r25, Z
     548:	8d 2f       	mov	r24, r29
     54a:	80 95       	com	r24
     54c:	89 23       	and	r24, r25
     54e:	80 83       	st	Z, r24
			ds18b20_WriteBit(search_direction);
     550:	8c 2f       	mov	r24, r28
     552:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <ds18b20_WriteBit>
			id_bit_number++;
     556:	0f 5f       	subi	r16, 0xFF	; 255
			rom_byte_mask <<= 1;
     558:	dd 0f       	add	r29, r29
			if (rom_byte_mask == 0)
     55a:	11 f4       	brne	.+4      	; 0x560 <ds18b20_SearhRom+0xb6>
			{
				rom_byte_number++;
     55c:	1f 5f       	subi	r17, 0xFF	; 255
				rom_byte_mask = 1;
     55e:	d1 e0       	ldi	r29, 0x01	; 1
			}
		}
	} while(rom_byte_number < 8); // СЃС‡РёС‚С‹РІР°РµРј Р±Р°Р№С‚С‹ СЃ 0 РґРѕ 7 РІ С†РёРєР»Рµ
     560:	18 30       	cpi	r17, 0x08	; 8
     562:	08 f4       	brcc	.+2      	; 0x566 <ds18b20_SearhRom+0xbc>
     564:	bd cf       	rjmp	.-134    	; 0x4e0 <ds18b20_SearhRom+0x36>
	if (!(id_bit_number < 65))
     566:	01 34       	cpi	r16, 0x41	; 65
     568:	40 f0       	brcs	.+16     	; 0x57a <ds18b20_SearhRom+0xd0>
	{
		// search successful so set LastDiscrepancy,LastDeviceFlag,search_result
		LastDiscrepancy = last_zero;
     56a:	e0 92 43 03 	sts	0x0343, r14	; 0x800343 <LastDiscrepancy>
		// check for last device
		if (LastDiscrepancy == 0)
     56e:	e1 10       	cpse	r14, r1
     570:	18 c0       	rjmp	.+48     	; 0x5a2 <ds18b20_SearhRom+0xf8>
		LastDeviceFlag = 1;
     572:	81 e0       	ldi	r24, 0x01	; 1
     574:	80 93 42 03 	sts	0x0342, r24	; 0x800342 <LastDeviceFlag>
     578:	14 c0       	rjmp	.+40     	; 0x5a2 <ds18b20_SearhRom+0xf8>
		search_result = 1;
	}
	if (!search_result || !ROM_NO[0])
	{
		LastDiscrepancy = 0;
     57a:	10 92 43 03 	sts	0x0343, r1	; 0x800343 <LastDiscrepancy>
		LastDeviceFlag = 0;
     57e:	10 92 42 03 	sts	0x0342, r1	; 0x800342 <LastDeviceFlag>
		LastFamilyDiscrepancy = 0;
     582:	10 92 41 03 	sts	0x0341, r1	; 0x800341 <LastFamilyDiscrepancy>
		search_result = 0;
     586:	80 e0       	ldi	r24, 0x00	; 0
     588:	17 c0       	rjmp	.+46     	; 0x5b8 <ds18b20_SearhRom+0x10e>
	}
	else
	{
		for (int i = 0; i < 8; i++) Addr[i] = ROM_NO[i];
     58a:	81 91       	ld	r24, Z+
     58c:	8d 93       	st	X+, r24
     58e:	2e 17       	cp	r18, r30
     590:	3f 07       	cpc	r19, r31
     592:	d9 f7       	brne	.-10     	; 0x58a <ds18b20_SearhRom+0xe0>
     594:	81 e0       	ldi	r24, 0x01	; 1
	}
	return search_result;
     596:	10 c0       	rjmp	.+32     	; 0x5b8 <ds18b20_SearhRom+0x10e>
		cmp_id_bit = ds18b20_ReadBit();
		if ((id_bit == 1) && (cmp_id_bit == 1))
		break;
		else
		{
			if (id_bit != cmp_id_bit)
     598:	c8 13       	cpse	r28, r24
     59a:	d1 cf       	rjmp	.-94     	; 0x53e <ds18b20_SearhRom+0x94>
     59c:	ac cf       	rjmp	.-168    	; 0x4f6 <ds18b20_SearhRom+0x4c>
{
	char t = tt>>4;//СЃРґРІРёРі Рё РѕС‚СЃРµС‡РµРЅРёРµ С‡Р°СЃС‚Рё СЃС‚Р°СЂС€РµРіРѕ Р±Р°Р№С‚Р°
	return t;
}
uint8_t ds18b20_SearhRom(uint8_t *Addr)
{
     59e:	e0 2e       	mov	r14, r16
     5a0:	ce cf       	rjmp	.-100    	; 0x53e <ds18b20_SearhRom+0x94>
		// check for last device
		if (LastDiscrepancy == 0)
		LastDeviceFlag = 1;
		search_result = 1;
	}
	if (!search_result || !ROM_NO[0])
     5a2:	80 91 39 03 	lds	r24, 0x0339	; 0x800339 <ROM_NO>
     5a6:	88 23       	and	r24, r24
     5a8:	41 f3       	breq	.-48     	; 0x57a <ds18b20_SearhRom+0xd0>
     5aa:	e9 e3       	ldi	r30, 0x39	; 57
     5ac:	f3 e0       	ldi	r31, 0x03	; 3
     5ae:	ab 2d       	mov	r26, r11
     5b0:	bc 2d       	mov	r27, r12
     5b2:	21 e4       	ldi	r18, 0x41	; 65
     5b4:	33 e0       	ldi	r19, 0x03	; 3
     5b6:	e9 cf       	rjmp	.-46     	; 0x58a <ds18b20_SearhRom+0xe0>
	else
	{
		for (int i = 0; i < 8; i++) Addr[i] = ROM_NO[i];
	}
	return search_result;
}
     5b8:	df 91       	pop	r29
     5ba:	cf 91       	pop	r28
     5bc:	1f 91       	pop	r17
     5be:	0f 91       	pop	r16
     5c0:	ff 90       	pop	r15
     5c2:	ef 90       	pop	r14
     5c4:	df 90       	pop	r13
     5c6:	cf 90       	pop	r12
     5c8:	bf 90       	pop	r11
     5ca:	08 95       	ret

000005cc <ds18b20_init>:
//-----------------------------------------------
uint8_t ds18b20_init(uint8_t mode)
{
     5cc:	cf 92       	push	r12
     5ce:	df 92       	push	r13
     5d0:	ef 92       	push	r14
     5d2:	ff 92       	push	r15
     5d4:	0f 93       	push	r16
     5d6:	1f 93       	push	r17
     5d8:	cf 93       	push	r28
     5da:	df 93       	push	r29
     5dc:	cd b7       	in	r28, 0x3d	; 61
     5de:	de b7       	in	r29, 0x3e	; 62
     5e0:	28 97       	sbiw	r28, 0x08	; 8
     5e2:	0f b6       	in	r0, 0x3f	; 63
     5e4:	f8 94       	cli
     5e6:	de bf       	out	0x3e, r29	; 62
     5e8:	0f be       	out	0x3f, r0	; 63
     5ea:	cd bf       	out	0x3d, r28	; 61
	int i = 0, j=0;
	uint8_t dt[8];
	
	if(mode==SKIP_ROM)
     5ec:	81 11       	cpse	r24, r1
     5ee:	16 c0       	rjmp	.+44     	; 0x61c <ds18b20_init+0x50>
	{		
		if(!ds18b20_Reset()) return 1;
     5f0:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <ds18b20_Reset>
     5f4:	88 23       	and	r24, r24
     5f6:	09 f4       	brne	.+2      	; 0x5fa <ds18b20_init+0x2e>
     5f8:	67 c0       	rjmp	.+206    	; 0x6c8 <ds18b20_init+0xfc>
		//SKIP ROM
		ds18b20_WriteByte(0xCC);
     5fa:	8c ec       	ldi	r24, 0xCC	; 204
     5fc:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <ds18b20_WriteByte>
		//WRITE SCRATCHPAD
		ds18b20_WriteByte(0x4E);
     600:	8e e4       	ldi	r24, 0x4E	; 78
     602:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <ds18b20_WriteByte>
		//TH REGISTER 100 РіСЂР°РґСѓСЃРѕРІ
		ds18b20_WriteByte(0x64);
     606:	84 e6       	ldi	r24, 0x64	; 100
     608:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <ds18b20_WriteByte>
		//TL REGISTER - 30 РіСЂР°РґСѓСЃРѕРІ
		ds18b20_WriteByte(0x1E);
     60c:	8e e1       	ldi	r24, 0x1E	; 30
     60e:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <ds18b20_WriteByte>
		//Resolution 12 bit
		ds18b20_WriteByte(RESOLUTION_12BIT);
     612:	8f e7       	ldi	r24, 0x7F	; 127
     614:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <ds18b20_WriteByte>
			ds18b20_WriteByte(0x14);
			//Resolution 12 bit
			ds18b20_WriteByte(RESOLUTION_12BIT);
		}
	}
	return 0;
     618:	80 e0       	ldi	r24, 0x00	; 0
     61a:	59 c0       	rjmp	.+178    	; 0x6ce <ds18b20_init+0x102>
     61c:	08 e0       	ldi	r16, 0x08	; 8
     61e:	10 e0       	ldi	r17, 0x00	; 0
	}
	else
	{
		for(i=1;i<=8;i++)
		{
			if(ds18b20_SearhRom(dt))
     620:	ce 01       	movw	r24, r28
     622:	01 96       	adiw	r24, 0x01	; 1
     624:	0e 94 55 02 	call	0x4aa	; 0x4aa <ds18b20_SearhRom>
     628:	81 11       	cpse	r24, r1
     62a:	05 c0       	rjmp	.+10     	; 0x636 <ds18b20_init+0x6a>
				Dev_Cnt++;
				memcpy(Dev_ID[Dev_Cnt-1],dt,sizeof(dt));
			}
			else break;
		}
		for(i=1;i<=Dev_Cnt;i++)
     62c:	80 91 46 03 	lds	r24, 0x0346	; 0x800346 <Dev_Cnt>
     630:	81 11       	cpse	r24, r1
     632:	1a c0       	rjmp	.+52     	; 0x668 <ds18b20_init+0x9c>
     634:	4c c0       	rjmp	.+152    	; 0x6ce <ds18b20_init+0x102>
	{
		for(i=1;i<=8;i++)
		{
			if(ds18b20_SearhRom(dt))
			{
				Dev_Cnt++;
     636:	a0 91 46 03 	lds	r26, 0x0346	; 0x800346 <Dev_Cnt>
     63a:	af 5f       	subi	r26, 0xFF	; 255
     63c:	a0 93 46 03 	sts	0x0346, r26	; 0x800346 <Dev_Cnt>
				memcpy(Dev_ID[Dev_Cnt-1],dt,sizeof(dt));
     640:	b0 e0       	ldi	r27, 0x00	; 0
     642:	aa 0f       	add	r26, r26
     644:	bb 1f       	adc	r27, r27
     646:	aa 0f       	add	r26, r26
     648:	bb 1f       	adc	r27, r27
     64a:	aa 0f       	add	r26, r26
     64c:	bb 1f       	adc	r27, r27
     64e:	ac 51       	subi	r26, 0x1C	; 28
     650:	bd 4f       	sbci	r27, 0xFD	; 253
     652:	88 e0       	ldi	r24, 0x08	; 8
     654:	fe 01       	movw	r30, r28
     656:	31 96       	adiw	r30, 0x01	; 1
     658:	01 90       	ld	r0, Z+
     65a:	0d 92       	st	X+, r0
     65c:	8a 95       	dec	r24
     65e:	e1 f7       	brne	.-8      	; 0x658 <ds18b20_init+0x8c>
     660:	01 50       	subi	r16, 0x01	; 1
     662:	11 09       	sbc	r17, r1
		//Resolution 12 bit
		ds18b20_WriteByte(RESOLUTION_12BIT);
	}
	else
	{
		for(i=1;i<=8;i++)
     664:	e9 f6       	brne	.-70     	; 0x620 <ds18b20_init+0x54>
     666:	e2 cf       	rjmp	.-60     	; 0x62c <ds18b20_init+0x60>
     668:	0c ee       	ldi	r16, 0xEC	; 236
     66a:	12 e0       	ldi	r17, 0x02	; 2
				Dev_Cnt++;
				memcpy(Dev_ID[Dev_Cnt-1],dt,sizeof(dt));
			}
			else break;
		}
		for(i=1;i<=Dev_Cnt;i++)
     66c:	cc 24       	eor	r12, r12
     66e:	c3 94       	inc	r12
     670:	d1 2c       	mov	r13, r1
		{
			if(!ds18b20_Reset()) return 1;
     672:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <ds18b20_Reset>
     676:	88 23       	and	r24, r24
     678:	49 f1       	breq	.+82     	; 0x6cc <ds18b20_init+0x100>
			//Match Rom
			ds18b20_WriteByte(0x55);
     67a:	85 e5       	ldi	r24, 0x55	; 85
     67c:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <ds18b20_WriteByte>
     680:	78 01       	movw	r14, r16
     682:	88 e0       	ldi	r24, 0x08	; 8
     684:	e8 0e       	add	r14, r24
     686:	f1 1c       	adc	r15, r1
			for(j=0;j<=7;j++)
			{
				ds18b20_WriteByte(Dev_ID[i-1][j]);
     688:	f8 01       	movw	r30, r16
     68a:	81 91       	ld	r24, Z+
     68c:	8f 01       	movw	r16, r30
     68e:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <ds18b20_WriteByte>
		for(i=1;i<=Dev_Cnt;i++)
		{
			if(!ds18b20_Reset()) return 1;
			//Match Rom
			ds18b20_WriteByte(0x55);
			for(j=0;j<=7;j++)
     692:	0e 15       	cp	r16, r14
     694:	1f 05       	cpc	r17, r15
     696:	c1 f7       	brne	.-16     	; 0x688 <ds18b20_init+0xbc>
			{
				ds18b20_WriteByte(Dev_ID[i-1][j]);
			}
			//WRITE SCRATCHPAD
			ds18b20_WriteByte(0x4E);
     698:	8e e4       	ldi	r24, 0x4E	; 78
     69a:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <ds18b20_WriteByte>
			//TH REGISTER - 30 РіСЂР°РґСѓСЃРѕРІ
			ds18b20_WriteByte(0x1E);
     69e:	8e e1       	ldi	r24, 0x1E	; 30
     6a0:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <ds18b20_WriteByte>
			//TL REGISTER - 20 РіСЂР°РґСѓСЃРѕРІ
			ds18b20_WriteByte(0x14);
     6a4:	84 e1       	ldi	r24, 0x14	; 20
     6a6:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <ds18b20_WriteByte>
			//Resolution 12 bit
			ds18b20_WriteByte(RESOLUTION_12BIT);
     6aa:	8f e7       	ldi	r24, 0x7F	; 127
     6ac:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <ds18b20_WriteByte>
				Dev_Cnt++;
				memcpy(Dev_ID[Dev_Cnt-1],dt,sizeof(dt));
			}
			else break;
		}
		for(i=1;i<=Dev_Cnt;i++)
     6b0:	ff ef       	ldi	r31, 0xFF	; 255
     6b2:	cf 1a       	sub	r12, r31
     6b4:	df 0a       	sbc	r13, r31
     6b6:	87 01       	movw	r16, r14
     6b8:	80 91 46 03 	lds	r24, 0x0346	; 0x800346 <Dev_Cnt>
     6bc:	90 e0       	ldi	r25, 0x00	; 0
     6be:	8c 15       	cp	r24, r12
     6c0:	9d 05       	cpc	r25, r13
     6c2:	bc f6       	brge	.-82     	; 0x672 <ds18b20_init+0xa6>
			ds18b20_WriteByte(0x14);
			//Resolution 12 bit
			ds18b20_WriteByte(RESOLUTION_12BIT);
		}
	}
	return 0;
     6c4:	80 e0       	ldi	r24, 0x00	; 0
     6c6:	03 c0       	rjmp	.+6      	; 0x6ce <ds18b20_init+0x102>
	int i = 0, j=0;
	uint8_t dt[8];
	
	if(mode==SKIP_ROM)
	{		
		if(!ds18b20_Reset()) return 1;
     6c8:	81 e0       	ldi	r24, 0x01	; 1
     6ca:	01 c0       	rjmp	.+2      	; 0x6ce <ds18b20_init+0x102>
			}
			else break;
		}
		for(i=1;i<=Dev_Cnt;i++)
		{
			if(!ds18b20_Reset()) return 1;
     6cc:	81 e0       	ldi	r24, 0x01	; 1
			//Resolution 12 bit
			ds18b20_WriteByte(RESOLUTION_12BIT);
		}
	}
	return 0;
}
     6ce:	28 96       	adiw	r28, 0x08	; 8
     6d0:	0f b6       	in	r0, 0x3f	; 63
     6d2:	f8 94       	cli
     6d4:	de bf       	out	0x3e, r29	; 62
     6d6:	0f be       	out	0x3f, r0	; 63
     6d8:	cd bf       	out	0x3d, r28	; 61
     6da:	df 91       	pop	r29
     6dc:	cf 91       	pop	r28
     6de:	1f 91       	pop	r17
     6e0:	0f 91       	pop	r16
     6e2:	ff 90       	pop	r15
     6e4:	ef 90       	pop	r14
     6e6:	df 90       	pop	r13
     6e8:	cf 90       	pop	r12
     6ea:	08 95       	ret

000006ec <ds18b20_MeasureTemperCmd>:
//----------------------------------------------------------
void ds18b20_MeasureTemperCmd(uint8_t mode, uint8_t DevNum)
{
     6ec:	0f 93       	push	r16
     6ee:	1f 93       	push	r17
     6f0:	cf 93       	push	r28
     6f2:	df 93       	push	r29
     6f4:	c8 2f       	mov	r28, r24
     6f6:	06 2f       	mov	r16, r22
	int i = 0;
	ds18b20_Reset();
     6f8:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <ds18b20_Reset>
	if(mode==SKIP_ROM)
     6fc:	c1 11       	cpse	r28, r1
     6fe:	04 c0       	rjmp	.+8      	; 0x708 <ds18b20_MeasureTemperCmd+0x1c>
	{
		//SKIP ROM
		ds18b20_WriteByte(0xCC);
     700:	8c ec       	ldi	r24, 0xCC	; 204
     702:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <ds18b20_WriteByte>
     706:	1b c0       	rjmp	.+54     	; 0x73e <ds18b20_MeasureTemperCmd+0x52>
	}
	else
	{
		//Match Rom
		ds18b20_WriteByte(0x55);
     708:	85 e5       	ldi	r24, 0x55	; 85
     70a:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <ds18b20_WriteByte>
     70e:	10 e0       	ldi	r17, 0x00	; 0
     710:	e8 01       	movw	r28, r16
     712:	cc 0f       	add	r28, r28
     714:	dd 1f       	adc	r29, r29
     716:	cc 0f       	add	r28, r28
     718:	dd 1f       	adc	r29, r29
     71a:	cc 0f       	add	r28, r28
     71c:	dd 1f       	adc	r29, r29
     71e:	cc 51       	subi	r28, 0x1C	; 28
     720:	dd 4f       	sbci	r29, 0xFD	; 253
     722:	00 0f       	add	r16, r16
     724:	11 1f       	adc	r17, r17
     726:	00 0f       	add	r16, r16
     728:	11 1f       	adc	r17, r17
     72a:	00 0f       	add	r16, r16
     72c:	11 1f       	adc	r17, r17
     72e:	04 51       	subi	r16, 0x14	; 20
     730:	1d 4f       	sbci	r17, 0xFD	; 253
		for(i=0;i<=7;i++)
		{
			ds18b20_WriteByte(Dev_ID[DevNum-1][i]);
     732:	89 91       	ld	r24, Y+
     734:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <ds18b20_WriteByte>
	}
	else
	{
		//Match Rom
		ds18b20_WriteByte(0x55);
		for(i=0;i<=7;i++)
     738:	c0 17       	cp	r28, r16
     73a:	d1 07       	cpc	r29, r17
     73c:	d1 f7       	brne	.-12     	; 0x732 <ds18b20_MeasureTemperCmd+0x46>
		{
			ds18b20_WriteByte(Dev_ID[DevNum-1][i]);
		}
	}
	//CONVERT T
	ds18b20_WriteByte(0x44);
     73e:	84 e4       	ldi	r24, 0x44	; 68
     740:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <ds18b20_WriteByte>
}
     744:	df 91       	pop	r29
     746:	cf 91       	pop	r28
     748:	1f 91       	pop	r17
     74a:	0f 91       	pop	r16
     74c:	08 95       	ret

0000074e <ds18b20_ReadStratcpad>:
//----------------------------------------------------------
void ds18b20_ReadStratcpad(uint8_t mode, uint8_t *Data, uint8_t DevNum)
{
     74e:	ef 92       	push	r14
     750:	ff 92       	push	r15
     752:	0f 93       	push	r16
     754:	1f 93       	push	r17
     756:	cf 93       	push	r28
     758:	df 93       	push	r29
     75a:	c8 2f       	mov	r28, r24
     75c:	8b 01       	movw	r16, r22
     75e:	e4 2e       	mov	r14, r20
	uint8_t i;
	ds18b20_Reset();
     760:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <ds18b20_Reset>
	if(mode==SKIP_ROM)
     764:	c1 11       	cpse	r28, r1
     766:	04 c0       	rjmp	.+8      	; 0x770 <ds18b20_ReadStratcpad+0x22>
	{
		//SKIP ROM
		ds18b20_WriteByte(0xCC);
     768:	8c ec       	ldi	r24, 0xCC	; 204
     76a:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <ds18b20_WriteByte>
     76e:	1e c0       	rjmp	.+60     	; 0x7ac <ds18b20_ReadStratcpad+0x5e>
	}
	else
	{
		//Match Rom
		ds18b20_WriteByte(0x55);
     770:	85 e5       	ldi	r24, 0x55	; 85
     772:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <ds18b20_WriteByte>
     776:	f1 2c       	mov	r15, r1
     778:	e7 01       	movw	r28, r14
     77a:	cc 0f       	add	r28, r28
     77c:	dd 1f       	adc	r29, r29
     77e:	cc 0f       	add	r28, r28
     780:	dd 1f       	adc	r29, r29
     782:	cc 0f       	add	r28, r28
     784:	dd 1f       	adc	r29, r29
     786:	cc 51       	subi	r28, 0x1C	; 28
     788:	dd 4f       	sbci	r29, 0xFD	; 253
     78a:	c7 01       	movw	r24, r14
     78c:	88 0f       	add	r24, r24
     78e:	99 1f       	adc	r25, r25
     790:	88 0f       	add	r24, r24
     792:	99 1f       	adc	r25, r25
     794:	88 0f       	add	r24, r24
     796:	99 1f       	adc	r25, r25
     798:	9c 01       	movw	r18, r24
     79a:	24 51       	subi	r18, 0x14	; 20
     79c:	3d 4f       	sbci	r19, 0xFD	; 253
     79e:	79 01       	movw	r14, r18
		for(i=0;i<=7;i++)
		{
			ds18b20_WriteByte(Dev_ID[DevNum-1][i]);
     7a0:	89 91       	ld	r24, Y+
     7a2:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <ds18b20_WriteByte>
	}
	else
	{
		//Match Rom
		ds18b20_WriteByte(0x55);
		for(i=0;i<=7;i++)
     7a6:	ce 15       	cp	r28, r14
     7a8:	df 05       	cpc	r29, r15
     7aa:	d1 f7       	brne	.-12     	; 0x7a0 <ds18b20_ReadStratcpad+0x52>
		{
			ds18b20_WriteByte(Dev_ID[DevNum-1][i]);
		}
	}
	//READ SCRATCHPAD
	ds18b20_WriteByte(0xBE);
     7ac:	8e eb       	ldi	r24, 0xBE	; 190
     7ae:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <ds18b20_WriteByte>
     7b2:	e8 01       	movw	r28, r16
     7b4:	07 5f       	subi	r16, 0xF7	; 247
     7b6:	1f 4f       	sbci	r17, 0xFF	; 255
	for(i=0;i<=8;i++)
	{
		Data[i] = ds18b20_ReadByte();
     7b8:	0e 94 3c 02 	call	0x478	; 0x478 <ds18b20_ReadByte>
     7bc:	89 93       	st	Y+, r24
			ds18b20_WriteByte(Dev_ID[DevNum-1][i]);
		}
	}
	//READ SCRATCHPAD
	ds18b20_WriteByte(0xBE);
	for(i=0;i<=8;i++)
     7be:	c0 17       	cp	r28, r16
     7c0:	d1 07       	cpc	r29, r17
     7c2:	d1 f7       	brne	.-12     	; 0x7b8 <ds18b20_ReadStratcpad+0x6a>
	{
		Data[i] = ds18b20_ReadByte();
	}
}
     7c4:	df 91       	pop	r29
     7c6:	cf 91       	pop	r28
     7c8:	1f 91       	pop	r17
     7ca:	0f 91       	pop	r16
     7cc:	ff 90       	pop	r15
     7ce:	ef 90       	pop	r14
     7d0:	08 95       	ret

000007d2 <ds18b20_GetSign>:
uint8_t ds18b20_GetSign(uint16_t dt)
{
	//С•СЂРѕРІРµСЂРёРј 11-Р№ Р±РёС‚
	if (dt&(1<<11)) return 1;
	else return 0;
}
     7d2:	93 fb       	bst	r25, 3
     7d4:	88 27       	eor	r24, r24
     7d6:	80 f9       	bld	r24, 0
     7d8:	08 95       	ret

000007da <__vector_16>:
float Cppm=0;
unsigned int b;
uint8_t CO2_data[8];
uint8_t co2_d;

ISR(TIMER0_OVF_vect){
     7da:	1f 92       	push	r1
     7dc:	0f 92       	push	r0
     7de:	0f b6       	in	r0, 0x3f	; 63
     7e0:	0f 92       	push	r0
     7e2:	11 24       	eor	r1, r1
     7e4:	8f 93       	push	r24
     7e6:	9f 93       	push	r25
	b++;
     7e8:	80 91 44 03 	lds	r24, 0x0344	; 0x800344 <b>
     7ec:	90 91 45 03 	lds	r25, 0x0345	; 0x800345 <b+0x1>
     7f0:	01 96       	adiw	r24, 0x01	; 1
     7f2:	90 93 45 03 	sts	0x0345, r25	; 0x800345 <b+0x1>
     7f6:	80 93 44 03 	sts	0x0344, r24	; 0x800344 <b>
}
     7fa:	9f 91       	pop	r25
     7fc:	8f 91       	pop	r24
     7fe:	0f 90       	pop	r0
     800:	0f be       	out	0x3f, r0	; 63
     802:	0f 90       	pop	r0
     804:	1f 90       	pop	r1
     806:	18 95       	reti

00000808 <main>:


int main(void)
{
	DDRB |=(1<<DDB5);
     808:	25 9a       	sbi	0x04, 5	; 4
	adc_value=0;
     80a:	10 92 2f 03 	sts	0x032F, r1	; 0x80032f <adc_value+0x1>
     80e:	10 92 2e 03 	sts	0x032E, r1	; 0x80032e <adc_value>
// 	USART_ini(MYUBRR);
	timer0_init();
     812:	0e 94 65 01 	call	0x2ca	; 0x2ca <timer0_init>
	mg12232_init();
     816:	0e 94 de 05 	call	0xbbc	; 0xbbc <mg12232_init>
	adc_init();
     81a:	0e 94 4d 01 	call	0x29a	; 0x29a <adc_init>
	usartsoft_init();
     81e:	0e 94 c2 08 	call	0x1184	; 0x1184 <usartsoft_init>
	uint16_t temper_H;
// 	uint16_t temper_L;
	char c;
	uint8_t i;	
	uint8_t a;
	char status = ds18b20_init(NO_SKIP_ROM);
     822:	81 e0       	ldi	r24, 0x01	; 1
     824:	0e 94 e6 02 	call	0x5cc	; 0x5cc <ds18b20_init>
					command_write(CMD_COLUMN+1,3);
				}
				uint8_t chip;
				if(i==2||i==4||i==6){chip=2;command_write(CMD_COLUMN+18,2);}
				else chip=1;
				sprintf(str1,"%d=%c%d", i, c, temper_H);
     828:	0f 2e       	mov	r0, r31
     82a:	f2 e9       	ldi	r31, 0x92	; 146
     82c:	ef 2e       	mov	r14, r31
     82e:	f2 e0       	ldi	r31, 0x02	; 2
     830:	ff 2e       	mov	r15, r31
     832:	f0 2d       	mov	r31, r0
     834:	c8 e4       	ldi	r28, 0x48	; 72
     836:	d3 e0       	ldi	r29, 0x03	; 3
		
		adc_value=adc_convert();
//		n=(float)adc_value*5000/1024;
		Cppm=(adc_value-82)*15.167236;			//4.854*3.125
		dht11_start();
		sprintf(str1,"T=%d  H=%d ADC=%.f tim=%d\r\n", dht11_temp()+3, dht11_humid(), Cppm, b);
     838:	0f 2e       	mov	r0, r31
     83a:	fa e9       	ldi	r31, 0x9A	; 154
     83c:	8f 2e       	mov	r8, r31
     83e:	f2 e0       	ldi	r31, 0x02	; 2
     840:	9f 2e       	mov	r9, r31
     842:	f0 2d       	mov	r31, r0
// 		for (a=0;a<strlen(str1);a++)USART_Transmit(str1[a]);
		mg12232_string_write(str1, 0);
		sprintf(str1,"%x%x%x%x%x%x%x%x%x", 0xff, 0x01, 0x86, 0x00, 0x00, 0x00, 0x00, 0x00, 0x79);
     844:	0f 2e       	mov	r0, r31
     846:	f9 e7       	ldi	r31, 0x79	; 121
     848:	2f 2e       	mov	r2, r31
     84a:	f0 2d       	mov	r31, r0
     84c:	0f 2e       	mov	r0, r31
     84e:	f8 e9       	ldi	r31, 0x98	; 152
     850:	af 2e       	mov	r10, r31
     852:	f3 e0       	ldi	r31, 0x03	; 3
     854:	bf 2e       	mov	r11, r31
     856:	f0 2d       	mov	r31, r0
		for (a=0;a<strlen(str1);a++)usartsoft_transmit(str1[a]);
		for (i=0;i<8;i++)usartsoft_recieve(&CO2_data[i]);
		printf(str1," %x %x %x %x %x %x %x %x %x ", CO2_data[0], CO2_data[1], CO2_data[2], CO2_data[3], CO2_data[4], CO2_data[5], CO2_data[6], CO2_data[7], CO2_data[8]);
     858:	0f 2e       	mov	r0, r31
     85a:	f0 e9       	ldi	r31, 0x90	; 144
     85c:	cf 2e       	mov	r12, r31
     85e:	f3 e0       	ldi	r31, 0x03	; 3
     860:	df 2e       	mov	r13, r31
     862:	f0 2d       	mov	r31, r0
// 		sprintf(str1,"CRC: 0x%02X\r\n", Dev_ID[i-1][7]);
// 		for (a=0;a<strlen(str1);a++)USART_Transmit(str1[a]);
// 	}
    while (1) 
    {
		sei();
     864:	78 94       	sei
		clear_lcd();
     866:	0e 94 c6 05 	call	0xb8c	; 0xb8c <clear_lcd>
		
// 		for(i=1;i<=Dev_Cnt;i++)
// 		{
// 		}
		if (b < 300)
     86a:	80 91 44 03 	lds	r24, 0x0344	; 0x800344 <b>
     86e:	90 91 45 03 	lds	r25, 0x0345	; 0x800345 <b+0x1>
     872:	8c 32       	cpi	r24, 0x2C	; 44
     874:	91 40       	sbci	r25, 0x01	; 1
     876:	40 f4       	brcc	.+16     	; 0x888 <main+0x80>
		{
			PORTB &=~(1<<PORTB5);
     878:	2d 98       	cbi	0x05, 5	; 5
		{
			PORTB |=(1<<PORTB5);			
			b=0;
		}

		if (b==0)
     87a:	80 91 44 03 	lds	r24, 0x0344	; 0x800344 <b>
     87e:	90 91 45 03 	lds	r25, 0x0345	; 0x800345 <b+0x1>
     882:	89 2b       	or	r24, r25
     884:	39 f4       	brne	.+14     	; 0x894 <main+0x8c>
     886:	0b c0       	rjmp	.+22     	; 0x89e <main+0x96>
		{
			PORTB &=~(1<<PORTB5);
		} 
		else
		{
			PORTB |=(1<<PORTB5);			
     888:	2d 9a       	sbi	0x05, 5	; 5
			b=0;
     88a:	10 92 45 03 	sts	0x0345, r1	; 0x800345 <b+0x1>
     88e:	10 92 44 03 	sts	0x0344, r1	; 0x800344 <b>
     892:	05 c0       	rjmp	.+10     	; 0x89e <main+0x96>
		{
			ds18b20_MeasureTemperCmd(SKIP_ROM, 0);
		} 
		else
		{
			for(i=1;i<=Dev_Cnt;i++)
     894:	80 91 46 03 	lds	r24, 0x0346	; 0x800346 <Dev_Cnt>
     898:	81 11       	cpse	r24, r1
     89a:	06 c0       	rjmp	.+12     	; 0x8a8 <main+0xa0>
     89c:	94 c0       	rjmp	.+296    	; 0x9c6 <__stack+0xc7>
			b=0;
		}

		if (b==0)
		{
			ds18b20_MeasureTemperCmd(SKIP_ROM, 0);
     89e:	60 e0       	ldi	r22, 0x00	; 0
     8a0:	80 e0       	ldi	r24, 0x00	; 0
     8a2:	0e 94 76 03 	call	0x6ec	; 0x6ec <ds18b20_MeasureTemperCmd>
     8a6:	8f c0       	rjmp	.+286    	; 0x9c6 <__stack+0xc7>
		} 
		else
		{
			for(i=1;i<=Dev_Cnt;i++)
     8a8:	77 24       	eor	r7, r7
     8aa:	73 94       	inc	r7
			{
				ds18b20_ReadStratcpad(NO_SKIP_ROM, dt, i);
     8ac:	47 2d       	mov	r20, r7
     8ae:	68 e8       	ldi	r22, 0x88	; 136
     8b0:	73 e0       	ldi	r23, 0x03	; 3
     8b2:	81 e0       	ldi	r24, 0x01	; 1
     8b4:	0e 94 a7 03 	call	0x74e	; 0x74e <ds18b20_ReadStratcpad>
// 				sprintf(str1,"STRATHPAD %d: %02X %02X %02X %02X %02X %02X %02X %02X %02X; ",
// 				i, dt[0], dt[1], dt[2], dt[3], dt[4], dt[5], dt[6], dt[7], dt[8]);
// 				for (a=0;a<strlen(str1);a++)USART_Transmit(str1[a]);
				raw_temper = ((uint16_t)dt[1]<<8)|dt[0];
     8b8:	e8 e8       	ldi	r30, 0x88	; 136
     8ba:	f3 e0       	ldi	r31, 0x03	; 3
     8bc:	01 81       	ldd	r16, Z+1	; 0x01
     8be:	10 e0       	ldi	r17, 0x00	; 0
     8c0:	10 2f       	mov	r17, r16
     8c2:	00 27       	eor	r16, r16
     8c4:	80 81       	ld	r24, Z
     8c6:	08 2b       	or	r16, r24
				if(ds18b20_GetSign(raw_temper)) c='-';
     8c8:	c8 01       	movw	r24, r16
     8ca:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <ds18b20_GetSign>
     8ce:	81 11       	cpse	r24, r1
     8d0:	05 c0       	rjmp	.+10     	; 0x8dc <main+0xd4>
				else c='+';
     8d2:	0f 2e       	mov	r0, r31
     8d4:	fb e2       	ldi	r31, 0x2B	; 43
     8d6:	6f 2e       	mov	r6, r31
     8d8:	f0 2d       	mov	r31, r0
     8da:	04 c0       	rjmp	.+8      	; 0x8e4 <main+0xdc>
				ds18b20_ReadStratcpad(NO_SKIP_ROM, dt, i);
// 				sprintf(str1,"STRATHPAD %d: %02X %02X %02X %02X %02X %02X %02X %02X %02X; ",
// 				i, dt[0], dt[1], dt[2], dt[3], dt[4], dt[5], dt[6], dt[7], dt[8]);
// 				for (a=0;a<strlen(str1);a++)USART_Transmit(str1[a]);
				raw_temper = ((uint16_t)dt[1]<<8)|dt[0];
				if(ds18b20_GetSign(raw_temper)) c='-';
     8dc:	0f 2e       	mov	r0, r31
     8de:	fd e2       	ldi	r31, 0x2D	; 45
     8e0:	6f 2e       	mov	r6, r31
     8e2:	f0 2d       	mov	r31, r0
				else c='+';
// 				float t=ds18b20_Convert(raw_temper);
				temper_H = (raw_temper&0x0fff)>>4;
     8e4:	1f 70       	andi	r17, 0x0F	; 15
     8e6:	12 95       	swap	r17
     8e8:	02 95       	swap	r16
     8ea:	0f 70       	andi	r16, 0x0F	; 15
     8ec:	01 27       	eor	r16, r17
     8ee:	1f 70       	andi	r17, 0x0F	; 15
     8f0:	01 27       	eor	r16, r17
// 				temper_L = (raw_temper&0x000f)*625;
				if (i==1){
     8f2:	81 e0       	ldi	r24, 0x01	; 1
     8f4:	78 12       	cpse	r7, r24
     8f6:	09 c0       	rjmp	.+18     	; 0x90a <__stack+0xb>
					command_write(CMD_PAGE+1,3);
     8f8:	63 e0       	ldi	r22, 0x03	; 3
     8fa:	89 eb       	ldi	r24, 0xB9	; 185
     8fc:	0e 94 a6 05 	call	0xb4c	; 0xb4c <command_write>
					command_write(CMD_COLUMN+1,3);
     900:	63 e0       	ldi	r22, 0x03	; 3
     902:	84 e1       	ldi	r24, 0x14	; 20
     904:	0e 94 a6 05 	call	0xb4c	; 0xb4c <command_write>
     908:	1c c0       	rjmp	.+56     	; 0x942 <__stack+0x43>
				}
				if (i==3){
     90a:	93 e0       	ldi	r25, 0x03	; 3
     90c:	79 12       	cpse	r7, r25
     90e:	0b c0       	rjmp	.+22     	; 0x926 <__stack+0x27>
					command_write(CMD_PAGE+2,3);
     910:	63 e0       	ldi	r22, 0x03	; 3
     912:	8a eb       	ldi	r24, 0xBA	; 186
     914:	0e 94 a6 05 	call	0xb4c	; 0xb4c <command_write>
					command_write(CMD_COLUMN+1,3);
     918:	63 e0       	ldi	r22, 0x03	; 3
     91a:	84 e1       	ldi	r24, 0x14	; 20
     91c:	0e 94 a6 05 	call	0xb4c	; 0xb4c <command_write>
					command_write(CMD_PAGE+3,3);
					command_write(CMD_COLUMN+1,3);
				}
				uint8_t chip;
				if(i==2||i==4||i==6){chip=2;command_write(CMD_COLUMN+18,2);}
				else chip=1;
     920:	55 24       	eor	r5, r5
     922:	53 94       	inc	r5
     924:	1f c0       	rjmp	.+62     	; 0x964 <__stack+0x65>
					command_write(CMD_COLUMN+1,3);
				}
				if (i==3){
					command_write(CMD_PAGE+2,3);
					command_write(CMD_COLUMN+1,3);
					}if (i==5){
     926:	e5 e0       	ldi	r30, 0x05	; 5
     928:	7e 12       	cpse	r7, r30
     92a:	0b c0       	rjmp	.+22     	; 0x942 <__stack+0x43>
					command_write(CMD_PAGE+3,3);
     92c:	63 e0       	ldi	r22, 0x03	; 3
     92e:	8b eb       	ldi	r24, 0xBB	; 187
     930:	0e 94 a6 05 	call	0xb4c	; 0xb4c <command_write>
					command_write(CMD_COLUMN+1,3);
     934:	63 e0       	ldi	r22, 0x03	; 3
     936:	84 e1       	ldi	r24, 0x14	; 20
     938:	0e 94 a6 05 	call	0xb4c	; 0xb4c <command_write>
				}
				uint8_t chip;
				if(i==2||i==4||i==6){chip=2;command_write(CMD_COLUMN+18,2);}
				else chip=1;
     93c:	55 24       	eor	r5, r5
     93e:	53 94       	inc	r5
     940:	11 c0       	rjmp	.+34     	; 0x964 <__stack+0x65>
					}if (i==5){
					command_write(CMD_PAGE+3,3);
					command_write(CMD_COLUMN+1,3);
				}
				uint8_t chip;
				if(i==2||i==4||i==6){chip=2;command_write(CMD_COLUMN+18,2);}
     942:	87 2d       	mov	r24, r7
     944:	8b 7f       	andi	r24, 0xFB	; 251
     946:	82 30       	cpi	r24, 0x02	; 2
     948:	19 f0       	breq	.+6      	; 0x950 <__stack+0x51>
     94a:	f4 e0       	ldi	r31, 0x04	; 4
     94c:	7f 12       	cpse	r7, r31
     94e:	08 c0       	rjmp	.+16     	; 0x960 <__stack+0x61>
     950:	62 e0       	ldi	r22, 0x02	; 2
     952:	85 e2       	ldi	r24, 0x25	; 37
     954:	0e 94 a6 05 	call	0xb4c	; 0xb4c <command_write>
     958:	68 94       	set
     95a:	55 24       	eor	r5, r5
     95c:	51 f8       	bld	r5, 1
     95e:	02 c0       	rjmp	.+4      	; 0x964 <__stack+0x65>
				else chip=1;
     960:	55 24       	eor	r5, r5
     962:	53 94       	inc	r5
				sprintf(str1,"%d=%c%d", i, c, temper_H);
     964:	1f 93       	push	r17
     966:	0f 93       	push	r16
     968:	1f 92       	push	r1
     96a:	6f 92       	push	r6
     96c:	1f 92       	push	r1
     96e:	7f 92       	push	r7
     970:	ff 92       	push	r15
     972:	ef 92       	push	r14
     974:	df 93       	push	r29
     976:	cf 93       	push	r28
     978:	0e 94 db 0e 	call	0x1db6	; 0x1db6 <sprintf>
				for (a=0;a<strlen(str1);a++)number_write(str1[a],chip);
     97c:	ed b7       	in	r30, 0x3d	; 61
     97e:	fe b7       	in	r31, 0x3e	; 62
     980:	3a 96       	adiw	r30, 0x0a	; 10
     982:	0f b6       	in	r0, 0x3f	; 63
     984:	f8 94       	cli
     986:	fe bf       	out	0x3e, r31	; 62
     988:	0f be       	out	0x3f, r0	; 63
     98a:	ed bf       	out	0x3d, r30	; 61
     98c:	10 e0       	ldi	r17, 0x00	; 0
     98e:	09 c0       	rjmp	.+18     	; 0x9a2 <__stack+0xa3>
     990:	e1 2f       	mov	r30, r17
     992:	f0 e0       	ldi	r31, 0x00	; 0
     994:	e8 5b       	subi	r30, 0xB8	; 184
     996:	fc 4f       	sbci	r31, 0xFC	; 252
     998:	65 2d       	mov	r22, r5
     99a:	80 81       	ld	r24, Z
     99c:	0e 94 2d 06 	call	0xc5a	; 0xc5a <number_write>
     9a0:	1f 5f       	subi	r17, 0xFF	; 255
     9a2:	fe 01       	movw	r30, r28
     9a4:	01 90       	ld	r0, Z+
     9a6:	00 20       	and	r0, r0
     9a8:	e9 f7       	brne	.-6      	; 0x9a4 <__stack+0xa5>
     9aa:	31 97       	sbiw	r30, 0x01	; 1
     9ac:	e8 54       	subi	r30, 0x48	; 72
     9ae:	f3 40       	sbci	r31, 0x03	; 3
     9b0:	81 2f       	mov	r24, r17
     9b2:	90 e0       	ldi	r25, 0x00	; 0
     9b4:	8e 17       	cp	r24, r30
     9b6:	9f 07       	cpc	r25, r31
     9b8:	58 f3       	brcs	.-42     	; 0x990 <__stack+0x91>
		{
			ds18b20_MeasureTemperCmd(SKIP_ROM, 0);
		} 
		else
		{
			for(i=1;i<=Dev_Cnt;i++)
     9ba:	73 94       	inc	r7
     9bc:	80 91 46 03 	lds	r24, 0x0346	; 0x800346 <Dev_Cnt>
     9c0:	87 15       	cp	r24, r7
     9c2:	08 f0       	brcs	.+2      	; 0x9c6 <__stack+0xc7>
     9c4:	73 cf       	rjmp	.-282    	; 0x8ac <main+0xa4>
// 				sprintf(str1,"Raw t: 0x%04X; t: %c%.3f\r\n", raw_temper, c, t);
// 				for (a=0;a<strlen(str1);a++)USART_Transmit(str1[a]);
			}			
		}
		
		adc_value=adc_convert();
     9c6:	0e 94 58 01 	call	0x2b0	; 0x2b0 <adc_convert>
     9ca:	90 93 2f 03 	sts	0x032F, r25	; 0x80032f <adc_value+0x1>
     9ce:	80 93 2e 03 	sts	0x032E, r24	; 0x80032e <adc_value>
//		n=(float)adc_value*5000/1024;
		Cppm=(adc_value-82)*15.167236;			//4.854*3.125
     9d2:	bc 01       	movw	r22, r24
     9d4:	62 55       	subi	r22, 0x52	; 82
     9d6:	71 09       	sbc	r23, r1
     9d8:	80 e0       	ldi	r24, 0x00	; 0
     9da:	90 e0       	ldi	r25, 0x00	; 0
     9dc:	0e 94 e6 08 	call	0x11cc	; 0x11cc <__floatunsisf>
     9e0:	20 e0       	ldi	r18, 0x00	; 0
     9e2:	3d ea       	ldi	r19, 0xAD	; 173
     9e4:	42 e7       	ldi	r20, 0x72	; 114
     9e6:	51 e4       	ldi	r21, 0x41	; 65
     9e8:	0e 94 74 09 	call	0x12e8	; 0x12e8 <__mulsf3>
     9ec:	60 93 e8 02 	sts	0x02E8, r22	; 0x8002e8 <Cppm>
     9f0:	70 93 e9 02 	sts	0x02E9, r23	; 0x8002e9 <Cppm+0x1>
     9f4:	80 93 ea 02 	sts	0x02EA, r24	; 0x8002ea <Cppm+0x2>
     9f8:	90 93 eb 02 	sts	0x02EB, r25	; 0x8002eb <Cppm+0x3>
		dht11_start();
     9fc:	0e 94 86 01 	call	0x30c	; 0x30c <dht11_start>
		sprintf(str1,"T=%d  H=%d ADC=%.f tim=%d\r\n", dht11_temp()+3, dht11_humid(), Cppm, b);
     a00:	40 90 44 03 	lds	r4, 0x0344	; 0x800344 <b>
     a04:	30 90 45 03 	lds	r3, 0x0345	; 0x800345 <b+0x1>
     a08:	00 91 e8 02 	lds	r16, 0x02E8	; 0x8002e8 <Cppm>
     a0c:	70 90 e9 02 	lds	r7, 0x02E9	; 0x8002e9 <Cppm+0x1>
     a10:	60 90 ea 02 	lds	r6, 0x02EA	; 0x8002ea <Cppm+0x2>
     a14:	50 90 eb 02 	lds	r5, 0x02EB	; 0x8002eb <Cppm+0x3>
     a18:	0e 94 cd 01 	call	0x39a	; 0x39a <dht11_humid>
     a1c:	18 2f       	mov	r17, r24
     a1e:	0e 94 ca 01 	call	0x394	; 0x394 <dht11_temp>
     a22:	3f 92       	push	r3
     a24:	4f 92       	push	r4
     a26:	5f 92       	push	r5
     a28:	6f 92       	push	r6
     a2a:	7f 92       	push	r7
     a2c:	0f 93       	push	r16
     a2e:	1f 92       	push	r1
     a30:	1f 93       	push	r17
     a32:	90 e0       	ldi	r25, 0x00	; 0
     a34:	03 96       	adiw	r24, 0x03	; 3
     a36:	9f 93       	push	r25
     a38:	8f 93       	push	r24
     a3a:	9f 92       	push	r9
     a3c:	8f 92       	push	r8
     a3e:	df 93       	push	r29
     a40:	cf 93       	push	r28
     a42:	0e 94 db 0e 	call	0x1db6	; 0x1db6 <sprintf>
// 		for (a=0;a<strlen(str1);a++)USART_Transmit(str1[a]);
		mg12232_string_write(str1, 0);
     a46:	60 e0       	ldi	r22, 0x00	; 0
     a48:	ce 01       	movw	r24, r28
     a4a:	0e 94 87 07 	call	0xf0e	; 0xf0e <mg12232_string_write>
		sprintf(str1,"%x%x%x%x%x%x%x%x%x", 0xff, 0x01, 0x86, 0x00, 0x00, 0x00, 0x00, 0x00, 0x79);
     a4e:	1f 92       	push	r1
     a50:	2f 92       	push	r2
     a52:	1f 92       	push	r1
     a54:	1f 92       	push	r1
     a56:	1f 92       	push	r1
     a58:	1f 92       	push	r1
     a5a:	1f 92       	push	r1
     a5c:	1f 92       	push	r1
     a5e:	1f 92       	push	r1
     a60:	1f 92       	push	r1
     a62:	1f 92       	push	r1
     a64:	1f 92       	push	r1
     a66:	1f 92       	push	r1
     a68:	86 e8       	ldi	r24, 0x86	; 134
     a6a:	8f 93       	push	r24
     a6c:	1f 92       	push	r1
     a6e:	81 e0       	ldi	r24, 0x01	; 1
     a70:	8f 93       	push	r24
     a72:	1f 92       	push	r1
     a74:	9f ef       	ldi	r25, 0xFF	; 255
     a76:	9f 93       	push	r25
     a78:	e6 eb       	ldi	r30, 0xB6	; 182
     a7a:	f2 e0       	ldi	r31, 0x02	; 2
     a7c:	ff 93       	push	r31
     a7e:	ef 93       	push	r30
     a80:	df 93       	push	r29
     a82:	cf 93       	push	r28
     a84:	0e 94 db 0e 	call	0x1db6	; 0x1db6 <sprintf>
		for (a=0;a<strlen(str1);a++)usartsoft_transmit(str1[a]);
     a88:	ed b7       	in	r30, 0x3d	; 61
     a8a:	fe b7       	in	r31, 0x3e	; 62
     a8c:	b4 96       	adiw	r30, 0x24	; 36
     a8e:	0f b6       	in	r0, 0x3f	; 63
     a90:	f8 94       	cli
     a92:	fe bf       	out	0x3e, r31	; 62
     a94:	0f be       	out	0x3f, r0	; 63
     a96:	ed bf       	out	0x3d, r30	; 61
     a98:	10 e0       	ldi	r17, 0x00	; 0
     a9a:	08 c0       	rjmp	.+16     	; 0xaac <__stack+0x1ad>
     a9c:	e1 2f       	mov	r30, r17
     a9e:	f0 e0       	ldi	r31, 0x00	; 0
     aa0:	e8 5b       	subi	r30, 0xB8	; 184
     aa2:	fc 4f       	sbci	r31, 0xFC	; 252
     aa4:	80 81       	ld	r24, Z
     aa6:	0e 94 9d 08 	call	0x113a	; 0x113a <usartsoft_transmit>
     aaa:	1f 5f       	subi	r17, 0xFF	; 255
     aac:	fe 01       	movw	r30, r28
     aae:	01 90       	ld	r0, Z+
     ab0:	00 20       	and	r0, r0
     ab2:	e9 f7       	brne	.-6      	; 0xaae <__stack+0x1af>
     ab4:	31 97       	sbiw	r30, 0x01	; 1
     ab6:	e8 54       	subi	r30, 0x48	; 72
     ab8:	f3 40       	sbci	r31, 0x03	; 3
     aba:	81 2f       	mov	r24, r17
     abc:	90 e0       	ldi	r25, 0x00	; 0
     abe:	8e 17       	cp	r24, r30
     ac0:	9f 07       	cpc	r25, r31
     ac2:	60 f3       	brcs	.-40     	; 0xa9c <__stack+0x19d>
     ac4:	00 e9       	ldi	r16, 0x90	; 144
     ac6:	13 e0       	ldi	r17, 0x03	; 3
		for (i=0;i<8;i++)usartsoft_recieve(&CO2_data[i]);
     ac8:	c8 01       	movw	r24, r16
     aca:	0e 94 ad 08 	call	0x115a	; 0x115a <usartsoft_recieve>
     ace:	0f 5f       	subi	r16, 0xFF	; 255
     ad0:	1f 4f       	sbci	r17, 0xFF	; 255
     ad2:	a0 16       	cp	r10, r16
     ad4:	b1 06       	cpc	r11, r17
     ad6:	c1 f7       	brne	.-16     	; 0xac8 <__stack+0x1c9>
		printf(str1," %x %x %x %x %x %x %x %x %x ", CO2_data[0], CO2_data[1], CO2_data[2], CO2_data[3], CO2_data[4], CO2_data[5], CO2_data[6], CO2_data[7], CO2_data[8]);
     ad8:	f6 01       	movw	r30, r12
     ada:	80 85       	ldd	r24, Z+8	; 0x08
     adc:	1f 92       	push	r1
     ade:	8f 93       	push	r24
     ae0:	87 81       	ldd	r24, Z+7	; 0x07
     ae2:	1f 92       	push	r1
     ae4:	8f 93       	push	r24
     ae6:	86 81       	ldd	r24, Z+6	; 0x06
     ae8:	1f 92       	push	r1
     aea:	8f 93       	push	r24
     aec:	85 81       	ldd	r24, Z+5	; 0x05
     aee:	1f 92       	push	r1
     af0:	8f 93       	push	r24
     af2:	84 81       	ldd	r24, Z+4	; 0x04
     af4:	1f 92       	push	r1
     af6:	8f 93       	push	r24
     af8:	83 81       	ldd	r24, Z+3	; 0x03
     afa:	1f 92       	push	r1
     afc:	8f 93       	push	r24
     afe:	82 81       	ldd	r24, Z+2	; 0x02
     b00:	1f 92       	push	r1
     b02:	8f 93       	push	r24
     b04:	81 81       	ldd	r24, Z+1	; 0x01
     b06:	1f 92       	push	r1
     b08:	8f 93       	push	r24
     b0a:	80 81       	ld	r24, Z
     b0c:	1f 92       	push	r1
     b0e:	8f 93       	push	r24
     b10:	89 ec       	ldi	r24, 0xC9	; 201
     b12:	92 e0       	ldi	r25, 0x02	; 2
     b14:	9f 93       	push	r25
     b16:	8f 93       	push	r24
     b18:	df 93       	push	r29
     b1a:	cf 93       	push	r28
     b1c:	0e 94 c5 0e 	call	0x1d8a	; 0x1d8a <printf>
		mg12232_string_write(str1, 2);
     b20:	62 e0       	ldi	r22, 0x02	; 2
     b22:	ce 01       	movw	r24, r28
     b24:	0e 94 87 07 	call	0xf0e	; 0xf0e <mg12232_string_write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     b28:	8f ef       	ldi	r24, 0xFF	; 255
     b2a:	9b e7       	ldi	r25, 0x7B	; 123
     b2c:	e2 e9       	ldi	r30, 0x92	; 146
     b2e:	81 50       	subi	r24, 0x01	; 1
     b30:	90 40       	sbci	r25, 0x00	; 0
     b32:	e0 40       	sbci	r30, 0x00	; 0
     b34:	e1 f7       	brne	.-8      	; 0xb2e <__stack+0x22f>
     b36:	00 c0       	rjmp	.+0      	; 0xb38 <__stack+0x239>
     b38:	00 00       	nop
     b3a:	8d b7       	in	r24, 0x3d	; 61
     b3c:	9e b7       	in	r25, 0x3e	; 62
     b3e:	46 96       	adiw	r24, 0x16	; 22
     b40:	0f b6       	in	r0, 0x3f	; 63
     b42:	f8 94       	cli
     b44:	9e bf       	out	0x3e, r25	; 62
     b46:	0f be       	out	0x3f, r0	; 63
     b48:	8d bf       	out	0x3d, r24	; 61
     b4a:	8c ce       	rjmp	.-744    	; 0x864 <main+0x5c>

00000b4c <command_write>:
	command_write(CMD_COLUMN+0,3);
	command_write(CMD_START_LINE+0,3);
}

void command_write(uint8_t data, uint8_t chip){
	cli();
     b4c:	f8 94       	cli
	DATA_DDR=0xff;
     b4e:	9f ef       	ldi	r25, 0xFF	; 255
     b50:	9a b9       	out	0x0a, r25	; 10
	DATA_PORT=data;
     b52:	8b b9       	out	0x0b, r24	; 11
	A0_PORT &=~(1<<A0_PIN_NUM);
     b54:	2a 98       	cbi	0x05, 2	; 5
	if(chip&1) CS1_PORT |=(1<<CS1_PIN_NUM);
     b56:	60 fd       	sbrc	r22, 0
     b58:	28 9a       	sbi	0x05, 0	; 5
	if(chip&2) CS2_PORT |=(1<<CS2_PIN_NUM);
     b5a:	61 fd       	sbrc	r22, 1
     b5c:	29 9a       	sbi	0x05, 1	; 5
	CS1_PORT &=~((1<<CS1_PIN_NUM)|(1<<CS2_PIN_NUM));
     b5e:	85 b1       	in	r24, 0x05	; 5
     b60:	8c 7f       	andi	r24, 0xFC	; 252
     b62:	85 b9       	out	0x05, r24	; 5
	DATA_PORT=0;
     b64:	1b b8       	out	0x0b, r1	; 11
	DATA_DDR=0;
     b66:	1a b8       	out	0x0a, r1	; 10
	sei();
     b68:	78 94       	sei
     b6a:	08 95       	ret

00000b6c <data_write>:
}

void data_write(uint8_t data, uint8_t chip){
	cli();
     b6c:	f8 94       	cli
	DATA_DDR=0xff;
     b6e:	9f ef       	ldi	r25, 0xFF	; 255
     b70:	9a b9       	out	0x0a, r25	; 10
	DATA_PORT=data;
     b72:	8b b9       	out	0x0b, r24	; 11
	A0_PORT |=(1<<A0_PIN_NUM);
     b74:	2a 9a       	sbi	0x05, 2	; 5
	if(chip&1) CS1_PORT |=(1<<CS1_PIN_NUM);
     b76:	60 fd       	sbrc	r22, 0
     b78:	28 9a       	sbi	0x05, 0	; 5
	if(chip&2) CS2_PORT |=(1<<CS2_PIN_NUM);
     b7a:	61 fd       	sbrc	r22, 1
     b7c:	29 9a       	sbi	0x05, 1	; 5
	CS1_PORT &= ~((1 << CS1_PIN_NUM)|(1 << CS2_PIN_NUM));
     b7e:	85 b1       	in	r24, 0x05	; 5
     b80:	8c 7f       	andi	r24, 0xFC	; 252
     b82:	85 b9       	out	0x05, r24	; 5
	DATA_PORT=0;
     b84:	1b b8       	out	0x0b, r1	; 11
	DATA_DDR=0;
     b86:	1a b8       	out	0x0a, r1	; 10
	sei();
     b88:	78 94       	sei
     b8a:	08 95       	ret

00000b8c <clear_lcd>:
}
void clear_lcd(void){
     b8c:	cf 93       	push	r28
     b8e:	df 93       	push	r29
     b90:	d8 eb       	ldi	r29, 0xB8	; 184
	for (uint8_t page = 0; page < 4; page++) {
		command_write(CMD_PAGE + page, 3);
     b92:	63 e0       	ldi	r22, 0x03	; 3
     b94:	8d 2f       	mov	r24, r29
     b96:	0e 94 a6 05 	call	0xb4c	; 0xb4c <command_write>
		command_write(CMD_COLUMN + 0, 3);
     b9a:	63 e0       	ldi	r22, 0x03	; 3
     b9c:	83 e1       	ldi	r24, 0x13	; 19
     b9e:	0e 94 a6 05 	call	0xb4c	; 0xb4c <command_write>
     ba2:	cd e3       	ldi	r28, 0x3D	; 61
		for (uint8_t x = 0; x < 61; x++) {
			data_write(0, 3);
     ba4:	63 e0       	ldi	r22, 0x03	; 3
     ba6:	80 e0       	ldi	r24, 0x00	; 0
     ba8:	0e 94 b6 05 	call	0xb6c	; 0xb6c <data_write>
     bac:	c1 50       	subi	r28, 0x01	; 1
}
void clear_lcd(void){
	for (uint8_t page = 0; page < 4; page++) {
		command_write(CMD_PAGE + page, 3);
		command_write(CMD_COLUMN + 0, 3);
		for (uint8_t x = 0; x < 61; x++) {
     bae:	d1 f7       	brne	.-12     	; 0xba4 <clear_lcd+0x18>
     bb0:	df 5f       	subi	r29, 0xFF	; 255
	DATA_PORT=0;
	DATA_DDR=0;
	sei();
}
void clear_lcd(void){
	for (uint8_t page = 0; page < 4; page++) {
     bb2:	dc 3b       	cpi	r29, 0xBC	; 188
     bb4:	71 f7       	brne	.-36     	; 0xb92 <clear_lcd+0x6>
		command_write(CMD_COLUMN + 0, 3);
		for (uint8_t x = 0; x < 61; x++) {
			data_write(0, 3);
		}
	}
}
     bb6:	df 91       	pop	r29
     bb8:	cf 91       	pop	r28
     bba:	08 95       	ret

00000bbc <mg12232_init>:
#include "mg12232.h"


void mg12232_init(void){
	DATA_DDR |= 0xff;
     bbc:	8a b1       	in	r24, 0x0a	; 10
     bbe:	8f ef       	ldi	r24, 0xFF	; 255
     bc0:	8a b9       	out	0x0a, r24	; 10
	DATA_PORT|=0xff;
     bc2:	9b b1       	in	r25, 0x0b	; 11
     bc4:	8b b9       	out	0x0b, r24	; 11
	DDRB |=0x07;
     bc6:	84 b1       	in	r24, 0x04	; 4
     bc8:	87 60       	ori	r24, 0x07	; 7
     bca:	84 b9       	out	0x04, r24	; 4
	PORTB|=0x07;
     bcc:	85 b1       	in	r24, 0x05	; 5
     bce:	87 60       	ori	r24, 0x07	; 7
     bd0:	85 b9       	out	0x05, r24	; 5
	PORTB|=0x04;
     bd2:	2a 9a       	sbi	0x05, 2	; 5
	PORTB|=0x07;
     bd4:	85 b1       	in	r24, 0x05	; 5
     bd6:	87 60       	ori	r24, 0x07	; 7
     bd8:	85 b9       	out	0x05, r24	; 5
	PORTB|=0x04;
     bda:	2a 9a       	sbi	0x05, 2	; 5
	PORTB|=0x07;
     bdc:	85 b1       	in	r24, 0x05	; 5
     bde:	87 60       	ori	r24, 0x07	; 7
     be0:	85 b9       	out	0x05, r24	; 5
	PORTB|=0x00;
     be2:	85 b1       	in	r24, 0x05	; 5
     be4:	85 b9       	out	0x05, r24	; 5
	command_write(CMD_RESET,3);
     be6:	63 e0       	ldi	r22, 0x03	; 3
     be8:	82 ee       	ldi	r24, 0xE2	; 226
     bea:	0e 94 a6 05 	call	0xb4c	; 0xb4c <command_write>
	command_write(CMD_DUTY_CYCLE_32,3);
     bee:	63 e0       	ldi	r22, 0x03	; 3
     bf0:	89 ea       	ldi	r24, 0xA9	; 169
     bf2:	0e 94 a6 05 	call	0xb4c	; 0xb4c <command_write>
	command_write(CMD_STATIC_DRIVE_OFF,3);
     bf6:	63 e0       	ldi	r22, 0x03	; 3
     bf8:	84 ea       	ldi	r24, 0xA4	; 164
     bfa:	0e 94 a6 05 	call	0xb4c	; 0xb4c <command_write>
	command_write(CMD_ADC_CCW,3);
     bfe:	63 e0       	ldi	r22, 0x03	; 3
     c00:	81 ea       	ldi	r24, 0xA1	; 161
     c02:	0e 94 a6 05 	call	0xb4c	; 0xb4c <command_write>
	command_write(CMD_DISPLAY_ON,3);
     c06:	63 e0       	ldi	r22, 0x03	; 3
     c08:	8f ea       	ldi	r24, 0xAF	; 175
     c0a:	0e 94 a6 05 	call	0xb4c	; 0xb4c <command_write>
	clear_lcd();
     c0e:	0e 94 c6 05 	call	0xb8c	; 0xb8c <clear_lcd>
	command_write(CMD_PAGE+0,3);
     c12:	63 e0       	ldi	r22, 0x03	; 3
     c14:	88 eb       	ldi	r24, 0xB8	; 184
     c16:	0e 94 a6 05 	call	0xb4c	; 0xb4c <command_write>
	command_write(CMD_COLUMN+0,3);
     c1a:	63 e0       	ldi	r22, 0x03	; 3
     c1c:	83 e1       	ldi	r24, 0x13	; 19
     c1e:	0e 94 a6 05 	call	0xb4c	; 0xb4c <command_write>
	command_write(CMD_START_LINE+0,3);
     c22:	63 e0       	ldi	r22, 0x03	; 3
     c24:	8f ed       	ldi	r24, 0xDF	; 223
     c26:	0e 94 a6 05 	call	0xb4c	; 0xb4c <command_write>
     c2a:	08 95       	ret

00000c2c <simbol_write>:
		for (uint8_t x = 0; x < 61; x++) {
			data_write(0, 3);
		}
	}
}
void simbol_write(unsigned char simbol[], uint8_t chip){
     c2c:	ff 92       	push	r15
     c2e:	0f 93       	push	r16
     c30:	1f 93       	push	r17
     c32:	cf 93       	push	r28
     c34:	df 93       	push	r29
     c36:	f6 2e       	mov	r15, r22
     c38:	ec 01       	movw	r28, r24
     c3a:	8c 01       	movw	r16, r24
     c3c:	0a 5f       	subi	r16, 0xFA	; 250
     c3e:	1f 4f       	sbci	r17, 0xFF	; 255
	for (unsigned char a=0; a<6;a++)
	{
		data_write(simbol[a],chip);
     c40:	6f 2d       	mov	r22, r15
     c42:	89 91       	ld	r24, Y+
     c44:	0e 94 b6 05 	call	0xb6c	; 0xb6c <data_write>
			data_write(0, 3);
		}
	}
}
void simbol_write(unsigned char simbol[], uint8_t chip){
	for (unsigned char a=0; a<6;a++)
     c48:	c0 17       	cp	r28, r16
     c4a:	d1 07       	cpc	r29, r17
     c4c:	c9 f7       	brne	.-14     	; 0xc40 <simbol_write+0x14>
	{
		data_write(simbol[a],chip);
	}
}
     c4e:	df 91       	pop	r29
     c50:	cf 91       	pop	r28
     c52:	1f 91       	pop	r17
     c54:	0f 91       	pop	r16
     c56:	ff 90       	pop	r15
     c58:	08 95       	ret

00000c5a <number_write>:
	{0b00000000, 0b00001000, 0b00001000, 0b00001000, 0b00000000, 0x0},	//-
	{0b00000000, 0b00001000, 0b00011100, 0b00001000, 0b00000000, 0x0}		//+
};

void number_write(char t, uint8_t chip){
	switch(t){
     c5a:	90 e0       	ldi	r25, 0x00	; 0
     c5c:	fc 01       	movw	r30, r24
     c5e:	b0 97       	sbiw	r30, 0x20	; 32
     c60:	eb 35       	cpi	r30, 0x5B	; 91
     c62:	f1 05       	cpc	r31, r1
     c64:	08 f0       	brcs	.+2      	; 0xc68 <number_write+0xe>
     c66:	52 c1       	rjmp	.+676    	; 0xf0c <number_write+0x2b2>
     c68:	ec 5c       	subi	r30, 0xCC	; 204
     c6a:	ff 4f       	sbci	r31, 0xFF	; 255
     c6c:	0c 94 5e 0d 	jmp	0x1abc	; 0x1abc <__tablejump2__>
		case '0' : simbol_write(numbers[0],chip);break;
     c70:	80 e0       	ldi	r24, 0x00	; 0
     c72:	91 e0       	ldi	r25, 0x01	; 1
     c74:	0e 94 16 06 	call	0xc2c	; 0xc2c <simbol_write>
     c78:	08 95       	ret
		case '1' : simbol_write(numbers[1],chip);break;
     c7a:	86 e0       	ldi	r24, 0x06	; 6
     c7c:	91 e0       	ldi	r25, 0x01	; 1
     c7e:	0e 94 16 06 	call	0xc2c	; 0xc2c <simbol_write>
     c82:	08 95       	ret
		case '2' : simbol_write(numbers[2],chip);break;
     c84:	8c e0       	ldi	r24, 0x0C	; 12
     c86:	91 e0       	ldi	r25, 0x01	; 1
     c88:	0e 94 16 06 	call	0xc2c	; 0xc2c <simbol_write>
     c8c:	08 95       	ret
		case '3' : simbol_write(numbers[3],chip);break;
     c8e:	82 e1       	ldi	r24, 0x12	; 18
     c90:	91 e0       	ldi	r25, 0x01	; 1
     c92:	0e 94 16 06 	call	0xc2c	; 0xc2c <simbol_write>
     c96:	08 95       	ret
		case '4' : simbol_write(numbers[4],chip);break;
     c98:	88 e1       	ldi	r24, 0x18	; 24
     c9a:	91 e0       	ldi	r25, 0x01	; 1
     c9c:	0e 94 16 06 	call	0xc2c	; 0xc2c <simbol_write>
     ca0:	08 95       	ret
		case '5' : simbol_write(numbers[5],chip);break;
     ca2:	8e e1       	ldi	r24, 0x1E	; 30
     ca4:	91 e0       	ldi	r25, 0x01	; 1
     ca6:	0e 94 16 06 	call	0xc2c	; 0xc2c <simbol_write>
     caa:	08 95       	ret
		case '6' : simbol_write(numbers[6],chip);break;
     cac:	84 e2       	ldi	r24, 0x24	; 36
     cae:	91 e0       	ldi	r25, 0x01	; 1
     cb0:	0e 94 16 06 	call	0xc2c	; 0xc2c <simbol_write>
     cb4:	08 95       	ret
		case '7' : simbol_write(numbers[7],chip);break;
     cb6:	8a e2       	ldi	r24, 0x2A	; 42
     cb8:	91 e0       	ldi	r25, 0x01	; 1
     cba:	0e 94 16 06 	call	0xc2c	; 0xc2c <simbol_write>
     cbe:	08 95       	ret
		case '8' : simbol_write(numbers[8],chip);break;
     cc0:	80 e3       	ldi	r24, 0x30	; 48
     cc2:	91 e0       	ldi	r25, 0x01	; 1
     cc4:	0e 94 16 06 	call	0xc2c	; 0xc2c <simbol_write>
     cc8:	08 95       	ret
		case '9' : simbol_write(numbers[9],chip);break;
     cca:	86 e3       	ldi	r24, 0x36	; 54
     ccc:	91 e0       	ldi	r25, 0x01	; 1
     cce:	0e 94 16 06 	call	0xc2c	; 0xc2c <simbol_write>
     cd2:	08 95       	ret
		case '=' : simbol_write(numbers[10],chip);break;
     cd4:	8c e3       	ldi	r24, 0x3C	; 60
     cd6:	91 e0       	ldi	r25, 0x01	; 1
     cd8:	0e 94 16 06 	call	0xc2c	; 0xc2c <simbol_write>
     cdc:	08 95       	ret
		case 'A' : simbol_write(numbers[11],chip);break;
     cde:	82 e4       	ldi	r24, 0x42	; 66
     ce0:	91 e0       	ldi	r25, 0x01	; 1
     ce2:	0e 94 16 06 	call	0xc2c	; 0xc2c <simbol_write>
     ce6:	08 95       	ret
		case 'B' : simbol_write(numbers[12],chip);break;
     ce8:	88 e4       	ldi	r24, 0x48	; 72
     cea:	91 e0       	ldi	r25, 0x01	; 1
     cec:	0e 94 16 06 	call	0xc2c	; 0xc2c <simbol_write>
     cf0:	08 95       	ret
		case 'C' : simbol_write(numbers[13],chip);break;
     cf2:	8e e4       	ldi	r24, 0x4E	; 78
     cf4:	91 e0       	ldi	r25, 0x01	; 1
     cf6:	0e 94 16 06 	call	0xc2c	; 0xc2c <simbol_write>
     cfa:	08 95       	ret
		case 'D' : simbol_write(numbers[14],chip);break;
     cfc:	84 e5       	ldi	r24, 0x54	; 84
     cfe:	91 e0       	ldi	r25, 0x01	; 1
     d00:	0e 94 16 06 	call	0xc2c	; 0xc2c <simbol_write>
     d04:	08 95       	ret
		case 'E' : simbol_write(numbers[15],chip);break;
     d06:	8a e5       	ldi	r24, 0x5A	; 90
     d08:	91 e0       	ldi	r25, 0x01	; 1
     d0a:	0e 94 16 06 	call	0xc2c	; 0xc2c <simbol_write>
     d0e:	08 95       	ret
		case 'F' : simbol_write(numbers[16],chip);break;
     d10:	80 e6       	ldi	r24, 0x60	; 96
     d12:	91 e0       	ldi	r25, 0x01	; 1
     d14:	0e 94 16 06 	call	0xc2c	; 0xc2c <simbol_write>
     d18:	08 95       	ret
		case 'G' : simbol_write(numbers[17],chip);break;
     d1a:	86 e6       	ldi	r24, 0x66	; 102
     d1c:	91 e0       	ldi	r25, 0x01	; 1
     d1e:	0e 94 16 06 	call	0xc2c	; 0xc2c <simbol_write>
     d22:	08 95       	ret
		case 'H' : simbol_write(numbers[18],chip);break;
     d24:	8c e6       	ldi	r24, 0x6C	; 108
     d26:	91 e0       	ldi	r25, 0x01	; 1
     d28:	0e 94 16 06 	call	0xc2c	; 0xc2c <simbol_write>
     d2c:	08 95       	ret
		case 'I' : simbol_write(numbers[19],chip);break;
     d2e:	82 e7       	ldi	r24, 0x72	; 114
     d30:	91 e0       	ldi	r25, 0x01	; 1
     d32:	0e 94 16 06 	call	0xc2c	; 0xc2c <simbol_write>
     d36:	08 95       	ret
		case 'J' : simbol_write(numbers[20],chip);break;
     d38:	88 e7       	ldi	r24, 0x78	; 120
     d3a:	91 e0       	ldi	r25, 0x01	; 1
     d3c:	0e 94 16 06 	call	0xc2c	; 0xc2c <simbol_write>
     d40:	08 95       	ret
		case 'K' : simbol_write(numbers[21],chip);break;
     d42:	8e e7       	ldi	r24, 0x7E	; 126
     d44:	91 e0       	ldi	r25, 0x01	; 1
     d46:	0e 94 16 06 	call	0xc2c	; 0xc2c <simbol_write>
     d4a:	08 95       	ret
		case 'L' : simbol_write(numbers[22],chip);break;
     d4c:	84 e8       	ldi	r24, 0x84	; 132
     d4e:	91 e0       	ldi	r25, 0x01	; 1
     d50:	0e 94 16 06 	call	0xc2c	; 0xc2c <simbol_write>
     d54:	08 95       	ret
		case 'M' : simbol_write(numbers[23],chip);break;
     d56:	8a e8       	ldi	r24, 0x8A	; 138
     d58:	91 e0       	ldi	r25, 0x01	; 1
     d5a:	0e 94 16 06 	call	0xc2c	; 0xc2c <simbol_write>
     d5e:	08 95       	ret
		case 'N' : simbol_write(numbers[24],chip);break;
     d60:	80 e9       	ldi	r24, 0x90	; 144
     d62:	91 e0       	ldi	r25, 0x01	; 1
     d64:	0e 94 16 06 	call	0xc2c	; 0xc2c <simbol_write>
     d68:	08 95       	ret
		case 'O' : simbol_write(numbers[25],chip);break;
     d6a:	86 e9       	ldi	r24, 0x96	; 150
     d6c:	91 e0       	ldi	r25, 0x01	; 1
     d6e:	0e 94 16 06 	call	0xc2c	; 0xc2c <simbol_write>
     d72:	08 95       	ret
		case 'P' : simbol_write(numbers[26],chip);break;
     d74:	8c e9       	ldi	r24, 0x9C	; 156
     d76:	91 e0       	ldi	r25, 0x01	; 1
     d78:	0e 94 16 06 	call	0xc2c	; 0xc2c <simbol_write>
     d7c:	08 95       	ret
		case 'Q' : simbol_write(numbers[27],chip);break;
     d7e:	82 ea       	ldi	r24, 0xA2	; 162
     d80:	91 e0       	ldi	r25, 0x01	; 1
     d82:	0e 94 16 06 	call	0xc2c	; 0xc2c <simbol_write>
     d86:	08 95       	ret
		case 'R' : simbol_write(numbers[28],chip);break;
     d88:	88 ea       	ldi	r24, 0xA8	; 168
     d8a:	91 e0       	ldi	r25, 0x01	; 1
     d8c:	0e 94 16 06 	call	0xc2c	; 0xc2c <simbol_write>
     d90:	08 95       	ret
		case 'S' : simbol_write(numbers[29],chip);break;
     d92:	8e ea       	ldi	r24, 0xAE	; 174
     d94:	91 e0       	ldi	r25, 0x01	; 1
     d96:	0e 94 16 06 	call	0xc2c	; 0xc2c <simbol_write>
     d9a:	08 95       	ret
		case 'T' : simbol_write(numbers[30],chip);break;
     d9c:	84 eb       	ldi	r24, 0xB4	; 180
     d9e:	91 e0       	ldi	r25, 0x01	; 1
     da0:	0e 94 16 06 	call	0xc2c	; 0xc2c <simbol_write>
     da4:	08 95       	ret
		case 'U' : simbol_write(numbers[31],chip);break;
     da6:	8a eb       	ldi	r24, 0xBA	; 186
     da8:	91 e0       	ldi	r25, 0x01	; 1
     daa:	0e 94 16 06 	call	0xc2c	; 0xc2c <simbol_write>
     dae:	08 95       	ret
		case 'V' : simbol_write(numbers[32],chip);break;
     db0:	80 ec       	ldi	r24, 0xC0	; 192
     db2:	91 e0       	ldi	r25, 0x01	; 1
     db4:	0e 94 16 06 	call	0xc2c	; 0xc2c <simbol_write>
     db8:	08 95       	ret
		case 'W' : simbol_write(numbers[33],chip);break;
     dba:	86 ec       	ldi	r24, 0xC6	; 198
     dbc:	91 e0       	ldi	r25, 0x01	; 1
     dbe:	0e 94 16 06 	call	0xc2c	; 0xc2c <simbol_write>
     dc2:	08 95       	ret
		case 'X' : simbol_write(numbers[34],chip);break;
     dc4:	8c ec       	ldi	r24, 0xCC	; 204
     dc6:	91 e0       	ldi	r25, 0x01	; 1
     dc8:	0e 94 16 06 	call	0xc2c	; 0xc2c <simbol_write>
     dcc:	08 95       	ret
		case 'Y' : simbol_write(numbers[35],chip);break;
     dce:	82 ed       	ldi	r24, 0xD2	; 210
     dd0:	91 e0       	ldi	r25, 0x01	; 1
     dd2:	0e 94 16 06 	call	0xc2c	; 0xc2c <simbol_write>
     dd6:	08 95       	ret
		case 'Z' : simbol_write(numbers[36],chip);break;
     dd8:	88 ed       	ldi	r24, 0xD8	; 216
     dda:	91 e0       	ldi	r25, 0x01	; 1
     ddc:	0e 94 16 06 	call	0xc2c	; 0xc2c <simbol_write>
     de0:	08 95       	ret
		case 'a' : simbol_write(numbers[37],chip);break;
     de2:	8e ed       	ldi	r24, 0xDE	; 222
     de4:	91 e0       	ldi	r25, 0x01	; 1
     de6:	0e 94 16 06 	call	0xc2c	; 0xc2c <simbol_write>
     dea:	08 95       	ret
		case 'b' : simbol_write(numbers[38],chip);break;
     dec:	84 ee       	ldi	r24, 0xE4	; 228
     dee:	91 e0       	ldi	r25, 0x01	; 1
     df0:	0e 94 16 06 	call	0xc2c	; 0xc2c <simbol_write>
     df4:	08 95       	ret
		case 'c' : simbol_write(numbers[39],chip);break;
     df6:	8a ee       	ldi	r24, 0xEA	; 234
     df8:	91 e0       	ldi	r25, 0x01	; 1
     dfa:	0e 94 16 06 	call	0xc2c	; 0xc2c <simbol_write>
     dfe:	08 95       	ret
		case 'd' : simbol_write(numbers[40],chip);break;
     e00:	80 ef       	ldi	r24, 0xF0	; 240
     e02:	91 e0       	ldi	r25, 0x01	; 1
     e04:	0e 94 16 06 	call	0xc2c	; 0xc2c <simbol_write>
     e08:	08 95       	ret
		case 'e' : simbol_write(numbers[41],chip);break;
     e0a:	86 ef       	ldi	r24, 0xF6	; 246
     e0c:	91 e0       	ldi	r25, 0x01	; 1
     e0e:	0e 94 16 06 	call	0xc2c	; 0xc2c <simbol_write>
     e12:	08 95       	ret
		case 'f' : simbol_write(numbers[42],chip);break;
     e14:	8c ef       	ldi	r24, 0xFC	; 252
     e16:	91 e0       	ldi	r25, 0x01	; 1
     e18:	0e 94 16 06 	call	0xc2c	; 0xc2c <simbol_write>
     e1c:	08 95       	ret
		case 'g' : simbol_write(numbers[43],chip);break;
     e1e:	82 e0       	ldi	r24, 0x02	; 2
     e20:	92 e0       	ldi	r25, 0x02	; 2
     e22:	0e 94 16 06 	call	0xc2c	; 0xc2c <simbol_write>
     e26:	08 95       	ret
		case 'h' : simbol_write(numbers[44],chip);break;
     e28:	88 e0       	ldi	r24, 0x08	; 8
     e2a:	92 e0       	ldi	r25, 0x02	; 2
     e2c:	0e 94 16 06 	call	0xc2c	; 0xc2c <simbol_write>
     e30:	08 95       	ret
		case 'i' : simbol_write(numbers[45],chip);break;
     e32:	8e e0       	ldi	r24, 0x0E	; 14
     e34:	92 e0       	ldi	r25, 0x02	; 2
     e36:	0e 94 16 06 	call	0xc2c	; 0xc2c <simbol_write>
     e3a:	08 95       	ret
		case 'j' : simbol_write(numbers[46],chip);break;
     e3c:	84 e1       	ldi	r24, 0x14	; 20
     e3e:	92 e0       	ldi	r25, 0x02	; 2
     e40:	0e 94 16 06 	call	0xc2c	; 0xc2c <simbol_write>
     e44:	08 95       	ret
		case 'k' : simbol_write(numbers[47],chip);break;
     e46:	8a e1       	ldi	r24, 0x1A	; 26
     e48:	92 e0       	ldi	r25, 0x02	; 2
     e4a:	0e 94 16 06 	call	0xc2c	; 0xc2c <simbol_write>
     e4e:	08 95       	ret
		case 'l' : simbol_write(numbers[48],chip);break;
     e50:	80 e2       	ldi	r24, 0x20	; 32
     e52:	92 e0       	ldi	r25, 0x02	; 2
     e54:	0e 94 16 06 	call	0xc2c	; 0xc2c <simbol_write>
     e58:	08 95       	ret
		case 'm' : simbol_write(numbers[49],chip);break;
     e5a:	86 e2       	ldi	r24, 0x26	; 38
     e5c:	92 e0       	ldi	r25, 0x02	; 2
     e5e:	0e 94 16 06 	call	0xc2c	; 0xc2c <simbol_write>
     e62:	08 95       	ret
		case 'n' : simbol_write(numbers[50],chip);break;
     e64:	8c e2       	ldi	r24, 0x2C	; 44
     e66:	92 e0       	ldi	r25, 0x02	; 2
     e68:	0e 94 16 06 	call	0xc2c	; 0xc2c <simbol_write>
     e6c:	08 95       	ret
		case 'o' : simbol_write(numbers[51],chip);break;
     e6e:	82 e3       	ldi	r24, 0x32	; 50
     e70:	92 e0       	ldi	r25, 0x02	; 2
     e72:	0e 94 16 06 	call	0xc2c	; 0xc2c <simbol_write>
     e76:	08 95       	ret
		case 'p' : simbol_write(numbers[52],chip);break;
     e78:	88 e3       	ldi	r24, 0x38	; 56
     e7a:	92 e0       	ldi	r25, 0x02	; 2
     e7c:	0e 94 16 06 	call	0xc2c	; 0xc2c <simbol_write>
     e80:	08 95       	ret
		case 'q' : simbol_write(numbers[53],chip);break;
     e82:	8e e3       	ldi	r24, 0x3E	; 62
     e84:	92 e0       	ldi	r25, 0x02	; 2
     e86:	0e 94 16 06 	call	0xc2c	; 0xc2c <simbol_write>
     e8a:	08 95       	ret
		case 'r' : simbol_write(numbers[54],chip);break;
     e8c:	84 e4       	ldi	r24, 0x44	; 68
     e8e:	92 e0       	ldi	r25, 0x02	; 2
     e90:	0e 94 16 06 	call	0xc2c	; 0xc2c <simbol_write>
     e94:	08 95       	ret
		case 's' : simbol_write(numbers[55],chip);break;
     e96:	8a e4       	ldi	r24, 0x4A	; 74
     e98:	92 e0       	ldi	r25, 0x02	; 2
     e9a:	0e 94 16 06 	call	0xc2c	; 0xc2c <simbol_write>
     e9e:	08 95       	ret
		case 't' : simbol_write(numbers[56],chip);break;
     ea0:	80 e5       	ldi	r24, 0x50	; 80
     ea2:	92 e0       	ldi	r25, 0x02	; 2
     ea4:	0e 94 16 06 	call	0xc2c	; 0xc2c <simbol_write>
     ea8:	08 95       	ret
		case 'u' : simbol_write(numbers[57],chip);break;
     eaa:	86 e5       	ldi	r24, 0x56	; 86
     eac:	92 e0       	ldi	r25, 0x02	; 2
     eae:	0e 94 16 06 	call	0xc2c	; 0xc2c <simbol_write>
     eb2:	08 95       	ret
		case 'v' : simbol_write(numbers[58],chip);break;
     eb4:	8c e5       	ldi	r24, 0x5C	; 92
     eb6:	92 e0       	ldi	r25, 0x02	; 2
     eb8:	0e 94 16 06 	call	0xc2c	; 0xc2c <simbol_write>
     ebc:	08 95       	ret
		case 'w' : simbol_write(numbers[59],chip);break;
     ebe:	82 e6       	ldi	r24, 0x62	; 98
     ec0:	92 e0       	ldi	r25, 0x02	; 2
     ec2:	0e 94 16 06 	call	0xc2c	; 0xc2c <simbol_write>
     ec6:	08 95       	ret
		case 'x' : simbol_write(numbers[60],chip);break;
     ec8:	88 e6       	ldi	r24, 0x68	; 104
     eca:	92 e0       	ldi	r25, 0x02	; 2
     ecc:	0e 94 16 06 	call	0xc2c	; 0xc2c <simbol_write>
     ed0:	08 95       	ret
		case 'y' : simbol_write(numbers[61],chip);break;
     ed2:	8e e6       	ldi	r24, 0x6E	; 110
     ed4:	92 e0       	ldi	r25, 0x02	; 2
     ed6:	0e 94 16 06 	call	0xc2c	; 0xc2c <simbol_write>
     eda:	08 95       	ret
		case 'z' : simbol_write(numbers[62],chip);break;
     edc:	84 e7       	ldi	r24, 0x74	; 116
     ede:	92 e0       	ldi	r25, 0x02	; 2
     ee0:	0e 94 16 06 	call	0xc2c	; 0xc2c <simbol_write>
     ee4:	08 95       	ret
		case '.' : simbol_write(numbers[63],chip);break;
     ee6:	8a e7       	ldi	r24, 0x7A	; 122
     ee8:	92 e0       	ldi	r25, 0x02	; 2
     eea:	0e 94 16 06 	call	0xc2c	; 0xc2c <simbol_write>
     eee:	08 95       	ret
		case ' ' : simbol_write(numbers[64],chip);break;
     ef0:	80 e8       	ldi	r24, 0x80	; 128
     ef2:	92 e0       	ldi	r25, 0x02	; 2
     ef4:	0e 94 16 06 	call	0xc2c	; 0xc2c <simbol_write>
     ef8:	08 95       	ret
		case '-' : simbol_write(numbers[65],chip);break;
     efa:	86 e8       	ldi	r24, 0x86	; 134
     efc:	92 e0       	ldi	r25, 0x02	; 2
     efe:	0e 94 16 06 	call	0xc2c	; 0xc2c <simbol_write>
     f02:	08 95       	ret
		case '+' : simbol_write(numbers[66],chip);break;
     f04:	8c e8       	ldi	r24, 0x8C	; 140
     f06:	92 e0       	ldi	r25, 0x02	; 2
     f08:	0e 94 16 06 	call	0xc2c	; 0xc2c <simbol_write>
     f0c:	08 95       	ret

00000f0e <mg12232_string_write>:
	for (unsigned char a=0; a<6;a++)
	{
		data_write(simbol[a],chip);
	}
}
void mg12232_string_write(char str[], uint8_t page){
     f0e:	bf 92       	push	r11
     f10:	cf 92       	push	r12
     f12:	df 92       	push	r13
     f14:	ef 92       	push	r14
     f16:	ff 92       	push	r15
     f18:	0f 93       	push	r16
     f1a:	1f 93       	push	r17
     f1c:	cf 93       	push	r28
     f1e:	df 93       	push	r29
     f20:	7c 01       	movw	r14, r24
     f22:	d6 2f       	mov	r29, r22
	uint8_t a;
	uint8_t chip;
	for (a=0;a<strlen(str);a++){		
     f24:	c0 e0       	ldi	r28, 0x00	; 0
		if (a==60){
			if (page+3>3) page = 0;
			command_write(CMD_PAGE+page+3,3);
			command_write(CMD_COLUMN+1,3);
		}
		if ((a>=10 && a<=19)||(a>=30 && a<=39)||(a>=50 && a<=59)||(a>=70 && a<=79))chip=2;
     f26:	68 94       	set
     f28:	dd 24       	eor	r13, r13
     f2a:	d1 f8       	bld	r13, 1
		else chip=1;
     f2c:	bb 24       	eor	r11, r11
     f2e:	b3 94       	inc	r11
			if (page+2>3) page = 0;
			command_write(CMD_PAGE+page+2,3);
			command_write(CMD_COLUMN+1,3);
		}
		if (a==60){
			if (page+3>3) page = 0;
     f30:	c1 2c       	mov	r12, r1
	}
}
void mg12232_string_write(char str[], uint8_t page){
	uint8_t a;
	uint8_t chip;
	for (a=0;a<strlen(str);a++){		
     f32:	65 c0       	rjmp	.+202    	; 0xffe <mg12232_string_write+0xf0>
		if (a==0){
     f34:	c1 11       	cpse	r28, r1
     f36:	0d c0       	rjmp	.+26     	; 0xf52 <mg12232_string_write+0x44>
			if (page>3) page = 0;
     f38:	d4 30       	cpi	r29, 0x04	; 4
     f3a:	08 f0       	brcs	.+2      	; 0xf3e <mg12232_string_write+0x30>
     f3c:	dc 2d       	mov	r29, r12
			command_write(CMD_PAGE+page,3);
     f3e:	63 e0       	ldi	r22, 0x03	; 3
     f40:	88 eb       	ldi	r24, 0xB8	; 184
     f42:	8d 0f       	add	r24, r29
     f44:	0e 94 a6 05 	call	0xb4c	; 0xb4c <command_write>
			command_write(CMD_COLUMN+1,3);
     f48:	63 e0       	ldi	r22, 0x03	; 3
     f4a:	84 e1       	ldi	r24, 0x14	; 20
     f4c:	0e 94 a6 05 	call	0xb4c	; 0xb4c <command_write>
     f50:	24 c0       	rjmp	.+72     	; 0xf9a <mg12232_string_write+0x8c>
		}
		if (a==20){
     f52:	c4 31       	cpi	r28, 0x14	; 20
     f54:	81 f4       	brne	.+32     	; 0xf76 <mg12232_string_write+0x68>
			if (page+1>3) page = 0;
     f56:	8d 2f       	mov	r24, r29
     f58:	90 e0       	ldi	r25, 0x00	; 0
     f5a:	01 96       	adiw	r24, 0x01	; 1
     f5c:	04 97       	sbiw	r24, 0x04	; 4
     f5e:	0c f0       	brlt	.+2      	; 0xf62 <mg12232_string_write+0x54>
     f60:	dc 2d       	mov	r29, r12
			command_write(CMD_PAGE+page+1,3);
     f62:	63 e0       	ldi	r22, 0x03	; 3
     f64:	89 eb       	ldi	r24, 0xB9	; 185
     f66:	8d 0f       	add	r24, r29
     f68:	0e 94 a6 05 	call	0xb4c	; 0xb4c <command_write>
			command_write(CMD_COLUMN+1,3);
     f6c:	63 e0       	ldi	r22, 0x03	; 3
     f6e:	84 e1       	ldi	r24, 0x14	; 20
     f70:	0e 94 a6 05 	call	0xb4c	; 0xb4c <command_write>
     f74:	24 c0       	rjmp	.+72     	; 0xfbe <mg12232_string_write+0xb0>
		}
		if (a==40){
     f76:	c8 32       	cpi	r28, 0x28	; 40
     f78:	81 f4       	brne	.+32     	; 0xf9a <mg12232_string_write+0x8c>
			if (page+2>3) page = 0;
     f7a:	8d 2f       	mov	r24, r29
     f7c:	90 e0       	ldi	r25, 0x00	; 0
     f7e:	02 96       	adiw	r24, 0x02	; 2
     f80:	04 97       	sbiw	r24, 0x04	; 4
     f82:	0c f0       	brlt	.+2      	; 0xf86 <mg12232_string_write+0x78>
     f84:	dc 2d       	mov	r29, r12
			command_write(CMD_PAGE+page+2,3);
     f86:	63 e0       	ldi	r22, 0x03	; 3
     f88:	8a eb       	ldi	r24, 0xBA	; 186
     f8a:	8d 0f       	add	r24, r29
     f8c:	0e 94 a6 05 	call	0xb4c	; 0xb4c <command_write>
			command_write(CMD_COLUMN+1,3);
     f90:	63 e0       	ldi	r22, 0x03	; 3
     f92:	84 e1       	ldi	r24, 0x14	; 20
     f94:	0e 94 a6 05 	call	0xb4c	; 0xb4c <command_write>
     f98:	16 c0       	rjmp	.+44     	; 0xfc6 <mg12232_string_write+0xb8>
		}
		if (a==60){
     f9a:	cc 33       	cpi	r28, 0x3C	; 60
     f9c:	81 f4       	brne	.+32     	; 0xfbe <mg12232_string_write+0xb0>
			if (page+3>3) page = 0;
     f9e:	8d 2f       	mov	r24, r29
     fa0:	90 e0       	ldi	r25, 0x00	; 0
     fa2:	03 96       	adiw	r24, 0x03	; 3
     fa4:	04 97       	sbiw	r24, 0x04	; 4
     fa6:	0c f0       	brlt	.+2      	; 0xfaa <mg12232_string_write+0x9c>
     fa8:	dc 2d       	mov	r29, r12
			command_write(CMD_PAGE+page+3,3);
     faa:	63 e0       	ldi	r22, 0x03	; 3
     fac:	8b eb       	ldi	r24, 0xBB	; 187
     fae:	8d 0f       	add	r24, r29
     fb0:	0e 94 a6 05 	call	0xb4c	; 0xb4c <command_write>
			command_write(CMD_COLUMN+1,3);
     fb4:	63 e0       	ldi	r22, 0x03	; 3
     fb6:	84 e1       	ldi	r24, 0x14	; 20
     fb8:	0e 94 a6 05 	call	0xb4c	; 0xb4c <command_write>
     fbc:	08 c0       	rjmp	.+16     	; 0xfce <mg12232_string_write+0xc0>
		}
		if ((a>=10 && a<=19)||(a>=30 && a<=39)||(a>=50 && a<=59)||(a>=70 && a<=79))chip=2;
     fbe:	86 ef       	ldi	r24, 0xF6	; 246
     fc0:	8c 0f       	add	r24, r28
     fc2:	8a 30       	cpi	r24, 0x0A	; 10
     fc4:	70 f0       	brcs	.+28     	; 0xfe2 <mg12232_string_write+0xd4>
     fc6:	82 ee       	ldi	r24, 0xE2	; 226
     fc8:	8c 0f       	add	r24, r28
     fca:	8a 30       	cpi	r24, 0x0A	; 10
     fcc:	60 f0       	brcs	.+24     	; 0xfe6 <mg12232_string_write+0xd8>
     fce:	8e ec       	ldi	r24, 0xCE	; 206
     fd0:	8c 0f       	add	r24, r28
     fd2:	8a 30       	cpi	r24, 0x0A	; 10
     fd4:	50 f0       	brcs	.+20     	; 0xfea <mg12232_string_write+0xdc>
     fd6:	8a eb       	ldi	r24, 0xBA	; 186
     fd8:	8c 0f       	add	r24, r28
     fda:	8a 30       	cpi	r24, 0x0A	; 10
     fdc:	40 f0       	brcs	.+16     	; 0xfee <mg12232_string_write+0xe0>
		else chip=1;
     fde:	6b 2d       	mov	r22, r11
     fe0:	07 c0       	rjmp	.+14     	; 0xff0 <mg12232_string_write+0xe2>
		if (a==60){
			if (page+3>3) page = 0;
			command_write(CMD_PAGE+page+3,3);
			command_write(CMD_COLUMN+1,3);
		}
		if ((a>=10 && a<=19)||(a>=30 && a<=39)||(a>=50 && a<=59)||(a>=70 && a<=79))chip=2;
     fe2:	6d 2d       	mov	r22, r13
     fe4:	05 c0       	rjmp	.+10     	; 0xff0 <mg12232_string_write+0xe2>
     fe6:	6d 2d       	mov	r22, r13
     fe8:	03 c0       	rjmp	.+6      	; 0xff0 <mg12232_string_write+0xe2>
     fea:	6d 2d       	mov	r22, r13
     fec:	01 c0       	rjmp	.+2      	; 0xff0 <mg12232_string_write+0xe2>
     fee:	6d 2d       	mov	r22, r13
		else chip=1;
		number_write(str[a],chip);
     ff0:	f7 01       	movw	r30, r14
     ff2:	e0 0f       	add	r30, r16
     ff4:	f1 1f       	adc	r31, r17
     ff6:	80 81       	ld	r24, Z
     ff8:	0e 94 2d 06 	call	0xc5a	; 0xc5a <number_write>
	}
}
void mg12232_string_write(char str[], uint8_t page){
	uint8_t a;
	uint8_t chip;
	for (a=0;a<strlen(str);a++){		
     ffc:	cf 5f       	subi	r28, 0xFF	; 255
     ffe:	0c 2f       	mov	r16, r28
    1000:	10 e0       	ldi	r17, 0x00	; 0
    1002:	f7 01       	movw	r30, r14
    1004:	01 90       	ld	r0, Z+
    1006:	00 20       	and	r0, r0
    1008:	e9 f7       	brne	.-6      	; 0x1004 <mg12232_string_write+0xf6>
    100a:	31 97       	sbiw	r30, 0x01	; 1
    100c:	ee 19       	sub	r30, r14
    100e:	ff 09       	sbc	r31, r15
    1010:	0e 17       	cp	r16, r30
    1012:	1f 07       	cpc	r17, r31
    1014:	08 f4       	brcc	.+2      	; 0x1018 <mg12232_string_write+0x10a>
    1016:	8e cf       	rjmp	.-228    	; 0xf34 <mg12232_string_write+0x26>
		}
		if ((a>=10 && a<=19)||(a>=30 && a<=39)||(a>=50 && a<=59)||(a>=70 && a<=79))chip=2;
		else chip=1;
		number_write(str[a],chip);
	}
}
    1018:	df 91       	pop	r29
    101a:	cf 91       	pop	r28
    101c:	1f 91       	pop	r17
    101e:	0f 91       	pop	r16
    1020:	ff 90       	pop	r15
    1022:	ef 90       	pop	r14
    1024:	df 90       	pop	r13
    1026:	cf 90       	pop	r12
    1028:	bf 90       	pop	r11
    102a:	08 95       	ret

0000102c <__vector_14>:
*	в txbyte данные для передачи вместе со стартовым битом. После этого они немедленно начнут передаваться.
*	Формированием посылки занимается функция void uart_send(uint8_t tb).
*/

ISR(TIMER0_COMPA_vect)
{
    102c:	1f 92       	push	r1
    102e:	0f 92       	push	r0
    1030:	0f b6       	in	r0, 0x3f	; 63
    1032:	0f 92       	push	r0
    1034:	11 24       	eor	r1, r1
    1036:	2f 93       	push	r18
    1038:	3f 93       	push	r19
    103a:	8f 93       	push	r24
    103c:	9f 93       	push	r25
	TXPORT = (TXPORT & ~(1 << TXD)) | ((txbyte & 0x01) << TXD); // Выставляем в бит TXD младший бит txbyte
    103e:	95 b1       	in	r25, 0x05	; 5
    1040:	20 91 31 03 	lds	r18, 0x0331	; 0x800331 <txbyte>
    1044:	30 91 32 03 	lds	r19, 0x0332	; 0x800332 <txbyte+0x1>
    1048:	82 2f       	mov	r24, r18
    104a:	81 70       	andi	r24, 0x01	; 1
    104c:	88 0f       	add	r24, r24
    104e:	88 0f       	add	r24, r24
    1050:	88 0f       	add	r24, r24
    1052:	97 7f       	andi	r25, 0xF7	; 247
    1054:	89 2b       	or	r24, r25
    1056:	85 b9       	out	0x05, r24	; 5
	txbyte = (txbyte >> 0x01) + 0x8000;							// Двигаем txbyte вправо на 1 и пишем 1 в старший разряд (0x8000)
    1058:	80 91 31 03 	lds	r24, 0x0331	; 0x800331 <txbyte>
    105c:	90 91 32 03 	lds	r25, 0x0332	; 0x800332 <txbyte+0x1>
    1060:	96 95       	lsr	r25
    1062:	87 95       	ror	r24
    1064:	90 58       	subi	r25, 0x80	; 128
    1066:	90 93 32 03 	sts	0x0332, r25	; 0x800332 <txbyte+0x1>
    106a:	80 93 31 03 	sts	0x0331, r24	; 0x800331 <txbyte>
	if(txbitcount > 0)											// Если идет передача (счетик бит больше нуля),
    106e:	80 91 2d 03 	lds	r24, 0x032D	; 0x80032d <txbitcount>
    1072:	88 23       	and	r24, r24
    1074:	29 f0       	breq	.+10     	; 0x1080 <__vector_14+0x54>
	{
		txbitcount--;											// то уменьшаем его на единицу.
    1076:	80 91 2d 03 	lds	r24, 0x032D	; 0x80032d <txbitcount>
    107a:	81 50       	subi	r24, 0x01	; 1
    107c:	80 93 2d 03 	sts	0x032D, r24	; 0x80032d <txbitcount>
	}
}
    1080:	9f 91       	pop	r25
    1082:	8f 91       	pop	r24
    1084:	3f 91       	pop	r19
    1086:	2f 91       	pop	r18
    1088:	0f 90       	pop	r0
    108a:	0f be       	out	0x3f, r0	; 63
    108c:	0f 90       	pop	r0
    108e:	1f 90       	pop	r1
    1090:	18 95       	reti

00001092 <__vector_15>:
*	переменной приема rxbyte, затем мы уменьшаем на единицу счетчик принятых бит и, если он стал нулем, заканчиваем
*	прием. Иначе сдвигаем вправо переменную rxbyte, чтобы подготовить ее к приему следующего бита.
*/

ISR(TIMER0_COMPB_vect)
{
    1092:	1f 92       	push	r1
    1094:	0f 92       	push	r0
    1096:	0f b6       	in	r0, 0x3f	; 63
    1098:	0f 92       	push	r0
    109a:	11 24       	eor	r1, r1
    109c:	8f 93       	push	r24
    109e:	ef 93       	push	r30
    10a0:	ff 93       	push	r31
	if(RXPORT & (1 << RXD))			// Проверяем в каком состоянии вход RXD
    10a2:	1c 9b       	sbis	0x03, 4	; 3
    10a4:	05 c0       	rjmp	.+10     	; 0x10b0 <__vector_15+0x1e>
	rxbyte |= 0x80;				// Если в 1, то пишем 1 в старший разряд rxbyte
    10a6:	80 91 30 03 	lds	r24, 0x0330	; 0x800330 <rxbyte>
    10aa:	80 68       	ori	r24, 0x80	; 128
    10ac:	80 93 30 03 	sts	0x0330, r24	; 0x800330 <rxbyte>
	
	if(--rxbitcount == 0)			// Уменьшаем на 1 счетчик бит и проверяем не стал ли он нулем
    10b0:	80 91 2c 03 	lds	r24, 0x032C	; 0x80032c <rxbitcount>
    10b4:	81 50       	subi	r24, 0x01	; 1
    10b6:	80 93 2c 03 	sts	0x032C, r24	; 0x80032c <rxbitcount>
    10ba:	81 11       	cpse	r24, r1
    10bc:	09 c0       	rjmp	.+18     	; 0x10d0 <__vector_15+0x3e>
	{
		TIMSK0 &= ~(1 << OCIE0B);	// Если да, запрещаем прерывание по сравнению OCR0B
    10be:	ee e6       	ldi	r30, 0x6E	; 110
    10c0:	f0 e0       	ldi	r31, 0x00	; 0
    10c2:	80 81       	ld	r24, Z
    10c4:	8b 7f       	andi	r24, 0xFB	; 251
    10c6:	80 83       	st	Z, r24
		TIFR0 |= (1 << OCF0B);		// Очищаем флаг прерывания (важно!)
    10c8:	aa 9a       	sbi	0x15, 2	; 21
		EIFR |= (1 << INTF0);		// Очищаем флаг прерывания по INT0
    10ca:	e0 9a       	sbi	0x1c, 0	; 28
		EIMSK |= (1 << INT0);		// Разрешаем прерывание INT0
    10cc:	e8 9a       	sbi	0x1d, 0	; 29
    10ce:	05 c0       	rjmp	.+10     	; 0x10da <__vector_15+0x48>
	}
	else
	{
		rxbyte >>= 0x01;			// Иначе сдвигаем вправо на 1 rxbyte
    10d0:	80 91 30 03 	lds	r24, 0x0330	; 0x800330 <rxbyte>
    10d4:	86 95       	lsr	r24
    10d6:	80 93 30 03 	sts	0x0330, r24	; 0x800330 <rxbyte>
	}
}
    10da:	ff 91       	pop	r31
    10dc:	ef 91       	pop	r30
    10de:	8f 91       	pop	r24
    10e0:	0f 90       	pop	r0
    10e2:	0f be       	out	0x3f, r0	; 63
    10e4:	0f 90       	pop	r0
    10e6:	1f 90       	pop	r1
    10e8:	18 95       	reti

000010ea <__vector_1>:
*	бита (по времени). После чего прерывание ISR(TIM0_COMPB_vect) разрешается, а прерывание INT0
*	запрещается.
*/

ISR(INT0_vect)
{
    10ea:	1f 92       	push	r1
    10ec:	0f 92       	push	r0
    10ee:	0f b6       	in	r0, 0x3f	; 63
    10f0:	0f 92       	push	r0
    10f2:	11 24       	eor	r1, r1
    10f4:	8f 93       	push	r24
    10f6:	ef 93       	push	r30
    10f8:	ff 93       	push	r31
	rxbitcount = 0x09;						// 8 бит данных и 1 стартовый бит
    10fa:	89 e0       	ldi	r24, 0x09	; 9
    10fc:	80 93 2c 03 	sts	0x032C, r24	; 0x80032c <rxbitcount>
	rxbyte = 0x00;							// Обнуляем содержимое rxbyte
    1100:	10 92 30 03 	sts	0x0330, r1	; 0x800330 <rxbyte>
	if(TCNT0 < (BAUD_DIV / 2))				// Если таймер не досчитал до середины текущего периода
    1104:	86 b5       	in	r24, 0x26	; 38
    1106:	88 36       	cpi	r24, 0x68	; 104
    1108:	20 f4       	brcc	.+8      	; 0x1112 <__vector_1+0x28>
	{
		OCR0B = TCNT0 + (BAUD_DIV / 2);	// То прерывание произойдет в текущем периоде спустя пол периода
    110a:	86 b5       	in	r24, 0x26	; 38
    110c:	88 59       	subi	r24, 0x98	; 152
    110e:	88 bd       	out	0x28, r24	; 40
    1110:	03 c0       	rjmp	.+6      	; 0x1118 <__vector_1+0x2e>
	}
	else
	{
		OCR0B = TCNT0 - (BAUD_DIV / 2);	// Иначе прерывание произойдет в уже следующем периоде таймера
    1112:	86 b5       	in	r24, 0x26	; 38
    1114:	88 56       	subi	r24, 0x68	; 104
    1116:	88 bd       	out	0x28, r24	; 40
	}
	EIMSK &= ~(1 << INT0);					// Запрещаем прерывание по INT0
    1118:	e8 98       	cbi	0x1d, 0	; 29
	TIFR0 |= (1 << OCF0A) | (1 << OCF0B);	// Очищаем флаг прерывания INT0
    111a:	85 b3       	in	r24, 0x15	; 21
    111c:	86 60       	ori	r24, 0x06	; 6
    111e:	85 bb       	out	0x15, r24	; 21
	TIMSK0 |= (1 << OCIE0B);				// Разрешаем прерывание по OCR0B
    1120:	ee e6       	ldi	r30, 0x6E	; 110
    1122:	f0 e0       	ldi	r31, 0x00	; 0
    1124:	80 81       	ld	r24, Z
    1126:	84 60       	ori	r24, 0x04	; 4
    1128:	80 83       	st	Z, r24
}
    112a:	ff 91       	pop	r31
    112c:	ef 91       	pop	r30
    112e:	8f 91       	pop	r24
    1130:	0f 90       	pop	r0
    1132:	0f be       	out	0x3f, r0	; 63
    1134:	0f 90       	pop	r0
    1136:	1f 90       	pop	r1
    1138:	18 95       	reti

0000113a <usartsoft_transmit>:
*	влево, создавая таким образом стартовый бит в младшем разряде. Задает счетчик бит = 10.
*/

void usartsoft_transmit(uint8_t tb)
{
	while(txbitcount);				// Ждем пока закончится передача предыдущего байта
    113a:	90 91 2d 03 	lds	r25, 0x032D	; 0x80032d <txbitcount>
    113e:	91 11       	cpse	r25, r1
    1140:	fc cf       	rjmp	.-8      	; 0x113a <usartsoft_transmit>
	txbyte = (tb + 0xFF00) << 0x01; // Пишем в младшие разряды txbyte данные для передачи и сдвигаем влево на 1
    1142:	90 e0       	ldi	r25, 0x00	; 0
    1144:	9a 95       	dec	r25
    1146:	88 0f       	add	r24, r24
    1148:	99 1f       	adc	r25, r25
    114a:	90 93 32 03 	sts	0x0332, r25	; 0x800332 <txbyte+0x1>
    114e:	80 93 31 03 	sts	0x0331, r24	; 0x800331 <txbyte>
	txbitcount = 0x0A;				// Задаем счетчик байт равным 10
    1152:	8a e0       	ldi	r24, 0x0A	; 10
    1154:	80 93 2d 03 	sts	0x032D, r24	; 0x80032d <txbitcount>
    1158:	08 95       	ret

0000115a <usartsoft_recieve>:
*	Если в момент вызова функции идет прием, функция будет ждать его завершения. Если функцию вызвать дважды,
*	то первый раз она возвратит принятый байт, второй раз (-1).
*/

int16_t usartsoft_recieve(uint8_t* rb)
{
    115a:	fc 01       	movw	r30, r24
	if(rxbitcount < 0x09)	// Если счетчик бит на прием меньше 9
    115c:	80 91 2c 03 	lds	r24, 0x032C	; 0x80032c <rxbitcount>
    1160:	89 30       	cpi	r24, 0x09	; 9
    1162:	68 f4       	brcc	.+26     	; 0x117e <usartsoft_recieve+0x24>
	{
		while(rxbitcount);	// Ждем пока завершится текущий прием
    1164:	90 91 2c 03 	lds	r25, 0x032C	; 0x80032c <rxbitcount>
    1168:	91 11       	cpse	r25, r1
    116a:	fc cf       	rjmp	.-8      	; 0x1164 <usartsoft_recieve+0xa>
		*rb = rxbyte;		// Пишем по адресу указателя принятый байт
    116c:	80 91 30 03 	lds	r24, 0x0330	; 0x800330 <rxbyte>
    1170:	80 83       	st	Z, r24
		rxbitcount = 0x09;	// Восстанавливаем значение счетчика бит
    1172:	89 e0       	ldi	r24, 0x09	; 9
    1174:	80 93 2c 03 	sts	0x032C, r24	; 0x80032c <rxbitcount>
		return (*rb);		// Возвращаемся
    1178:	80 81       	ld	r24, Z
    117a:	90 e0       	ldi	r25, 0x00	; 0
    117c:	08 95       	ret
	}
	else
	{
		return (-1);		// Иначе возвращаем -1 (принимать нечего)
    117e:	8f ef       	ldi	r24, 0xFF	; 255
    1180:	9f ef       	ldi	r25, 0xFF	; 255
	}
}
    1182:	08 95       	ret

00001184 <usartsoft_init>:
*	Инициализирует глобальные переменные и регистры микроконтроллера.
*/

void usartsoft_init()
{
	txbyte = 0xFFFF;		// Значение буфера на передачу - все единицы
    1184:	8f ef       	ldi	r24, 0xFF	; 255
    1186:	9f ef       	ldi	r25, 0xFF	; 255
    1188:	90 93 32 03 	sts	0x0332, r25	; 0x800332 <txbyte+0x1>
    118c:	80 93 31 03 	sts	0x0331, r24	; 0x800331 <txbyte>
	rxbyte = 0x00;			// Значение буфера на прием - все нули
    1190:	10 92 30 03 	sts	0x0330, r1	; 0x800330 <rxbyte>
	txbitcount = 0x00;		// Значение счетчика преедаваемых бит - ноль (ничего пока не передаем)
    1194:	10 92 2d 03 	sts	0x032D, r1	; 0x80032d <txbitcount>
	rxbitcount = 0x09;		// Значение счетчика бит на прием - 9 (ожидаем возможного приема)
    1198:	89 e0       	ldi	r24, 0x09	; 9
    119a:	80 93 2c 03 	sts	0x032C, r24	; 0x80032c <rxbitcount>
	
	TXDDR |= (1 << TXD);		// Задаем направление порта на передачу как выход
    119e:	23 9a       	sbi	0x04, 3	; 4
	RXDDR &= ~(1 << RXD);		// Задаем направление порта на прием как вход
    11a0:	24 98       	cbi	0x04, 4	; 4
	TXPORT |= (1 << TXD);		// Пишем единицу в выход TXD
    11a2:	2b 9a       	sbi	0x05, 3	; 5
	RXPORT |= (1 << RXD);		// Подтягиваем к единице вход RXD
    11a4:	1c 9a       	sbi	0x03, 4	; 3
	OCR0A = BAUD_DIV;			// Задаем значение регистра OCR0A в соответствии с бодрейтом
    11a6:	80 ed       	ldi	r24, 0xD0	; 208
    11a8:	87 bd       	out	0x27, r24	; 39
	TIMSK0 |= (1 << OCIE0A);	// Разрешаем прерывание TIM0_COMPA
    11aa:	ee e6       	ldi	r30, 0x6E	; 110
    11ac:	f0 e0       	ldi	r31, 0x00	; 0
    11ae:	80 81       	ld	r24, Z
    11b0:	82 60       	ori	r24, 0x02	; 2
    11b2:	80 83       	st	Z, r24
	TCCR0A |= (1 << WGM01);		// Режим таймера CTC (очистка TCNT0 по достижению OCR0A)
    11b4:	84 b5       	in	r24, 0x24	; 36
    11b6:	82 60       	ori	r24, 0x02	; 2
    11b8:	84 bd       	out	0x24, r24	; 36
	TCCR0B |= T_DIV;			// Задаем скорость счета таймера в соответствии с делителем
    11ba:	85 b5       	in	r24, 0x25	; 37
    11bc:	83 60       	ori	r24, 0x03	; 3
    11be:	85 bd       	out	0x25, r24	; 37
	MCUCR |= (1 << ISC01);		// Задаем прерывание INT0 по заднему фронту импульса
    11c0:	85 b7       	in	r24, 0x35	; 53
    11c2:	82 60       	ori	r24, 0x02	; 2
    11c4:	85 bf       	out	0x35, r24	; 53
	EIMSK |= (1 << INT0);		// Разрешаем прерывание INT0
    11c6:	e8 9a       	sbi	0x1d, 0	; 29
	sei();						// Разрешаем прерывания глобально
    11c8:	78 94       	sei
    11ca:	08 95       	ret

000011cc <__floatunsisf>:
    11cc:	e8 94       	clt
    11ce:	09 c0       	rjmp	.+18     	; 0x11e2 <__floatsisf+0x12>

000011d0 <__floatsisf>:
    11d0:	97 fb       	bst	r25, 7
    11d2:	3e f4       	brtc	.+14     	; 0x11e2 <__floatsisf+0x12>
    11d4:	90 95       	com	r25
    11d6:	80 95       	com	r24
    11d8:	70 95       	com	r23
    11da:	61 95       	neg	r22
    11dc:	7f 4f       	sbci	r23, 0xFF	; 255
    11de:	8f 4f       	sbci	r24, 0xFF	; 255
    11e0:	9f 4f       	sbci	r25, 0xFF	; 255
    11e2:	99 23       	and	r25, r25
    11e4:	a9 f0       	breq	.+42     	; 0x1210 <__floatsisf+0x40>
    11e6:	f9 2f       	mov	r31, r25
    11e8:	96 e9       	ldi	r25, 0x96	; 150
    11ea:	bb 27       	eor	r27, r27
    11ec:	93 95       	inc	r25
    11ee:	f6 95       	lsr	r31
    11f0:	87 95       	ror	r24
    11f2:	77 95       	ror	r23
    11f4:	67 95       	ror	r22
    11f6:	b7 95       	ror	r27
    11f8:	f1 11       	cpse	r31, r1
    11fa:	f8 cf       	rjmp	.-16     	; 0x11ec <__floatsisf+0x1c>
    11fc:	fa f4       	brpl	.+62     	; 0x123c <__floatsisf+0x6c>
    11fe:	bb 0f       	add	r27, r27
    1200:	11 f4       	brne	.+4      	; 0x1206 <__floatsisf+0x36>
    1202:	60 ff       	sbrs	r22, 0
    1204:	1b c0       	rjmp	.+54     	; 0x123c <__floatsisf+0x6c>
    1206:	6f 5f       	subi	r22, 0xFF	; 255
    1208:	7f 4f       	sbci	r23, 0xFF	; 255
    120a:	8f 4f       	sbci	r24, 0xFF	; 255
    120c:	9f 4f       	sbci	r25, 0xFF	; 255
    120e:	16 c0       	rjmp	.+44     	; 0x123c <__floatsisf+0x6c>
    1210:	88 23       	and	r24, r24
    1212:	11 f0       	breq	.+4      	; 0x1218 <__floatsisf+0x48>
    1214:	96 e9       	ldi	r25, 0x96	; 150
    1216:	11 c0       	rjmp	.+34     	; 0x123a <__floatsisf+0x6a>
    1218:	77 23       	and	r23, r23
    121a:	21 f0       	breq	.+8      	; 0x1224 <__floatsisf+0x54>
    121c:	9e e8       	ldi	r25, 0x8E	; 142
    121e:	87 2f       	mov	r24, r23
    1220:	76 2f       	mov	r23, r22
    1222:	05 c0       	rjmp	.+10     	; 0x122e <__floatsisf+0x5e>
    1224:	66 23       	and	r22, r22
    1226:	71 f0       	breq	.+28     	; 0x1244 <__floatsisf+0x74>
    1228:	96 e8       	ldi	r25, 0x86	; 134
    122a:	86 2f       	mov	r24, r22
    122c:	70 e0       	ldi	r23, 0x00	; 0
    122e:	60 e0       	ldi	r22, 0x00	; 0
    1230:	2a f0       	brmi	.+10     	; 0x123c <__floatsisf+0x6c>
    1232:	9a 95       	dec	r25
    1234:	66 0f       	add	r22, r22
    1236:	77 1f       	adc	r23, r23
    1238:	88 1f       	adc	r24, r24
    123a:	da f7       	brpl	.-10     	; 0x1232 <__floatsisf+0x62>
    123c:	88 0f       	add	r24, r24
    123e:	96 95       	lsr	r25
    1240:	87 95       	ror	r24
    1242:	97 f9       	bld	r25, 7
    1244:	08 95       	ret

00001246 <__fp_inf>:
    1246:	97 f9       	bld	r25, 7
    1248:	9f 67       	ori	r25, 0x7F	; 127
    124a:	80 e8       	ldi	r24, 0x80	; 128
    124c:	70 e0       	ldi	r23, 0x00	; 0
    124e:	60 e0       	ldi	r22, 0x00	; 0
    1250:	08 95       	ret

00001252 <__fp_nan>:
    1252:	9f ef       	ldi	r25, 0xFF	; 255
    1254:	80 ec       	ldi	r24, 0xC0	; 192
    1256:	08 95       	ret

00001258 <__fp_pscA>:
    1258:	00 24       	eor	r0, r0
    125a:	0a 94       	dec	r0
    125c:	16 16       	cp	r1, r22
    125e:	17 06       	cpc	r1, r23
    1260:	18 06       	cpc	r1, r24
    1262:	09 06       	cpc	r0, r25
    1264:	08 95       	ret

00001266 <__fp_pscB>:
    1266:	00 24       	eor	r0, r0
    1268:	0a 94       	dec	r0
    126a:	12 16       	cp	r1, r18
    126c:	13 06       	cpc	r1, r19
    126e:	14 06       	cpc	r1, r20
    1270:	05 06       	cpc	r0, r21
    1272:	08 95       	ret

00001274 <__fp_round>:
    1274:	09 2e       	mov	r0, r25
    1276:	03 94       	inc	r0
    1278:	00 0c       	add	r0, r0
    127a:	11 f4       	brne	.+4      	; 0x1280 <__fp_round+0xc>
    127c:	88 23       	and	r24, r24
    127e:	52 f0       	brmi	.+20     	; 0x1294 <__fp_round+0x20>
    1280:	bb 0f       	add	r27, r27
    1282:	40 f4       	brcc	.+16     	; 0x1294 <__fp_round+0x20>
    1284:	bf 2b       	or	r27, r31
    1286:	11 f4       	brne	.+4      	; 0x128c <__fp_round+0x18>
    1288:	60 ff       	sbrs	r22, 0
    128a:	04 c0       	rjmp	.+8      	; 0x1294 <__fp_round+0x20>
    128c:	6f 5f       	subi	r22, 0xFF	; 255
    128e:	7f 4f       	sbci	r23, 0xFF	; 255
    1290:	8f 4f       	sbci	r24, 0xFF	; 255
    1292:	9f 4f       	sbci	r25, 0xFF	; 255
    1294:	08 95       	ret

00001296 <__fp_split3>:
    1296:	57 fd       	sbrc	r21, 7
    1298:	90 58       	subi	r25, 0x80	; 128
    129a:	44 0f       	add	r20, r20
    129c:	55 1f       	adc	r21, r21
    129e:	59 f0       	breq	.+22     	; 0x12b6 <__fp_splitA+0x10>
    12a0:	5f 3f       	cpi	r21, 0xFF	; 255
    12a2:	71 f0       	breq	.+28     	; 0x12c0 <__fp_splitA+0x1a>
    12a4:	47 95       	ror	r20

000012a6 <__fp_splitA>:
    12a6:	88 0f       	add	r24, r24
    12a8:	97 fb       	bst	r25, 7
    12aa:	99 1f       	adc	r25, r25
    12ac:	61 f0       	breq	.+24     	; 0x12c6 <__fp_splitA+0x20>
    12ae:	9f 3f       	cpi	r25, 0xFF	; 255
    12b0:	79 f0       	breq	.+30     	; 0x12d0 <__fp_splitA+0x2a>
    12b2:	87 95       	ror	r24
    12b4:	08 95       	ret
    12b6:	12 16       	cp	r1, r18
    12b8:	13 06       	cpc	r1, r19
    12ba:	14 06       	cpc	r1, r20
    12bc:	55 1f       	adc	r21, r21
    12be:	f2 cf       	rjmp	.-28     	; 0x12a4 <__fp_split3+0xe>
    12c0:	46 95       	lsr	r20
    12c2:	f1 df       	rcall	.-30     	; 0x12a6 <__fp_splitA>
    12c4:	08 c0       	rjmp	.+16     	; 0x12d6 <__fp_splitA+0x30>
    12c6:	16 16       	cp	r1, r22
    12c8:	17 06       	cpc	r1, r23
    12ca:	18 06       	cpc	r1, r24
    12cc:	99 1f       	adc	r25, r25
    12ce:	f1 cf       	rjmp	.-30     	; 0x12b2 <__fp_splitA+0xc>
    12d0:	86 95       	lsr	r24
    12d2:	71 05       	cpc	r23, r1
    12d4:	61 05       	cpc	r22, r1
    12d6:	08 94       	sec
    12d8:	08 95       	ret

000012da <__fp_zero>:
    12da:	e8 94       	clt

000012dc <__fp_szero>:
    12dc:	bb 27       	eor	r27, r27
    12de:	66 27       	eor	r22, r22
    12e0:	77 27       	eor	r23, r23
    12e2:	cb 01       	movw	r24, r22
    12e4:	97 f9       	bld	r25, 7
    12e6:	08 95       	ret

000012e8 <__mulsf3>:
    12e8:	0e 94 87 09 	call	0x130e	; 0x130e <__mulsf3x>
    12ec:	0c 94 3a 09 	jmp	0x1274	; 0x1274 <__fp_round>
    12f0:	0e 94 2c 09 	call	0x1258	; 0x1258 <__fp_pscA>
    12f4:	38 f0       	brcs	.+14     	; 0x1304 <__mulsf3+0x1c>
    12f6:	0e 94 33 09 	call	0x1266	; 0x1266 <__fp_pscB>
    12fa:	20 f0       	brcs	.+8      	; 0x1304 <__mulsf3+0x1c>
    12fc:	95 23       	and	r25, r21
    12fe:	11 f0       	breq	.+4      	; 0x1304 <__mulsf3+0x1c>
    1300:	0c 94 23 09 	jmp	0x1246	; 0x1246 <__fp_inf>
    1304:	0c 94 29 09 	jmp	0x1252	; 0x1252 <__fp_nan>
    1308:	11 24       	eor	r1, r1
    130a:	0c 94 6e 09 	jmp	0x12dc	; 0x12dc <__fp_szero>

0000130e <__mulsf3x>:
    130e:	0e 94 4b 09 	call	0x1296	; 0x1296 <__fp_split3>
    1312:	70 f3       	brcs	.-36     	; 0x12f0 <__mulsf3+0x8>

00001314 <__mulsf3_pse>:
    1314:	95 9f       	mul	r25, r21
    1316:	c1 f3       	breq	.-16     	; 0x1308 <__mulsf3+0x20>
    1318:	95 0f       	add	r25, r21
    131a:	50 e0       	ldi	r21, 0x00	; 0
    131c:	55 1f       	adc	r21, r21
    131e:	62 9f       	mul	r22, r18
    1320:	f0 01       	movw	r30, r0
    1322:	72 9f       	mul	r23, r18
    1324:	bb 27       	eor	r27, r27
    1326:	f0 0d       	add	r31, r0
    1328:	b1 1d       	adc	r27, r1
    132a:	63 9f       	mul	r22, r19
    132c:	aa 27       	eor	r26, r26
    132e:	f0 0d       	add	r31, r0
    1330:	b1 1d       	adc	r27, r1
    1332:	aa 1f       	adc	r26, r26
    1334:	64 9f       	mul	r22, r20
    1336:	66 27       	eor	r22, r22
    1338:	b0 0d       	add	r27, r0
    133a:	a1 1d       	adc	r26, r1
    133c:	66 1f       	adc	r22, r22
    133e:	82 9f       	mul	r24, r18
    1340:	22 27       	eor	r18, r18
    1342:	b0 0d       	add	r27, r0
    1344:	a1 1d       	adc	r26, r1
    1346:	62 1f       	adc	r22, r18
    1348:	73 9f       	mul	r23, r19
    134a:	b0 0d       	add	r27, r0
    134c:	a1 1d       	adc	r26, r1
    134e:	62 1f       	adc	r22, r18
    1350:	83 9f       	mul	r24, r19
    1352:	a0 0d       	add	r26, r0
    1354:	61 1d       	adc	r22, r1
    1356:	22 1f       	adc	r18, r18
    1358:	74 9f       	mul	r23, r20
    135a:	33 27       	eor	r19, r19
    135c:	a0 0d       	add	r26, r0
    135e:	61 1d       	adc	r22, r1
    1360:	23 1f       	adc	r18, r19
    1362:	84 9f       	mul	r24, r20
    1364:	60 0d       	add	r22, r0
    1366:	21 1d       	adc	r18, r1
    1368:	82 2f       	mov	r24, r18
    136a:	76 2f       	mov	r23, r22
    136c:	6a 2f       	mov	r22, r26
    136e:	11 24       	eor	r1, r1
    1370:	9f 57       	subi	r25, 0x7F	; 127
    1372:	50 40       	sbci	r21, 0x00	; 0
    1374:	9a f0       	brmi	.+38     	; 0x139c <__mulsf3_pse+0x88>
    1376:	f1 f0       	breq	.+60     	; 0x13b4 <__mulsf3_pse+0xa0>
    1378:	88 23       	and	r24, r24
    137a:	4a f0       	brmi	.+18     	; 0x138e <__mulsf3_pse+0x7a>
    137c:	ee 0f       	add	r30, r30
    137e:	ff 1f       	adc	r31, r31
    1380:	bb 1f       	adc	r27, r27
    1382:	66 1f       	adc	r22, r22
    1384:	77 1f       	adc	r23, r23
    1386:	88 1f       	adc	r24, r24
    1388:	91 50       	subi	r25, 0x01	; 1
    138a:	50 40       	sbci	r21, 0x00	; 0
    138c:	a9 f7       	brne	.-22     	; 0x1378 <__mulsf3_pse+0x64>
    138e:	9e 3f       	cpi	r25, 0xFE	; 254
    1390:	51 05       	cpc	r21, r1
    1392:	80 f0       	brcs	.+32     	; 0x13b4 <__mulsf3_pse+0xa0>
    1394:	0c 94 23 09 	jmp	0x1246	; 0x1246 <__fp_inf>
    1398:	0c 94 6e 09 	jmp	0x12dc	; 0x12dc <__fp_szero>
    139c:	5f 3f       	cpi	r21, 0xFF	; 255
    139e:	e4 f3       	brlt	.-8      	; 0x1398 <__mulsf3_pse+0x84>
    13a0:	98 3e       	cpi	r25, 0xE8	; 232
    13a2:	d4 f3       	brlt	.-12     	; 0x1398 <__mulsf3_pse+0x84>
    13a4:	86 95       	lsr	r24
    13a6:	77 95       	ror	r23
    13a8:	67 95       	ror	r22
    13aa:	b7 95       	ror	r27
    13ac:	f7 95       	ror	r31
    13ae:	e7 95       	ror	r30
    13b0:	9f 5f       	subi	r25, 0xFF	; 255
    13b2:	c1 f7       	brne	.-16     	; 0x13a4 <__mulsf3_pse+0x90>
    13b4:	fe 2b       	or	r31, r30
    13b6:	88 0f       	add	r24, r24
    13b8:	91 1d       	adc	r25, r1
    13ba:	96 95       	lsr	r25
    13bc:	87 95       	ror	r24
    13be:	97 f9       	bld	r25, 7
    13c0:	08 95       	ret

000013c2 <vfprintf>:
    13c2:	a0 e1       	ldi	r26, 0x10	; 16
    13c4:	b0 e0       	ldi	r27, 0x00	; 0
    13c6:	e7 ee       	ldi	r30, 0xE7	; 231
    13c8:	f9 e0       	ldi	r31, 0x09	; 9
    13ca:	0c 94 64 0d 	jmp	0x1ac8	; 0x1ac8 <__prologue_saves__>
    13ce:	7c 01       	movw	r14, r24
    13d0:	1b 01       	movw	r2, r22
    13d2:	6a 01       	movw	r12, r20
    13d4:	fc 01       	movw	r30, r24
    13d6:	17 82       	std	Z+7, r1	; 0x07
    13d8:	16 82       	std	Z+6, r1	; 0x06
    13da:	83 81       	ldd	r24, Z+3	; 0x03
    13dc:	81 ff       	sbrs	r24, 1
    13de:	44 c3       	rjmp	.+1672   	; 0x1a68 <vfprintf+0x6a6>
    13e0:	9e 01       	movw	r18, r28
    13e2:	2f 5f       	subi	r18, 0xFF	; 255
    13e4:	3f 4f       	sbci	r19, 0xFF	; 255
    13e6:	39 01       	movw	r6, r18
    13e8:	f7 01       	movw	r30, r14
    13ea:	93 81       	ldd	r25, Z+3	; 0x03
    13ec:	f1 01       	movw	r30, r2
    13ee:	93 fd       	sbrc	r25, 3
    13f0:	85 91       	lpm	r24, Z+
    13f2:	93 ff       	sbrs	r25, 3
    13f4:	81 91       	ld	r24, Z+
    13f6:	1f 01       	movw	r2, r30
    13f8:	88 23       	and	r24, r24
    13fa:	09 f4       	brne	.+2      	; 0x13fe <vfprintf+0x3c>
    13fc:	31 c3       	rjmp	.+1634   	; 0x1a60 <vfprintf+0x69e>
    13fe:	85 32       	cpi	r24, 0x25	; 37
    1400:	39 f4       	brne	.+14     	; 0x1410 <vfprintf+0x4e>
    1402:	93 fd       	sbrc	r25, 3
    1404:	85 91       	lpm	r24, Z+
    1406:	93 ff       	sbrs	r25, 3
    1408:	81 91       	ld	r24, Z+
    140a:	1f 01       	movw	r2, r30
    140c:	85 32       	cpi	r24, 0x25	; 37
    140e:	39 f4       	brne	.+14     	; 0x141e <vfprintf+0x5c>
    1410:	b7 01       	movw	r22, r14
    1412:	90 e0       	ldi	r25, 0x00	; 0
    1414:	0e 94 89 0e 	call	0x1d12	; 0x1d12 <fputc>
    1418:	56 01       	movw	r10, r12
    141a:	65 01       	movw	r12, r10
    141c:	e5 cf       	rjmp	.-54     	; 0x13e8 <vfprintf+0x26>
    141e:	10 e0       	ldi	r17, 0x00	; 0
    1420:	51 2c       	mov	r5, r1
    1422:	91 2c       	mov	r9, r1
    1424:	ff e1       	ldi	r31, 0x1F	; 31
    1426:	f9 15       	cp	r31, r9
    1428:	d8 f0       	brcs	.+54     	; 0x1460 <vfprintf+0x9e>
    142a:	8b 32       	cpi	r24, 0x2B	; 43
    142c:	79 f0       	breq	.+30     	; 0x144c <vfprintf+0x8a>
    142e:	38 f4       	brcc	.+14     	; 0x143e <vfprintf+0x7c>
    1430:	80 32       	cpi	r24, 0x20	; 32
    1432:	79 f0       	breq	.+30     	; 0x1452 <vfprintf+0x90>
    1434:	83 32       	cpi	r24, 0x23	; 35
    1436:	a1 f4       	brne	.+40     	; 0x1460 <vfprintf+0x9e>
    1438:	f9 2d       	mov	r31, r9
    143a:	f0 61       	ori	r31, 0x10	; 16
    143c:	2e c0       	rjmp	.+92     	; 0x149a <vfprintf+0xd8>
    143e:	8d 32       	cpi	r24, 0x2D	; 45
    1440:	61 f0       	breq	.+24     	; 0x145a <vfprintf+0x98>
    1442:	80 33       	cpi	r24, 0x30	; 48
    1444:	69 f4       	brne	.+26     	; 0x1460 <vfprintf+0x9e>
    1446:	29 2d       	mov	r18, r9
    1448:	21 60       	ori	r18, 0x01	; 1
    144a:	2d c0       	rjmp	.+90     	; 0x14a6 <vfprintf+0xe4>
    144c:	39 2d       	mov	r19, r9
    144e:	32 60       	ori	r19, 0x02	; 2
    1450:	93 2e       	mov	r9, r19
    1452:	89 2d       	mov	r24, r9
    1454:	84 60       	ori	r24, 0x04	; 4
    1456:	98 2e       	mov	r9, r24
    1458:	2a c0       	rjmp	.+84     	; 0x14ae <vfprintf+0xec>
    145a:	e9 2d       	mov	r30, r9
    145c:	e8 60       	ori	r30, 0x08	; 8
    145e:	15 c0       	rjmp	.+42     	; 0x148a <vfprintf+0xc8>
    1460:	97 fc       	sbrc	r9, 7
    1462:	2d c0       	rjmp	.+90     	; 0x14be <vfprintf+0xfc>
    1464:	20 ed       	ldi	r18, 0xD0	; 208
    1466:	28 0f       	add	r18, r24
    1468:	2a 30       	cpi	r18, 0x0A	; 10
    146a:	88 f4       	brcc	.+34     	; 0x148e <vfprintf+0xcc>
    146c:	96 fe       	sbrs	r9, 6
    146e:	06 c0       	rjmp	.+12     	; 0x147c <vfprintf+0xba>
    1470:	3a e0       	ldi	r19, 0x0A	; 10
    1472:	13 9f       	mul	r17, r19
    1474:	20 0d       	add	r18, r0
    1476:	11 24       	eor	r1, r1
    1478:	12 2f       	mov	r17, r18
    147a:	19 c0       	rjmp	.+50     	; 0x14ae <vfprintf+0xec>
    147c:	8a e0       	ldi	r24, 0x0A	; 10
    147e:	58 9e       	mul	r5, r24
    1480:	20 0d       	add	r18, r0
    1482:	11 24       	eor	r1, r1
    1484:	52 2e       	mov	r5, r18
    1486:	e9 2d       	mov	r30, r9
    1488:	e0 62       	ori	r30, 0x20	; 32
    148a:	9e 2e       	mov	r9, r30
    148c:	10 c0       	rjmp	.+32     	; 0x14ae <vfprintf+0xec>
    148e:	8e 32       	cpi	r24, 0x2E	; 46
    1490:	31 f4       	brne	.+12     	; 0x149e <vfprintf+0xdc>
    1492:	96 fc       	sbrc	r9, 6
    1494:	e5 c2       	rjmp	.+1482   	; 0x1a60 <vfprintf+0x69e>
    1496:	f9 2d       	mov	r31, r9
    1498:	f0 64       	ori	r31, 0x40	; 64
    149a:	9f 2e       	mov	r9, r31
    149c:	08 c0       	rjmp	.+16     	; 0x14ae <vfprintf+0xec>
    149e:	8c 36       	cpi	r24, 0x6C	; 108
    14a0:	21 f4       	brne	.+8      	; 0x14aa <vfprintf+0xe8>
    14a2:	29 2d       	mov	r18, r9
    14a4:	20 68       	ori	r18, 0x80	; 128
    14a6:	92 2e       	mov	r9, r18
    14a8:	02 c0       	rjmp	.+4      	; 0x14ae <vfprintf+0xec>
    14aa:	88 36       	cpi	r24, 0x68	; 104
    14ac:	41 f4       	brne	.+16     	; 0x14be <vfprintf+0xfc>
    14ae:	f1 01       	movw	r30, r2
    14b0:	93 fd       	sbrc	r25, 3
    14b2:	85 91       	lpm	r24, Z+
    14b4:	93 ff       	sbrs	r25, 3
    14b6:	81 91       	ld	r24, Z+
    14b8:	1f 01       	movw	r2, r30
    14ba:	81 11       	cpse	r24, r1
    14bc:	b3 cf       	rjmp	.-154    	; 0x1424 <vfprintf+0x62>
    14be:	9b eb       	ldi	r25, 0xBB	; 187
    14c0:	98 0f       	add	r25, r24
    14c2:	93 30       	cpi	r25, 0x03	; 3
    14c4:	20 f4       	brcc	.+8      	; 0x14ce <vfprintf+0x10c>
    14c6:	99 2d       	mov	r25, r9
    14c8:	90 61       	ori	r25, 0x10	; 16
    14ca:	80 5e       	subi	r24, 0xE0	; 224
    14cc:	07 c0       	rjmp	.+14     	; 0x14dc <vfprintf+0x11a>
    14ce:	9b e9       	ldi	r25, 0x9B	; 155
    14d0:	98 0f       	add	r25, r24
    14d2:	93 30       	cpi	r25, 0x03	; 3
    14d4:	08 f0       	brcs	.+2      	; 0x14d8 <vfprintf+0x116>
    14d6:	66 c1       	rjmp	.+716    	; 0x17a4 <vfprintf+0x3e2>
    14d8:	99 2d       	mov	r25, r9
    14da:	9f 7e       	andi	r25, 0xEF	; 239
    14dc:	96 ff       	sbrs	r25, 6
    14de:	16 e0       	ldi	r17, 0x06	; 6
    14e0:	9f 73       	andi	r25, 0x3F	; 63
    14e2:	99 2e       	mov	r9, r25
    14e4:	85 36       	cpi	r24, 0x65	; 101
    14e6:	19 f4       	brne	.+6      	; 0x14ee <vfprintf+0x12c>
    14e8:	90 64       	ori	r25, 0x40	; 64
    14ea:	99 2e       	mov	r9, r25
    14ec:	08 c0       	rjmp	.+16     	; 0x14fe <vfprintf+0x13c>
    14ee:	86 36       	cpi	r24, 0x66	; 102
    14f0:	21 f4       	brne	.+8      	; 0x14fa <vfprintf+0x138>
    14f2:	39 2f       	mov	r19, r25
    14f4:	30 68       	ori	r19, 0x80	; 128
    14f6:	93 2e       	mov	r9, r19
    14f8:	02 c0       	rjmp	.+4      	; 0x14fe <vfprintf+0x13c>
    14fa:	11 11       	cpse	r17, r1
    14fc:	11 50       	subi	r17, 0x01	; 1
    14fe:	97 fe       	sbrs	r9, 7
    1500:	07 c0       	rjmp	.+14     	; 0x1510 <vfprintf+0x14e>
    1502:	1c 33       	cpi	r17, 0x3C	; 60
    1504:	50 f4       	brcc	.+20     	; 0x151a <vfprintf+0x158>
    1506:	44 24       	eor	r4, r4
    1508:	43 94       	inc	r4
    150a:	41 0e       	add	r4, r17
    150c:	27 e0       	ldi	r18, 0x07	; 7
    150e:	0b c0       	rjmp	.+22     	; 0x1526 <vfprintf+0x164>
    1510:	18 30       	cpi	r17, 0x08	; 8
    1512:	38 f0       	brcs	.+14     	; 0x1522 <vfprintf+0x160>
    1514:	27 e0       	ldi	r18, 0x07	; 7
    1516:	17 e0       	ldi	r17, 0x07	; 7
    1518:	05 c0       	rjmp	.+10     	; 0x1524 <vfprintf+0x162>
    151a:	27 e0       	ldi	r18, 0x07	; 7
    151c:	9c e3       	ldi	r25, 0x3C	; 60
    151e:	49 2e       	mov	r4, r25
    1520:	02 c0       	rjmp	.+4      	; 0x1526 <vfprintf+0x164>
    1522:	21 2f       	mov	r18, r17
    1524:	41 2c       	mov	r4, r1
    1526:	56 01       	movw	r10, r12
    1528:	84 e0       	ldi	r24, 0x04	; 4
    152a:	a8 0e       	add	r10, r24
    152c:	b1 1c       	adc	r11, r1
    152e:	f6 01       	movw	r30, r12
    1530:	60 81       	ld	r22, Z
    1532:	71 81       	ldd	r23, Z+1	; 0x01
    1534:	82 81       	ldd	r24, Z+2	; 0x02
    1536:	93 81       	ldd	r25, Z+3	; 0x03
    1538:	04 2d       	mov	r16, r4
    153a:	a3 01       	movw	r20, r6
    153c:	0e 94 9b 0d 	call	0x1b36	; 0x1b36 <__ftoa_engine>
    1540:	6c 01       	movw	r12, r24
    1542:	f9 81       	ldd	r31, Y+1	; 0x01
    1544:	fc 87       	std	Y+12, r31	; 0x0c
    1546:	f0 ff       	sbrs	r31, 0
    1548:	02 c0       	rjmp	.+4      	; 0x154e <vfprintf+0x18c>
    154a:	f3 ff       	sbrs	r31, 3
    154c:	06 c0       	rjmp	.+12     	; 0x155a <vfprintf+0x198>
    154e:	91 fc       	sbrc	r9, 1
    1550:	06 c0       	rjmp	.+12     	; 0x155e <vfprintf+0x19c>
    1552:	92 fe       	sbrs	r9, 2
    1554:	06 c0       	rjmp	.+12     	; 0x1562 <vfprintf+0x1a0>
    1556:	00 e2       	ldi	r16, 0x20	; 32
    1558:	05 c0       	rjmp	.+10     	; 0x1564 <vfprintf+0x1a2>
    155a:	0d e2       	ldi	r16, 0x2D	; 45
    155c:	03 c0       	rjmp	.+6      	; 0x1564 <vfprintf+0x1a2>
    155e:	0b e2       	ldi	r16, 0x2B	; 43
    1560:	01 c0       	rjmp	.+2      	; 0x1564 <vfprintf+0x1a2>
    1562:	00 e0       	ldi	r16, 0x00	; 0
    1564:	8c 85       	ldd	r24, Y+12	; 0x0c
    1566:	8c 70       	andi	r24, 0x0C	; 12
    1568:	19 f0       	breq	.+6      	; 0x1570 <vfprintf+0x1ae>
    156a:	01 11       	cpse	r16, r1
    156c:	5a c2       	rjmp	.+1204   	; 0x1a22 <vfprintf+0x660>
    156e:	9b c2       	rjmp	.+1334   	; 0x1aa6 <vfprintf+0x6e4>
    1570:	97 fe       	sbrs	r9, 7
    1572:	10 c0       	rjmp	.+32     	; 0x1594 <vfprintf+0x1d2>
    1574:	4c 0c       	add	r4, r12
    1576:	fc 85       	ldd	r31, Y+12	; 0x0c
    1578:	f4 ff       	sbrs	r31, 4
    157a:	04 c0       	rjmp	.+8      	; 0x1584 <vfprintf+0x1c2>
    157c:	8a 81       	ldd	r24, Y+2	; 0x02
    157e:	81 33       	cpi	r24, 0x31	; 49
    1580:	09 f4       	brne	.+2      	; 0x1584 <vfprintf+0x1c2>
    1582:	4a 94       	dec	r4
    1584:	14 14       	cp	r1, r4
    1586:	74 f5       	brge	.+92     	; 0x15e4 <vfprintf+0x222>
    1588:	28 e0       	ldi	r18, 0x08	; 8
    158a:	24 15       	cp	r18, r4
    158c:	78 f5       	brcc	.+94     	; 0x15ec <vfprintf+0x22a>
    158e:	88 e0       	ldi	r24, 0x08	; 8
    1590:	48 2e       	mov	r4, r24
    1592:	2c c0       	rjmp	.+88     	; 0x15ec <vfprintf+0x22a>
    1594:	96 fc       	sbrc	r9, 6
    1596:	2a c0       	rjmp	.+84     	; 0x15ec <vfprintf+0x22a>
    1598:	81 2f       	mov	r24, r17
    159a:	90 e0       	ldi	r25, 0x00	; 0
    159c:	8c 15       	cp	r24, r12
    159e:	9d 05       	cpc	r25, r13
    15a0:	9c f0       	brlt	.+38     	; 0x15c8 <vfprintf+0x206>
    15a2:	3c ef       	ldi	r19, 0xFC	; 252
    15a4:	c3 16       	cp	r12, r19
    15a6:	3f ef       	ldi	r19, 0xFF	; 255
    15a8:	d3 06       	cpc	r13, r19
    15aa:	74 f0       	brlt	.+28     	; 0x15c8 <vfprintf+0x206>
    15ac:	89 2d       	mov	r24, r9
    15ae:	80 68       	ori	r24, 0x80	; 128
    15b0:	98 2e       	mov	r9, r24
    15b2:	0a c0       	rjmp	.+20     	; 0x15c8 <vfprintf+0x206>
    15b4:	e2 e0       	ldi	r30, 0x02	; 2
    15b6:	f0 e0       	ldi	r31, 0x00	; 0
    15b8:	ec 0f       	add	r30, r28
    15ba:	fd 1f       	adc	r31, r29
    15bc:	e1 0f       	add	r30, r17
    15be:	f1 1d       	adc	r31, r1
    15c0:	80 81       	ld	r24, Z
    15c2:	80 33       	cpi	r24, 0x30	; 48
    15c4:	19 f4       	brne	.+6      	; 0x15cc <vfprintf+0x20a>
    15c6:	11 50       	subi	r17, 0x01	; 1
    15c8:	11 11       	cpse	r17, r1
    15ca:	f4 cf       	rjmp	.-24     	; 0x15b4 <vfprintf+0x1f2>
    15cc:	97 fe       	sbrs	r9, 7
    15ce:	0e c0       	rjmp	.+28     	; 0x15ec <vfprintf+0x22a>
    15d0:	44 24       	eor	r4, r4
    15d2:	43 94       	inc	r4
    15d4:	41 0e       	add	r4, r17
    15d6:	81 2f       	mov	r24, r17
    15d8:	90 e0       	ldi	r25, 0x00	; 0
    15da:	c8 16       	cp	r12, r24
    15dc:	d9 06       	cpc	r13, r25
    15de:	2c f4       	brge	.+10     	; 0x15ea <vfprintf+0x228>
    15e0:	1c 19       	sub	r17, r12
    15e2:	04 c0       	rjmp	.+8      	; 0x15ec <vfprintf+0x22a>
    15e4:	44 24       	eor	r4, r4
    15e6:	43 94       	inc	r4
    15e8:	01 c0       	rjmp	.+2      	; 0x15ec <vfprintf+0x22a>
    15ea:	10 e0       	ldi	r17, 0x00	; 0
    15ec:	97 fe       	sbrs	r9, 7
    15ee:	06 c0       	rjmp	.+12     	; 0x15fc <vfprintf+0x23a>
    15f0:	1c 14       	cp	r1, r12
    15f2:	1d 04       	cpc	r1, r13
    15f4:	34 f4       	brge	.+12     	; 0x1602 <vfprintf+0x240>
    15f6:	c6 01       	movw	r24, r12
    15f8:	01 96       	adiw	r24, 0x01	; 1
    15fa:	05 c0       	rjmp	.+10     	; 0x1606 <vfprintf+0x244>
    15fc:	85 e0       	ldi	r24, 0x05	; 5
    15fe:	90 e0       	ldi	r25, 0x00	; 0
    1600:	02 c0       	rjmp	.+4      	; 0x1606 <vfprintf+0x244>
    1602:	81 e0       	ldi	r24, 0x01	; 1
    1604:	90 e0       	ldi	r25, 0x00	; 0
    1606:	01 11       	cpse	r16, r1
    1608:	01 96       	adiw	r24, 0x01	; 1
    160a:	11 23       	and	r17, r17
    160c:	31 f0       	breq	.+12     	; 0x161a <vfprintf+0x258>
    160e:	21 2f       	mov	r18, r17
    1610:	30 e0       	ldi	r19, 0x00	; 0
    1612:	2f 5f       	subi	r18, 0xFF	; 255
    1614:	3f 4f       	sbci	r19, 0xFF	; 255
    1616:	82 0f       	add	r24, r18
    1618:	93 1f       	adc	r25, r19
    161a:	25 2d       	mov	r18, r5
    161c:	30 e0       	ldi	r19, 0x00	; 0
    161e:	82 17       	cp	r24, r18
    1620:	93 07       	cpc	r25, r19
    1622:	14 f4       	brge	.+4      	; 0x1628 <vfprintf+0x266>
    1624:	58 1a       	sub	r5, r24
    1626:	01 c0       	rjmp	.+2      	; 0x162a <vfprintf+0x268>
    1628:	51 2c       	mov	r5, r1
    162a:	89 2d       	mov	r24, r9
    162c:	89 70       	andi	r24, 0x09	; 9
    162e:	49 f4       	brne	.+18     	; 0x1642 <vfprintf+0x280>
    1630:	55 20       	and	r5, r5
    1632:	39 f0       	breq	.+14     	; 0x1642 <vfprintf+0x280>
    1634:	b7 01       	movw	r22, r14
    1636:	80 e2       	ldi	r24, 0x20	; 32
    1638:	90 e0       	ldi	r25, 0x00	; 0
    163a:	0e 94 89 0e 	call	0x1d12	; 0x1d12 <fputc>
    163e:	5a 94       	dec	r5
    1640:	f7 cf       	rjmp	.-18     	; 0x1630 <vfprintf+0x26e>
    1642:	00 23       	and	r16, r16
    1644:	29 f0       	breq	.+10     	; 0x1650 <vfprintf+0x28e>
    1646:	b7 01       	movw	r22, r14
    1648:	80 2f       	mov	r24, r16
    164a:	90 e0       	ldi	r25, 0x00	; 0
    164c:	0e 94 89 0e 	call	0x1d12	; 0x1d12 <fputc>
    1650:	93 fc       	sbrc	r9, 3
    1652:	09 c0       	rjmp	.+18     	; 0x1666 <vfprintf+0x2a4>
    1654:	55 20       	and	r5, r5
    1656:	39 f0       	breq	.+14     	; 0x1666 <vfprintf+0x2a4>
    1658:	b7 01       	movw	r22, r14
    165a:	80 e3       	ldi	r24, 0x30	; 48
    165c:	90 e0       	ldi	r25, 0x00	; 0
    165e:	0e 94 89 0e 	call	0x1d12	; 0x1d12 <fputc>
    1662:	5a 94       	dec	r5
    1664:	f7 cf       	rjmp	.-18     	; 0x1654 <vfprintf+0x292>
    1666:	97 fe       	sbrs	r9, 7
    1668:	4c c0       	rjmp	.+152    	; 0x1702 <vfprintf+0x340>
    166a:	46 01       	movw	r8, r12
    166c:	d7 fe       	sbrs	r13, 7
    166e:	02 c0       	rjmp	.+4      	; 0x1674 <vfprintf+0x2b2>
    1670:	81 2c       	mov	r8, r1
    1672:	91 2c       	mov	r9, r1
    1674:	c6 01       	movw	r24, r12
    1676:	88 19       	sub	r24, r8
    1678:	99 09       	sbc	r25, r9
    167a:	f3 01       	movw	r30, r6
    167c:	e8 0f       	add	r30, r24
    167e:	f9 1f       	adc	r31, r25
    1680:	fe 87       	std	Y+14, r31	; 0x0e
    1682:	ed 87       	std	Y+13, r30	; 0x0d
    1684:	96 01       	movw	r18, r12
    1686:	24 19       	sub	r18, r4
    1688:	31 09       	sbc	r19, r1
    168a:	38 8b       	std	Y+16, r19	; 0x10
    168c:	2f 87       	std	Y+15, r18	; 0x0f
    168e:	01 2f       	mov	r16, r17
    1690:	10 e0       	ldi	r17, 0x00	; 0
    1692:	11 95       	neg	r17
    1694:	01 95       	neg	r16
    1696:	11 09       	sbc	r17, r1
    1698:	3f ef       	ldi	r19, 0xFF	; 255
    169a:	83 16       	cp	r8, r19
    169c:	93 06       	cpc	r9, r19
    169e:	29 f4       	brne	.+10     	; 0x16aa <vfprintf+0x2e8>
    16a0:	b7 01       	movw	r22, r14
    16a2:	8e e2       	ldi	r24, 0x2E	; 46
    16a4:	90 e0       	ldi	r25, 0x00	; 0
    16a6:	0e 94 89 0e 	call	0x1d12	; 0x1d12 <fputc>
    16aa:	c8 14       	cp	r12, r8
    16ac:	d9 04       	cpc	r13, r9
    16ae:	4c f0       	brlt	.+18     	; 0x16c2 <vfprintf+0x300>
    16b0:	8f 85       	ldd	r24, Y+15	; 0x0f
    16b2:	98 89       	ldd	r25, Y+16	; 0x10
    16b4:	88 15       	cp	r24, r8
    16b6:	99 05       	cpc	r25, r9
    16b8:	24 f4       	brge	.+8      	; 0x16c2 <vfprintf+0x300>
    16ba:	ed 85       	ldd	r30, Y+13	; 0x0d
    16bc:	fe 85       	ldd	r31, Y+14	; 0x0e
    16be:	81 81       	ldd	r24, Z+1	; 0x01
    16c0:	01 c0       	rjmp	.+2      	; 0x16c4 <vfprintf+0x302>
    16c2:	80 e3       	ldi	r24, 0x30	; 48
    16c4:	f1 e0       	ldi	r31, 0x01	; 1
    16c6:	8f 1a       	sub	r8, r31
    16c8:	91 08       	sbc	r9, r1
    16ca:	2d 85       	ldd	r18, Y+13	; 0x0d
    16cc:	3e 85       	ldd	r19, Y+14	; 0x0e
    16ce:	2f 5f       	subi	r18, 0xFF	; 255
    16d0:	3f 4f       	sbci	r19, 0xFF	; 255
    16d2:	3e 87       	std	Y+14, r19	; 0x0e
    16d4:	2d 87       	std	Y+13, r18	; 0x0d
    16d6:	80 16       	cp	r8, r16
    16d8:	91 06       	cpc	r9, r17
    16da:	2c f0       	brlt	.+10     	; 0x16e6 <vfprintf+0x324>
    16dc:	b7 01       	movw	r22, r14
    16de:	90 e0       	ldi	r25, 0x00	; 0
    16e0:	0e 94 89 0e 	call	0x1d12	; 0x1d12 <fputc>
    16e4:	d9 cf       	rjmp	.-78     	; 0x1698 <vfprintf+0x2d6>
    16e6:	c8 14       	cp	r12, r8
    16e8:	d9 04       	cpc	r13, r9
    16ea:	41 f4       	brne	.+16     	; 0x16fc <vfprintf+0x33a>
    16ec:	9a 81       	ldd	r25, Y+2	; 0x02
    16ee:	96 33       	cpi	r25, 0x36	; 54
    16f0:	20 f4       	brcc	.+8      	; 0x16fa <vfprintf+0x338>
    16f2:	95 33       	cpi	r25, 0x35	; 53
    16f4:	19 f4       	brne	.+6      	; 0x16fc <vfprintf+0x33a>
    16f6:	3c 85       	ldd	r19, Y+12	; 0x0c
    16f8:	34 ff       	sbrs	r19, 4
    16fa:	81 e3       	ldi	r24, 0x31	; 49
    16fc:	b7 01       	movw	r22, r14
    16fe:	90 e0       	ldi	r25, 0x00	; 0
    1700:	4e c0       	rjmp	.+156    	; 0x179e <vfprintf+0x3dc>
    1702:	8a 81       	ldd	r24, Y+2	; 0x02
    1704:	81 33       	cpi	r24, 0x31	; 49
    1706:	19 f0       	breq	.+6      	; 0x170e <vfprintf+0x34c>
    1708:	9c 85       	ldd	r25, Y+12	; 0x0c
    170a:	9f 7e       	andi	r25, 0xEF	; 239
    170c:	9c 87       	std	Y+12, r25	; 0x0c
    170e:	b7 01       	movw	r22, r14
    1710:	90 e0       	ldi	r25, 0x00	; 0
    1712:	0e 94 89 0e 	call	0x1d12	; 0x1d12 <fputc>
    1716:	11 11       	cpse	r17, r1
    1718:	05 c0       	rjmp	.+10     	; 0x1724 <vfprintf+0x362>
    171a:	94 fc       	sbrc	r9, 4
    171c:	18 c0       	rjmp	.+48     	; 0x174e <vfprintf+0x38c>
    171e:	85 e6       	ldi	r24, 0x65	; 101
    1720:	90 e0       	ldi	r25, 0x00	; 0
    1722:	17 c0       	rjmp	.+46     	; 0x1752 <vfprintf+0x390>
    1724:	b7 01       	movw	r22, r14
    1726:	8e e2       	ldi	r24, 0x2E	; 46
    1728:	90 e0       	ldi	r25, 0x00	; 0
    172a:	0e 94 89 0e 	call	0x1d12	; 0x1d12 <fputc>
    172e:	1e 5f       	subi	r17, 0xFE	; 254
    1730:	82 e0       	ldi	r24, 0x02	; 2
    1732:	01 e0       	ldi	r16, 0x01	; 1
    1734:	08 0f       	add	r16, r24
    1736:	f3 01       	movw	r30, r6
    1738:	e8 0f       	add	r30, r24
    173a:	f1 1d       	adc	r31, r1
    173c:	80 81       	ld	r24, Z
    173e:	b7 01       	movw	r22, r14
    1740:	90 e0       	ldi	r25, 0x00	; 0
    1742:	0e 94 89 0e 	call	0x1d12	; 0x1d12 <fputc>
    1746:	80 2f       	mov	r24, r16
    1748:	01 13       	cpse	r16, r17
    174a:	f3 cf       	rjmp	.-26     	; 0x1732 <vfprintf+0x370>
    174c:	e6 cf       	rjmp	.-52     	; 0x171a <vfprintf+0x358>
    174e:	85 e4       	ldi	r24, 0x45	; 69
    1750:	90 e0       	ldi	r25, 0x00	; 0
    1752:	b7 01       	movw	r22, r14
    1754:	0e 94 89 0e 	call	0x1d12	; 0x1d12 <fputc>
    1758:	d7 fc       	sbrc	r13, 7
    175a:	06 c0       	rjmp	.+12     	; 0x1768 <vfprintf+0x3a6>
    175c:	c1 14       	cp	r12, r1
    175e:	d1 04       	cpc	r13, r1
    1760:	41 f4       	brne	.+16     	; 0x1772 <vfprintf+0x3b0>
    1762:	ec 85       	ldd	r30, Y+12	; 0x0c
    1764:	e4 ff       	sbrs	r30, 4
    1766:	05 c0       	rjmp	.+10     	; 0x1772 <vfprintf+0x3b0>
    1768:	d1 94       	neg	r13
    176a:	c1 94       	neg	r12
    176c:	d1 08       	sbc	r13, r1
    176e:	8d e2       	ldi	r24, 0x2D	; 45
    1770:	01 c0       	rjmp	.+2      	; 0x1774 <vfprintf+0x3b2>
    1772:	8b e2       	ldi	r24, 0x2B	; 43
    1774:	b7 01       	movw	r22, r14
    1776:	90 e0       	ldi	r25, 0x00	; 0
    1778:	0e 94 89 0e 	call	0x1d12	; 0x1d12 <fputc>
    177c:	80 e3       	ldi	r24, 0x30	; 48
    177e:	2a e0       	ldi	r18, 0x0A	; 10
    1780:	c2 16       	cp	r12, r18
    1782:	d1 04       	cpc	r13, r1
    1784:	2c f0       	brlt	.+10     	; 0x1790 <vfprintf+0x3ce>
    1786:	8f 5f       	subi	r24, 0xFF	; 255
    1788:	fa e0       	ldi	r31, 0x0A	; 10
    178a:	cf 1a       	sub	r12, r31
    178c:	d1 08       	sbc	r13, r1
    178e:	f7 cf       	rjmp	.-18     	; 0x177e <vfprintf+0x3bc>
    1790:	b7 01       	movw	r22, r14
    1792:	90 e0       	ldi	r25, 0x00	; 0
    1794:	0e 94 89 0e 	call	0x1d12	; 0x1d12 <fputc>
    1798:	b7 01       	movw	r22, r14
    179a:	c6 01       	movw	r24, r12
    179c:	c0 96       	adiw	r24, 0x30	; 48
    179e:	0e 94 89 0e 	call	0x1d12	; 0x1d12 <fputc>
    17a2:	54 c1       	rjmp	.+680    	; 0x1a4c <vfprintf+0x68a>
    17a4:	83 36       	cpi	r24, 0x63	; 99
    17a6:	31 f0       	breq	.+12     	; 0x17b4 <vfprintf+0x3f2>
    17a8:	83 37       	cpi	r24, 0x73	; 115
    17aa:	79 f0       	breq	.+30     	; 0x17ca <vfprintf+0x408>
    17ac:	83 35       	cpi	r24, 0x53	; 83
    17ae:	09 f0       	breq	.+2      	; 0x17b2 <vfprintf+0x3f0>
    17b0:	56 c0       	rjmp	.+172    	; 0x185e <vfprintf+0x49c>
    17b2:	20 c0       	rjmp	.+64     	; 0x17f4 <vfprintf+0x432>
    17b4:	56 01       	movw	r10, r12
    17b6:	32 e0       	ldi	r19, 0x02	; 2
    17b8:	a3 0e       	add	r10, r19
    17ba:	b1 1c       	adc	r11, r1
    17bc:	f6 01       	movw	r30, r12
    17be:	80 81       	ld	r24, Z
    17c0:	89 83       	std	Y+1, r24	; 0x01
    17c2:	01 e0       	ldi	r16, 0x01	; 1
    17c4:	10 e0       	ldi	r17, 0x00	; 0
    17c6:	63 01       	movw	r12, r6
    17c8:	12 c0       	rjmp	.+36     	; 0x17ee <vfprintf+0x42c>
    17ca:	56 01       	movw	r10, r12
    17cc:	f2 e0       	ldi	r31, 0x02	; 2
    17ce:	af 0e       	add	r10, r31
    17d0:	b1 1c       	adc	r11, r1
    17d2:	f6 01       	movw	r30, r12
    17d4:	c0 80       	ld	r12, Z
    17d6:	d1 80       	ldd	r13, Z+1	; 0x01
    17d8:	96 fe       	sbrs	r9, 6
    17da:	03 c0       	rjmp	.+6      	; 0x17e2 <vfprintf+0x420>
    17dc:	61 2f       	mov	r22, r17
    17de:	70 e0       	ldi	r23, 0x00	; 0
    17e0:	02 c0       	rjmp	.+4      	; 0x17e6 <vfprintf+0x424>
    17e2:	6f ef       	ldi	r22, 0xFF	; 255
    17e4:	7f ef       	ldi	r23, 0xFF	; 255
    17e6:	c6 01       	movw	r24, r12
    17e8:	0e 94 7e 0e 	call	0x1cfc	; 0x1cfc <strnlen>
    17ec:	8c 01       	movw	r16, r24
    17ee:	f9 2d       	mov	r31, r9
    17f0:	ff 77       	andi	r31, 0x7F	; 127
    17f2:	14 c0       	rjmp	.+40     	; 0x181c <vfprintf+0x45a>
    17f4:	56 01       	movw	r10, r12
    17f6:	22 e0       	ldi	r18, 0x02	; 2
    17f8:	a2 0e       	add	r10, r18
    17fa:	b1 1c       	adc	r11, r1
    17fc:	f6 01       	movw	r30, r12
    17fe:	c0 80       	ld	r12, Z
    1800:	d1 80       	ldd	r13, Z+1	; 0x01
    1802:	96 fe       	sbrs	r9, 6
    1804:	03 c0       	rjmp	.+6      	; 0x180c <vfprintf+0x44a>
    1806:	61 2f       	mov	r22, r17
    1808:	70 e0       	ldi	r23, 0x00	; 0
    180a:	02 c0       	rjmp	.+4      	; 0x1810 <vfprintf+0x44e>
    180c:	6f ef       	ldi	r22, 0xFF	; 255
    180e:	7f ef       	ldi	r23, 0xFF	; 255
    1810:	c6 01       	movw	r24, r12
    1812:	0e 94 73 0e 	call	0x1ce6	; 0x1ce6 <strnlen_P>
    1816:	8c 01       	movw	r16, r24
    1818:	f9 2d       	mov	r31, r9
    181a:	f0 68       	ori	r31, 0x80	; 128
    181c:	9f 2e       	mov	r9, r31
    181e:	f3 fd       	sbrc	r31, 3
    1820:	1a c0       	rjmp	.+52     	; 0x1856 <vfprintf+0x494>
    1822:	85 2d       	mov	r24, r5
    1824:	90 e0       	ldi	r25, 0x00	; 0
    1826:	08 17       	cp	r16, r24
    1828:	19 07       	cpc	r17, r25
    182a:	a8 f4       	brcc	.+42     	; 0x1856 <vfprintf+0x494>
    182c:	b7 01       	movw	r22, r14
    182e:	80 e2       	ldi	r24, 0x20	; 32
    1830:	90 e0       	ldi	r25, 0x00	; 0
    1832:	0e 94 89 0e 	call	0x1d12	; 0x1d12 <fputc>
    1836:	5a 94       	dec	r5
    1838:	f4 cf       	rjmp	.-24     	; 0x1822 <vfprintf+0x460>
    183a:	f6 01       	movw	r30, r12
    183c:	97 fc       	sbrc	r9, 7
    183e:	85 91       	lpm	r24, Z+
    1840:	97 fe       	sbrs	r9, 7
    1842:	81 91       	ld	r24, Z+
    1844:	6f 01       	movw	r12, r30
    1846:	b7 01       	movw	r22, r14
    1848:	90 e0       	ldi	r25, 0x00	; 0
    184a:	0e 94 89 0e 	call	0x1d12	; 0x1d12 <fputc>
    184e:	51 10       	cpse	r5, r1
    1850:	5a 94       	dec	r5
    1852:	01 50       	subi	r16, 0x01	; 1
    1854:	11 09       	sbc	r17, r1
    1856:	01 15       	cp	r16, r1
    1858:	11 05       	cpc	r17, r1
    185a:	79 f7       	brne	.-34     	; 0x183a <vfprintf+0x478>
    185c:	f7 c0       	rjmp	.+494    	; 0x1a4c <vfprintf+0x68a>
    185e:	84 36       	cpi	r24, 0x64	; 100
    1860:	11 f0       	breq	.+4      	; 0x1866 <vfprintf+0x4a4>
    1862:	89 36       	cpi	r24, 0x69	; 105
    1864:	61 f5       	brne	.+88     	; 0x18be <vfprintf+0x4fc>
    1866:	56 01       	movw	r10, r12
    1868:	97 fe       	sbrs	r9, 7
    186a:	09 c0       	rjmp	.+18     	; 0x187e <vfprintf+0x4bc>
    186c:	24 e0       	ldi	r18, 0x04	; 4
    186e:	a2 0e       	add	r10, r18
    1870:	b1 1c       	adc	r11, r1
    1872:	f6 01       	movw	r30, r12
    1874:	60 81       	ld	r22, Z
    1876:	71 81       	ldd	r23, Z+1	; 0x01
    1878:	82 81       	ldd	r24, Z+2	; 0x02
    187a:	93 81       	ldd	r25, Z+3	; 0x03
    187c:	0a c0       	rjmp	.+20     	; 0x1892 <vfprintf+0x4d0>
    187e:	f2 e0       	ldi	r31, 0x02	; 2
    1880:	af 0e       	add	r10, r31
    1882:	b1 1c       	adc	r11, r1
    1884:	f6 01       	movw	r30, r12
    1886:	60 81       	ld	r22, Z
    1888:	71 81       	ldd	r23, Z+1	; 0x01
    188a:	07 2e       	mov	r0, r23
    188c:	00 0c       	add	r0, r0
    188e:	88 0b       	sbc	r24, r24
    1890:	99 0b       	sbc	r25, r25
    1892:	f9 2d       	mov	r31, r9
    1894:	ff 76       	andi	r31, 0x6F	; 111
    1896:	9f 2e       	mov	r9, r31
    1898:	97 ff       	sbrs	r25, 7
    189a:	09 c0       	rjmp	.+18     	; 0x18ae <vfprintf+0x4ec>
    189c:	90 95       	com	r25
    189e:	80 95       	com	r24
    18a0:	70 95       	com	r23
    18a2:	61 95       	neg	r22
    18a4:	7f 4f       	sbci	r23, 0xFF	; 255
    18a6:	8f 4f       	sbci	r24, 0xFF	; 255
    18a8:	9f 4f       	sbci	r25, 0xFF	; 255
    18aa:	f0 68       	ori	r31, 0x80	; 128
    18ac:	9f 2e       	mov	r9, r31
    18ae:	2a e0       	ldi	r18, 0x0A	; 10
    18b0:	30 e0       	ldi	r19, 0x00	; 0
    18b2:	a3 01       	movw	r20, r6
    18b4:	0e 94 fd 0e 	call	0x1dfa	; 0x1dfa <__ultoa_invert>
    18b8:	c8 2e       	mov	r12, r24
    18ba:	c6 18       	sub	r12, r6
    18bc:	3f c0       	rjmp	.+126    	; 0x193c <vfprintf+0x57a>
    18be:	09 2d       	mov	r16, r9
    18c0:	85 37       	cpi	r24, 0x75	; 117
    18c2:	21 f4       	brne	.+8      	; 0x18cc <vfprintf+0x50a>
    18c4:	0f 7e       	andi	r16, 0xEF	; 239
    18c6:	2a e0       	ldi	r18, 0x0A	; 10
    18c8:	30 e0       	ldi	r19, 0x00	; 0
    18ca:	1d c0       	rjmp	.+58     	; 0x1906 <vfprintf+0x544>
    18cc:	09 7f       	andi	r16, 0xF9	; 249
    18ce:	8f 36       	cpi	r24, 0x6F	; 111
    18d0:	91 f0       	breq	.+36     	; 0x18f6 <vfprintf+0x534>
    18d2:	18 f4       	brcc	.+6      	; 0x18da <vfprintf+0x518>
    18d4:	88 35       	cpi	r24, 0x58	; 88
    18d6:	59 f0       	breq	.+22     	; 0x18ee <vfprintf+0x52c>
    18d8:	c3 c0       	rjmp	.+390    	; 0x1a60 <vfprintf+0x69e>
    18da:	80 37       	cpi	r24, 0x70	; 112
    18dc:	19 f0       	breq	.+6      	; 0x18e4 <vfprintf+0x522>
    18de:	88 37       	cpi	r24, 0x78	; 120
    18e0:	11 f0       	breq	.+4      	; 0x18e6 <vfprintf+0x524>
    18e2:	be c0       	rjmp	.+380    	; 0x1a60 <vfprintf+0x69e>
    18e4:	00 61       	ori	r16, 0x10	; 16
    18e6:	04 ff       	sbrs	r16, 4
    18e8:	09 c0       	rjmp	.+18     	; 0x18fc <vfprintf+0x53a>
    18ea:	04 60       	ori	r16, 0x04	; 4
    18ec:	07 c0       	rjmp	.+14     	; 0x18fc <vfprintf+0x53a>
    18ee:	94 fe       	sbrs	r9, 4
    18f0:	08 c0       	rjmp	.+16     	; 0x1902 <vfprintf+0x540>
    18f2:	06 60       	ori	r16, 0x06	; 6
    18f4:	06 c0       	rjmp	.+12     	; 0x1902 <vfprintf+0x540>
    18f6:	28 e0       	ldi	r18, 0x08	; 8
    18f8:	30 e0       	ldi	r19, 0x00	; 0
    18fa:	05 c0       	rjmp	.+10     	; 0x1906 <vfprintf+0x544>
    18fc:	20 e1       	ldi	r18, 0x10	; 16
    18fe:	30 e0       	ldi	r19, 0x00	; 0
    1900:	02 c0       	rjmp	.+4      	; 0x1906 <vfprintf+0x544>
    1902:	20 e1       	ldi	r18, 0x10	; 16
    1904:	32 e0       	ldi	r19, 0x02	; 2
    1906:	56 01       	movw	r10, r12
    1908:	07 ff       	sbrs	r16, 7
    190a:	09 c0       	rjmp	.+18     	; 0x191e <vfprintf+0x55c>
    190c:	84 e0       	ldi	r24, 0x04	; 4
    190e:	a8 0e       	add	r10, r24
    1910:	b1 1c       	adc	r11, r1
    1912:	f6 01       	movw	r30, r12
    1914:	60 81       	ld	r22, Z
    1916:	71 81       	ldd	r23, Z+1	; 0x01
    1918:	82 81       	ldd	r24, Z+2	; 0x02
    191a:	93 81       	ldd	r25, Z+3	; 0x03
    191c:	08 c0       	rjmp	.+16     	; 0x192e <vfprintf+0x56c>
    191e:	f2 e0       	ldi	r31, 0x02	; 2
    1920:	af 0e       	add	r10, r31
    1922:	b1 1c       	adc	r11, r1
    1924:	f6 01       	movw	r30, r12
    1926:	60 81       	ld	r22, Z
    1928:	71 81       	ldd	r23, Z+1	; 0x01
    192a:	80 e0       	ldi	r24, 0x00	; 0
    192c:	90 e0       	ldi	r25, 0x00	; 0
    192e:	a3 01       	movw	r20, r6
    1930:	0e 94 fd 0e 	call	0x1dfa	; 0x1dfa <__ultoa_invert>
    1934:	c8 2e       	mov	r12, r24
    1936:	c6 18       	sub	r12, r6
    1938:	0f 77       	andi	r16, 0x7F	; 127
    193a:	90 2e       	mov	r9, r16
    193c:	96 fe       	sbrs	r9, 6
    193e:	0b c0       	rjmp	.+22     	; 0x1956 <vfprintf+0x594>
    1940:	09 2d       	mov	r16, r9
    1942:	0e 7f       	andi	r16, 0xFE	; 254
    1944:	c1 16       	cp	r12, r17
    1946:	50 f4       	brcc	.+20     	; 0x195c <vfprintf+0x59a>
    1948:	94 fe       	sbrs	r9, 4
    194a:	0a c0       	rjmp	.+20     	; 0x1960 <vfprintf+0x59e>
    194c:	92 fc       	sbrc	r9, 2
    194e:	08 c0       	rjmp	.+16     	; 0x1960 <vfprintf+0x59e>
    1950:	09 2d       	mov	r16, r9
    1952:	0e 7e       	andi	r16, 0xEE	; 238
    1954:	05 c0       	rjmp	.+10     	; 0x1960 <vfprintf+0x59e>
    1956:	dc 2c       	mov	r13, r12
    1958:	09 2d       	mov	r16, r9
    195a:	03 c0       	rjmp	.+6      	; 0x1962 <vfprintf+0x5a0>
    195c:	dc 2c       	mov	r13, r12
    195e:	01 c0       	rjmp	.+2      	; 0x1962 <vfprintf+0x5a0>
    1960:	d1 2e       	mov	r13, r17
    1962:	04 ff       	sbrs	r16, 4
    1964:	0d c0       	rjmp	.+26     	; 0x1980 <vfprintf+0x5be>
    1966:	fe 01       	movw	r30, r28
    1968:	ec 0d       	add	r30, r12
    196a:	f1 1d       	adc	r31, r1
    196c:	80 81       	ld	r24, Z
    196e:	80 33       	cpi	r24, 0x30	; 48
    1970:	11 f4       	brne	.+4      	; 0x1976 <vfprintf+0x5b4>
    1972:	09 7e       	andi	r16, 0xE9	; 233
    1974:	09 c0       	rjmp	.+18     	; 0x1988 <vfprintf+0x5c6>
    1976:	02 ff       	sbrs	r16, 2
    1978:	06 c0       	rjmp	.+12     	; 0x1986 <vfprintf+0x5c4>
    197a:	d3 94       	inc	r13
    197c:	d3 94       	inc	r13
    197e:	04 c0       	rjmp	.+8      	; 0x1988 <vfprintf+0x5c6>
    1980:	80 2f       	mov	r24, r16
    1982:	86 78       	andi	r24, 0x86	; 134
    1984:	09 f0       	breq	.+2      	; 0x1988 <vfprintf+0x5c6>
    1986:	d3 94       	inc	r13
    1988:	03 fd       	sbrc	r16, 3
    198a:	11 c0       	rjmp	.+34     	; 0x19ae <vfprintf+0x5ec>
    198c:	00 ff       	sbrs	r16, 0
    198e:	06 c0       	rjmp	.+12     	; 0x199c <vfprintf+0x5da>
    1990:	1c 2d       	mov	r17, r12
    1992:	d5 14       	cp	r13, r5
    1994:	80 f4       	brcc	.+32     	; 0x19b6 <vfprintf+0x5f4>
    1996:	15 0d       	add	r17, r5
    1998:	1d 19       	sub	r17, r13
    199a:	0d c0       	rjmp	.+26     	; 0x19b6 <vfprintf+0x5f4>
    199c:	d5 14       	cp	r13, r5
    199e:	58 f4       	brcc	.+22     	; 0x19b6 <vfprintf+0x5f4>
    19a0:	b7 01       	movw	r22, r14
    19a2:	80 e2       	ldi	r24, 0x20	; 32
    19a4:	90 e0       	ldi	r25, 0x00	; 0
    19a6:	0e 94 89 0e 	call	0x1d12	; 0x1d12 <fputc>
    19aa:	d3 94       	inc	r13
    19ac:	f7 cf       	rjmp	.-18     	; 0x199c <vfprintf+0x5da>
    19ae:	d5 14       	cp	r13, r5
    19b0:	10 f4       	brcc	.+4      	; 0x19b6 <vfprintf+0x5f4>
    19b2:	5d 18       	sub	r5, r13
    19b4:	01 c0       	rjmp	.+2      	; 0x19b8 <vfprintf+0x5f6>
    19b6:	51 2c       	mov	r5, r1
    19b8:	04 ff       	sbrs	r16, 4
    19ba:	10 c0       	rjmp	.+32     	; 0x19dc <vfprintf+0x61a>
    19bc:	b7 01       	movw	r22, r14
    19be:	80 e3       	ldi	r24, 0x30	; 48
    19c0:	90 e0       	ldi	r25, 0x00	; 0
    19c2:	0e 94 89 0e 	call	0x1d12	; 0x1d12 <fputc>
    19c6:	02 ff       	sbrs	r16, 2
    19c8:	17 c0       	rjmp	.+46     	; 0x19f8 <vfprintf+0x636>
    19ca:	01 fd       	sbrc	r16, 1
    19cc:	03 c0       	rjmp	.+6      	; 0x19d4 <vfprintf+0x612>
    19ce:	88 e7       	ldi	r24, 0x78	; 120
    19d0:	90 e0       	ldi	r25, 0x00	; 0
    19d2:	02 c0       	rjmp	.+4      	; 0x19d8 <vfprintf+0x616>
    19d4:	88 e5       	ldi	r24, 0x58	; 88
    19d6:	90 e0       	ldi	r25, 0x00	; 0
    19d8:	b7 01       	movw	r22, r14
    19da:	0c c0       	rjmp	.+24     	; 0x19f4 <vfprintf+0x632>
    19dc:	80 2f       	mov	r24, r16
    19de:	86 78       	andi	r24, 0x86	; 134
    19e0:	59 f0       	breq	.+22     	; 0x19f8 <vfprintf+0x636>
    19e2:	01 ff       	sbrs	r16, 1
    19e4:	02 c0       	rjmp	.+4      	; 0x19ea <vfprintf+0x628>
    19e6:	8b e2       	ldi	r24, 0x2B	; 43
    19e8:	01 c0       	rjmp	.+2      	; 0x19ec <vfprintf+0x62a>
    19ea:	80 e2       	ldi	r24, 0x20	; 32
    19ec:	07 fd       	sbrc	r16, 7
    19ee:	8d e2       	ldi	r24, 0x2D	; 45
    19f0:	b7 01       	movw	r22, r14
    19f2:	90 e0       	ldi	r25, 0x00	; 0
    19f4:	0e 94 89 0e 	call	0x1d12	; 0x1d12 <fputc>
    19f8:	c1 16       	cp	r12, r17
    19fa:	38 f4       	brcc	.+14     	; 0x1a0a <vfprintf+0x648>
    19fc:	b7 01       	movw	r22, r14
    19fe:	80 e3       	ldi	r24, 0x30	; 48
    1a00:	90 e0       	ldi	r25, 0x00	; 0
    1a02:	0e 94 89 0e 	call	0x1d12	; 0x1d12 <fputc>
    1a06:	11 50       	subi	r17, 0x01	; 1
    1a08:	f7 cf       	rjmp	.-18     	; 0x19f8 <vfprintf+0x636>
    1a0a:	ca 94       	dec	r12
    1a0c:	f3 01       	movw	r30, r6
    1a0e:	ec 0d       	add	r30, r12
    1a10:	f1 1d       	adc	r31, r1
    1a12:	80 81       	ld	r24, Z
    1a14:	b7 01       	movw	r22, r14
    1a16:	90 e0       	ldi	r25, 0x00	; 0
    1a18:	0e 94 89 0e 	call	0x1d12	; 0x1d12 <fputc>
    1a1c:	c1 10       	cpse	r12, r1
    1a1e:	f5 cf       	rjmp	.-22     	; 0x1a0a <vfprintf+0x648>
    1a20:	15 c0       	rjmp	.+42     	; 0x1a4c <vfprintf+0x68a>
    1a22:	f4 e0       	ldi	r31, 0x04	; 4
    1a24:	f5 15       	cp	r31, r5
    1a26:	60 f5       	brcc	.+88     	; 0x1a80 <vfprintf+0x6be>
    1a28:	84 e0       	ldi	r24, 0x04	; 4
    1a2a:	58 1a       	sub	r5, r24
    1a2c:	93 fe       	sbrs	r9, 3
    1a2e:	1f c0       	rjmp	.+62     	; 0x1a6e <vfprintf+0x6ac>
    1a30:	01 11       	cpse	r16, r1
    1a32:	27 c0       	rjmp	.+78     	; 0x1a82 <vfprintf+0x6c0>
    1a34:	2c 85       	ldd	r18, Y+12	; 0x0c
    1a36:	23 ff       	sbrs	r18, 3
    1a38:	2a c0       	rjmp	.+84     	; 0x1a8e <vfprintf+0x6cc>
    1a3a:	0e e1       	ldi	r16, 0x1E	; 30
    1a3c:	11 e0       	ldi	r17, 0x01	; 1
    1a3e:	39 2d       	mov	r19, r9
    1a40:	30 71       	andi	r19, 0x10	; 16
    1a42:	93 2e       	mov	r9, r19
    1a44:	f8 01       	movw	r30, r16
    1a46:	84 91       	lpm	r24, Z
    1a48:	81 11       	cpse	r24, r1
    1a4a:	24 c0       	rjmp	.+72     	; 0x1a94 <vfprintf+0x6d2>
    1a4c:	55 20       	and	r5, r5
    1a4e:	09 f4       	brne	.+2      	; 0x1a52 <vfprintf+0x690>
    1a50:	e4 cc       	rjmp	.-1592   	; 0x141a <vfprintf+0x58>
    1a52:	b7 01       	movw	r22, r14
    1a54:	80 e2       	ldi	r24, 0x20	; 32
    1a56:	90 e0       	ldi	r25, 0x00	; 0
    1a58:	0e 94 89 0e 	call	0x1d12	; 0x1d12 <fputc>
    1a5c:	5a 94       	dec	r5
    1a5e:	f6 cf       	rjmp	.-20     	; 0x1a4c <vfprintf+0x68a>
    1a60:	f7 01       	movw	r30, r14
    1a62:	86 81       	ldd	r24, Z+6	; 0x06
    1a64:	97 81       	ldd	r25, Z+7	; 0x07
    1a66:	26 c0       	rjmp	.+76     	; 0x1ab4 <vfprintf+0x6f2>
    1a68:	8f ef       	ldi	r24, 0xFF	; 255
    1a6a:	9f ef       	ldi	r25, 0xFF	; 255
    1a6c:	23 c0       	rjmp	.+70     	; 0x1ab4 <vfprintf+0x6f2>
    1a6e:	b7 01       	movw	r22, r14
    1a70:	80 e2       	ldi	r24, 0x20	; 32
    1a72:	90 e0       	ldi	r25, 0x00	; 0
    1a74:	0e 94 89 0e 	call	0x1d12	; 0x1d12 <fputc>
    1a78:	5a 94       	dec	r5
    1a7a:	51 10       	cpse	r5, r1
    1a7c:	f8 cf       	rjmp	.-16     	; 0x1a6e <vfprintf+0x6ac>
    1a7e:	d8 cf       	rjmp	.-80     	; 0x1a30 <vfprintf+0x66e>
    1a80:	51 2c       	mov	r5, r1
    1a82:	b7 01       	movw	r22, r14
    1a84:	80 2f       	mov	r24, r16
    1a86:	90 e0       	ldi	r25, 0x00	; 0
    1a88:	0e 94 89 0e 	call	0x1d12	; 0x1d12 <fputc>
    1a8c:	d3 cf       	rjmp	.-90     	; 0x1a34 <vfprintf+0x672>
    1a8e:	02 e2       	ldi	r16, 0x22	; 34
    1a90:	11 e0       	ldi	r17, 0x01	; 1
    1a92:	d5 cf       	rjmp	.-86     	; 0x1a3e <vfprintf+0x67c>
    1a94:	91 10       	cpse	r9, r1
    1a96:	80 52       	subi	r24, 0x20	; 32
    1a98:	b7 01       	movw	r22, r14
    1a9a:	90 e0       	ldi	r25, 0x00	; 0
    1a9c:	0e 94 89 0e 	call	0x1d12	; 0x1d12 <fputc>
    1aa0:	0f 5f       	subi	r16, 0xFF	; 255
    1aa2:	1f 4f       	sbci	r17, 0xFF	; 255
    1aa4:	cf cf       	rjmp	.-98     	; 0x1a44 <vfprintf+0x682>
    1aa6:	23 e0       	ldi	r18, 0x03	; 3
    1aa8:	25 15       	cp	r18, r5
    1aaa:	10 f4       	brcc	.+4      	; 0x1ab0 <vfprintf+0x6ee>
    1aac:	83 e0       	ldi	r24, 0x03	; 3
    1aae:	bd cf       	rjmp	.-134    	; 0x1a2a <vfprintf+0x668>
    1ab0:	51 2c       	mov	r5, r1
    1ab2:	c0 cf       	rjmp	.-128    	; 0x1a34 <vfprintf+0x672>
    1ab4:	60 96       	adiw	r28, 0x10	; 16
    1ab6:	e2 e1       	ldi	r30, 0x12	; 18
    1ab8:	0c 94 80 0d 	jmp	0x1b00	; 0x1b00 <__epilogue_restores__>

00001abc <__tablejump2__>:
    1abc:	ee 0f       	add	r30, r30
    1abe:	ff 1f       	adc	r31, r31
    1ac0:	05 90       	lpm	r0, Z+
    1ac2:	f4 91       	lpm	r31, Z
    1ac4:	e0 2d       	mov	r30, r0
    1ac6:	09 94       	ijmp

00001ac8 <__prologue_saves__>:
    1ac8:	2f 92       	push	r2
    1aca:	3f 92       	push	r3
    1acc:	4f 92       	push	r4
    1ace:	5f 92       	push	r5
    1ad0:	6f 92       	push	r6
    1ad2:	7f 92       	push	r7
    1ad4:	8f 92       	push	r8
    1ad6:	9f 92       	push	r9
    1ad8:	af 92       	push	r10
    1ada:	bf 92       	push	r11
    1adc:	cf 92       	push	r12
    1ade:	df 92       	push	r13
    1ae0:	ef 92       	push	r14
    1ae2:	ff 92       	push	r15
    1ae4:	0f 93       	push	r16
    1ae6:	1f 93       	push	r17
    1ae8:	cf 93       	push	r28
    1aea:	df 93       	push	r29
    1aec:	cd b7       	in	r28, 0x3d	; 61
    1aee:	de b7       	in	r29, 0x3e	; 62
    1af0:	ca 1b       	sub	r28, r26
    1af2:	db 0b       	sbc	r29, r27
    1af4:	0f b6       	in	r0, 0x3f	; 63
    1af6:	f8 94       	cli
    1af8:	de bf       	out	0x3e, r29	; 62
    1afa:	0f be       	out	0x3f, r0	; 63
    1afc:	cd bf       	out	0x3d, r28	; 61
    1afe:	09 94       	ijmp

00001b00 <__epilogue_restores__>:
    1b00:	2a 88       	ldd	r2, Y+18	; 0x12
    1b02:	39 88       	ldd	r3, Y+17	; 0x11
    1b04:	48 88       	ldd	r4, Y+16	; 0x10
    1b06:	5f 84       	ldd	r5, Y+15	; 0x0f
    1b08:	6e 84       	ldd	r6, Y+14	; 0x0e
    1b0a:	7d 84       	ldd	r7, Y+13	; 0x0d
    1b0c:	8c 84       	ldd	r8, Y+12	; 0x0c
    1b0e:	9b 84       	ldd	r9, Y+11	; 0x0b
    1b10:	aa 84       	ldd	r10, Y+10	; 0x0a
    1b12:	b9 84       	ldd	r11, Y+9	; 0x09
    1b14:	c8 84       	ldd	r12, Y+8	; 0x08
    1b16:	df 80       	ldd	r13, Y+7	; 0x07
    1b18:	ee 80       	ldd	r14, Y+6	; 0x06
    1b1a:	fd 80       	ldd	r15, Y+5	; 0x05
    1b1c:	0c 81       	ldd	r16, Y+4	; 0x04
    1b1e:	1b 81       	ldd	r17, Y+3	; 0x03
    1b20:	aa 81       	ldd	r26, Y+2	; 0x02
    1b22:	b9 81       	ldd	r27, Y+1	; 0x01
    1b24:	ce 0f       	add	r28, r30
    1b26:	d1 1d       	adc	r29, r1
    1b28:	0f b6       	in	r0, 0x3f	; 63
    1b2a:	f8 94       	cli
    1b2c:	de bf       	out	0x3e, r29	; 62
    1b2e:	0f be       	out	0x3f, r0	; 63
    1b30:	cd bf       	out	0x3d, r28	; 61
    1b32:	ed 01       	movw	r28, r26
    1b34:	08 95       	ret

00001b36 <__ftoa_engine>:
    1b36:	28 30       	cpi	r18, 0x08	; 8
    1b38:	08 f0       	brcs	.+2      	; 0x1b3c <__ftoa_engine+0x6>
    1b3a:	27 e0       	ldi	r18, 0x07	; 7
    1b3c:	33 27       	eor	r19, r19
    1b3e:	da 01       	movw	r26, r20
    1b40:	99 0f       	add	r25, r25
    1b42:	31 1d       	adc	r19, r1
    1b44:	87 fd       	sbrc	r24, 7
    1b46:	91 60       	ori	r25, 0x01	; 1
    1b48:	00 96       	adiw	r24, 0x00	; 0
    1b4a:	61 05       	cpc	r22, r1
    1b4c:	71 05       	cpc	r23, r1
    1b4e:	39 f4       	brne	.+14     	; 0x1b5e <__ftoa_engine+0x28>
    1b50:	32 60       	ori	r19, 0x02	; 2
    1b52:	2e 5f       	subi	r18, 0xFE	; 254
    1b54:	3d 93       	st	X+, r19
    1b56:	30 e3       	ldi	r19, 0x30	; 48
    1b58:	2a 95       	dec	r18
    1b5a:	e1 f7       	brne	.-8      	; 0x1b54 <__ftoa_engine+0x1e>
    1b5c:	08 95       	ret
    1b5e:	9f 3f       	cpi	r25, 0xFF	; 255
    1b60:	30 f0       	brcs	.+12     	; 0x1b6e <__ftoa_engine+0x38>
    1b62:	80 38       	cpi	r24, 0x80	; 128
    1b64:	71 05       	cpc	r23, r1
    1b66:	61 05       	cpc	r22, r1
    1b68:	09 f0       	breq	.+2      	; 0x1b6c <__ftoa_engine+0x36>
    1b6a:	3c 5f       	subi	r19, 0xFC	; 252
    1b6c:	3c 5f       	subi	r19, 0xFC	; 252
    1b6e:	3d 93       	st	X+, r19
    1b70:	91 30       	cpi	r25, 0x01	; 1
    1b72:	08 f0       	brcs	.+2      	; 0x1b76 <__ftoa_engine+0x40>
    1b74:	80 68       	ori	r24, 0x80	; 128
    1b76:	91 1d       	adc	r25, r1
    1b78:	df 93       	push	r29
    1b7a:	cf 93       	push	r28
    1b7c:	1f 93       	push	r17
    1b7e:	0f 93       	push	r16
    1b80:	ff 92       	push	r15
    1b82:	ef 92       	push	r14
    1b84:	19 2f       	mov	r17, r25
    1b86:	98 7f       	andi	r25, 0xF8	; 248
    1b88:	96 95       	lsr	r25
    1b8a:	e9 2f       	mov	r30, r25
    1b8c:	96 95       	lsr	r25
    1b8e:	96 95       	lsr	r25
    1b90:	e9 0f       	add	r30, r25
    1b92:	ff 27       	eor	r31, r31
    1b94:	e0 58       	subi	r30, 0x80	; 128
    1b96:	fe 4f       	sbci	r31, 0xFE	; 254
    1b98:	99 27       	eor	r25, r25
    1b9a:	33 27       	eor	r19, r19
    1b9c:	ee 24       	eor	r14, r14
    1b9e:	ff 24       	eor	r15, r15
    1ba0:	a7 01       	movw	r20, r14
    1ba2:	e7 01       	movw	r28, r14
    1ba4:	05 90       	lpm	r0, Z+
    1ba6:	08 94       	sec
    1ba8:	07 94       	ror	r0
    1baa:	28 f4       	brcc	.+10     	; 0x1bb6 <__ftoa_engine+0x80>
    1bac:	36 0f       	add	r19, r22
    1bae:	e7 1e       	adc	r14, r23
    1bb0:	f8 1e       	adc	r15, r24
    1bb2:	49 1f       	adc	r20, r25
    1bb4:	51 1d       	adc	r21, r1
    1bb6:	66 0f       	add	r22, r22
    1bb8:	77 1f       	adc	r23, r23
    1bba:	88 1f       	adc	r24, r24
    1bbc:	99 1f       	adc	r25, r25
    1bbe:	06 94       	lsr	r0
    1bc0:	a1 f7       	brne	.-24     	; 0x1baa <__ftoa_engine+0x74>
    1bc2:	05 90       	lpm	r0, Z+
    1bc4:	07 94       	ror	r0
    1bc6:	28 f4       	brcc	.+10     	; 0x1bd2 <__ftoa_engine+0x9c>
    1bc8:	e7 0e       	add	r14, r23
    1bca:	f8 1e       	adc	r15, r24
    1bcc:	49 1f       	adc	r20, r25
    1bce:	56 1f       	adc	r21, r22
    1bd0:	c1 1d       	adc	r28, r1
    1bd2:	77 0f       	add	r23, r23
    1bd4:	88 1f       	adc	r24, r24
    1bd6:	99 1f       	adc	r25, r25
    1bd8:	66 1f       	adc	r22, r22
    1bda:	06 94       	lsr	r0
    1bdc:	a1 f7       	brne	.-24     	; 0x1bc6 <__ftoa_engine+0x90>
    1bde:	05 90       	lpm	r0, Z+
    1be0:	07 94       	ror	r0
    1be2:	28 f4       	brcc	.+10     	; 0x1bee <__ftoa_engine+0xb8>
    1be4:	f8 0e       	add	r15, r24
    1be6:	49 1f       	adc	r20, r25
    1be8:	56 1f       	adc	r21, r22
    1bea:	c7 1f       	adc	r28, r23
    1bec:	d1 1d       	adc	r29, r1
    1bee:	88 0f       	add	r24, r24
    1bf0:	99 1f       	adc	r25, r25
    1bf2:	66 1f       	adc	r22, r22
    1bf4:	77 1f       	adc	r23, r23
    1bf6:	06 94       	lsr	r0
    1bf8:	a1 f7       	brne	.-24     	; 0x1be2 <__ftoa_engine+0xac>
    1bfa:	05 90       	lpm	r0, Z+
    1bfc:	07 94       	ror	r0
    1bfe:	20 f4       	brcc	.+8      	; 0x1c08 <__ftoa_engine+0xd2>
    1c00:	49 0f       	add	r20, r25
    1c02:	56 1f       	adc	r21, r22
    1c04:	c7 1f       	adc	r28, r23
    1c06:	d8 1f       	adc	r29, r24
    1c08:	99 0f       	add	r25, r25
    1c0a:	66 1f       	adc	r22, r22
    1c0c:	77 1f       	adc	r23, r23
    1c0e:	88 1f       	adc	r24, r24
    1c10:	06 94       	lsr	r0
    1c12:	a9 f7       	brne	.-22     	; 0x1bfe <__ftoa_engine+0xc8>
    1c14:	84 91       	lpm	r24, Z
    1c16:	10 95       	com	r17
    1c18:	17 70       	andi	r17, 0x07	; 7
    1c1a:	41 f0       	breq	.+16     	; 0x1c2c <__ftoa_engine+0xf6>
    1c1c:	d6 95       	lsr	r29
    1c1e:	c7 95       	ror	r28
    1c20:	57 95       	ror	r21
    1c22:	47 95       	ror	r20
    1c24:	f7 94       	ror	r15
    1c26:	e7 94       	ror	r14
    1c28:	1a 95       	dec	r17
    1c2a:	c1 f7       	brne	.-16     	; 0x1c1c <__ftoa_engine+0xe6>
    1c2c:	e6 e2       	ldi	r30, 0x26	; 38
    1c2e:	f1 e0       	ldi	r31, 0x01	; 1
    1c30:	68 94       	set
    1c32:	15 90       	lpm	r1, Z+
    1c34:	15 91       	lpm	r17, Z+
    1c36:	35 91       	lpm	r19, Z+
    1c38:	65 91       	lpm	r22, Z+
    1c3a:	95 91       	lpm	r25, Z+
    1c3c:	05 90       	lpm	r0, Z+
    1c3e:	7f e2       	ldi	r23, 0x2F	; 47
    1c40:	73 95       	inc	r23
    1c42:	e1 18       	sub	r14, r1
    1c44:	f1 0a       	sbc	r15, r17
    1c46:	43 0b       	sbc	r20, r19
    1c48:	56 0b       	sbc	r21, r22
    1c4a:	c9 0b       	sbc	r28, r25
    1c4c:	d0 09       	sbc	r29, r0
    1c4e:	c0 f7       	brcc	.-16     	; 0x1c40 <__ftoa_engine+0x10a>
    1c50:	e1 0c       	add	r14, r1
    1c52:	f1 1e       	adc	r15, r17
    1c54:	43 1f       	adc	r20, r19
    1c56:	56 1f       	adc	r21, r22
    1c58:	c9 1f       	adc	r28, r25
    1c5a:	d0 1d       	adc	r29, r0
    1c5c:	7e f4       	brtc	.+30     	; 0x1c7c <__ftoa_engine+0x146>
    1c5e:	70 33       	cpi	r23, 0x30	; 48
    1c60:	11 f4       	brne	.+4      	; 0x1c66 <__ftoa_engine+0x130>
    1c62:	8a 95       	dec	r24
    1c64:	e6 cf       	rjmp	.-52     	; 0x1c32 <__ftoa_engine+0xfc>
    1c66:	e8 94       	clt
    1c68:	01 50       	subi	r16, 0x01	; 1
    1c6a:	30 f0       	brcs	.+12     	; 0x1c78 <__ftoa_engine+0x142>
    1c6c:	08 0f       	add	r16, r24
    1c6e:	0a f4       	brpl	.+2      	; 0x1c72 <__ftoa_engine+0x13c>
    1c70:	00 27       	eor	r16, r16
    1c72:	02 17       	cp	r16, r18
    1c74:	08 f4       	brcc	.+2      	; 0x1c78 <__ftoa_engine+0x142>
    1c76:	20 2f       	mov	r18, r16
    1c78:	23 95       	inc	r18
    1c7a:	02 2f       	mov	r16, r18
    1c7c:	7a 33       	cpi	r23, 0x3A	; 58
    1c7e:	28 f0       	brcs	.+10     	; 0x1c8a <__ftoa_engine+0x154>
    1c80:	79 e3       	ldi	r23, 0x39	; 57
    1c82:	7d 93       	st	X+, r23
    1c84:	2a 95       	dec	r18
    1c86:	e9 f7       	brne	.-6      	; 0x1c82 <__ftoa_engine+0x14c>
    1c88:	10 c0       	rjmp	.+32     	; 0x1caa <__ftoa_engine+0x174>
    1c8a:	7d 93       	st	X+, r23
    1c8c:	2a 95       	dec	r18
    1c8e:	89 f6       	brne	.-94     	; 0x1c32 <__ftoa_engine+0xfc>
    1c90:	06 94       	lsr	r0
    1c92:	97 95       	ror	r25
    1c94:	67 95       	ror	r22
    1c96:	37 95       	ror	r19
    1c98:	17 95       	ror	r17
    1c9a:	17 94       	ror	r1
    1c9c:	e1 18       	sub	r14, r1
    1c9e:	f1 0a       	sbc	r15, r17
    1ca0:	43 0b       	sbc	r20, r19
    1ca2:	56 0b       	sbc	r21, r22
    1ca4:	c9 0b       	sbc	r28, r25
    1ca6:	d0 09       	sbc	r29, r0
    1ca8:	98 f0       	brcs	.+38     	; 0x1cd0 <__ftoa_engine+0x19a>
    1caa:	23 95       	inc	r18
    1cac:	7e 91       	ld	r23, -X
    1cae:	73 95       	inc	r23
    1cb0:	7a 33       	cpi	r23, 0x3A	; 58
    1cb2:	08 f0       	brcs	.+2      	; 0x1cb6 <__ftoa_engine+0x180>
    1cb4:	70 e3       	ldi	r23, 0x30	; 48
    1cb6:	7c 93       	st	X, r23
    1cb8:	20 13       	cpse	r18, r16
    1cba:	b8 f7       	brcc	.-18     	; 0x1caa <__ftoa_engine+0x174>
    1cbc:	7e 91       	ld	r23, -X
    1cbe:	70 61       	ori	r23, 0x10	; 16
    1cc0:	7d 93       	st	X+, r23
    1cc2:	30 f0       	brcs	.+12     	; 0x1cd0 <__ftoa_engine+0x19a>
    1cc4:	83 95       	inc	r24
    1cc6:	71 e3       	ldi	r23, 0x31	; 49
    1cc8:	7d 93       	st	X+, r23
    1cca:	70 e3       	ldi	r23, 0x30	; 48
    1ccc:	2a 95       	dec	r18
    1cce:	e1 f7       	brne	.-8      	; 0x1cc8 <__ftoa_engine+0x192>
    1cd0:	11 24       	eor	r1, r1
    1cd2:	ef 90       	pop	r14
    1cd4:	ff 90       	pop	r15
    1cd6:	0f 91       	pop	r16
    1cd8:	1f 91       	pop	r17
    1cda:	cf 91       	pop	r28
    1cdc:	df 91       	pop	r29
    1cde:	99 27       	eor	r25, r25
    1ce0:	87 fd       	sbrc	r24, 7
    1ce2:	90 95       	com	r25
    1ce4:	08 95       	ret

00001ce6 <strnlen_P>:
    1ce6:	fc 01       	movw	r30, r24
    1ce8:	05 90       	lpm	r0, Z+
    1cea:	61 50       	subi	r22, 0x01	; 1
    1cec:	70 40       	sbci	r23, 0x00	; 0
    1cee:	01 10       	cpse	r0, r1
    1cf0:	d8 f7       	brcc	.-10     	; 0x1ce8 <strnlen_P+0x2>
    1cf2:	80 95       	com	r24
    1cf4:	90 95       	com	r25
    1cf6:	8e 0f       	add	r24, r30
    1cf8:	9f 1f       	adc	r25, r31
    1cfa:	08 95       	ret

00001cfc <strnlen>:
    1cfc:	fc 01       	movw	r30, r24
    1cfe:	61 50       	subi	r22, 0x01	; 1
    1d00:	70 40       	sbci	r23, 0x00	; 0
    1d02:	01 90       	ld	r0, Z+
    1d04:	01 10       	cpse	r0, r1
    1d06:	d8 f7       	brcc	.-10     	; 0x1cfe <strnlen+0x2>
    1d08:	80 95       	com	r24
    1d0a:	90 95       	com	r25
    1d0c:	8e 0f       	add	r24, r30
    1d0e:	9f 1f       	adc	r25, r31
    1d10:	08 95       	ret

00001d12 <fputc>:
    1d12:	0f 93       	push	r16
    1d14:	1f 93       	push	r17
    1d16:	cf 93       	push	r28
    1d18:	df 93       	push	r29
    1d1a:	fb 01       	movw	r30, r22
    1d1c:	23 81       	ldd	r18, Z+3	; 0x03
    1d1e:	21 fd       	sbrc	r18, 1
    1d20:	03 c0       	rjmp	.+6      	; 0x1d28 <fputc+0x16>
    1d22:	8f ef       	ldi	r24, 0xFF	; 255
    1d24:	9f ef       	ldi	r25, 0xFF	; 255
    1d26:	2c c0       	rjmp	.+88     	; 0x1d80 <fputc+0x6e>
    1d28:	22 ff       	sbrs	r18, 2
    1d2a:	16 c0       	rjmp	.+44     	; 0x1d58 <fputc+0x46>
    1d2c:	46 81       	ldd	r20, Z+6	; 0x06
    1d2e:	57 81       	ldd	r21, Z+7	; 0x07
    1d30:	24 81       	ldd	r18, Z+4	; 0x04
    1d32:	35 81       	ldd	r19, Z+5	; 0x05
    1d34:	42 17       	cp	r20, r18
    1d36:	53 07       	cpc	r21, r19
    1d38:	44 f4       	brge	.+16     	; 0x1d4a <fputc+0x38>
    1d3a:	a0 81       	ld	r26, Z
    1d3c:	b1 81       	ldd	r27, Z+1	; 0x01
    1d3e:	9d 01       	movw	r18, r26
    1d40:	2f 5f       	subi	r18, 0xFF	; 255
    1d42:	3f 4f       	sbci	r19, 0xFF	; 255
    1d44:	31 83       	std	Z+1, r19	; 0x01
    1d46:	20 83       	st	Z, r18
    1d48:	8c 93       	st	X, r24
    1d4a:	26 81       	ldd	r18, Z+6	; 0x06
    1d4c:	37 81       	ldd	r19, Z+7	; 0x07
    1d4e:	2f 5f       	subi	r18, 0xFF	; 255
    1d50:	3f 4f       	sbci	r19, 0xFF	; 255
    1d52:	37 83       	std	Z+7, r19	; 0x07
    1d54:	26 83       	std	Z+6, r18	; 0x06
    1d56:	14 c0       	rjmp	.+40     	; 0x1d80 <fputc+0x6e>
    1d58:	8b 01       	movw	r16, r22
    1d5a:	ec 01       	movw	r28, r24
    1d5c:	fb 01       	movw	r30, r22
    1d5e:	00 84       	ldd	r0, Z+8	; 0x08
    1d60:	f1 85       	ldd	r31, Z+9	; 0x09
    1d62:	e0 2d       	mov	r30, r0
    1d64:	09 95       	icall
    1d66:	89 2b       	or	r24, r25
    1d68:	e1 f6       	brne	.-72     	; 0x1d22 <fputc+0x10>
    1d6a:	d8 01       	movw	r26, r16
    1d6c:	16 96       	adiw	r26, 0x06	; 6
    1d6e:	8d 91       	ld	r24, X+
    1d70:	9c 91       	ld	r25, X
    1d72:	17 97       	sbiw	r26, 0x07	; 7
    1d74:	01 96       	adiw	r24, 0x01	; 1
    1d76:	17 96       	adiw	r26, 0x07	; 7
    1d78:	9c 93       	st	X, r25
    1d7a:	8e 93       	st	-X, r24
    1d7c:	16 97       	sbiw	r26, 0x06	; 6
    1d7e:	ce 01       	movw	r24, r28
    1d80:	df 91       	pop	r29
    1d82:	cf 91       	pop	r28
    1d84:	1f 91       	pop	r17
    1d86:	0f 91       	pop	r16
    1d88:	08 95       	ret

00001d8a <printf>:
    1d8a:	a0 e0       	ldi	r26, 0x00	; 0
    1d8c:	b0 e0       	ldi	r27, 0x00	; 0
    1d8e:	eb ec       	ldi	r30, 0xCB	; 203
    1d90:	fe e0       	ldi	r31, 0x0E	; 14
    1d92:	0c 94 74 0d 	jmp	0x1ae8	; 0x1ae8 <__prologue_saves__+0x20>
    1d96:	ae 01       	movw	r20, r28
    1d98:	4b 5f       	subi	r20, 0xFB	; 251
    1d9a:	5f 4f       	sbci	r21, 0xFF	; 255
    1d9c:	fa 01       	movw	r30, r20
    1d9e:	61 91       	ld	r22, Z+
    1da0:	71 91       	ld	r23, Z+
    1da2:	af 01       	movw	r20, r30
    1da4:	80 91 9a 03 	lds	r24, 0x039A	; 0x80039a <__iob+0x2>
    1da8:	90 91 9b 03 	lds	r25, 0x039B	; 0x80039b <__iob+0x3>
    1dac:	0e 94 e1 09 	call	0x13c2	; 0x13c2 <vfprintf>
    1db0:	e2 e0       	ldi	r30, 0x02	; 2
    1db2:	0c 94 90 0d 	jmp	0x1b20	; 0x1b20 <__epilogue_restores__+0x20>

00001db6 <sprintf>:
    1db6:	ae e0       	ldi	r26, 0x0E	; 14
    1db8:	b0 e0       	ldi	r27, 0x00	; 0
    1dba:	e1 ee       	ldi	r30, 0xE1	; 225
    1dbc:	fe e0       	ldi	r31, 0x0E	; 14
    1dbe:	0c 94 72 0d 	jmp	0x1ae4	; 0x1ae4 <__prologue_saves__+0x1c>
    1dc2:	0d 89       	ldd	r16, Y+21	; 0x15
    1dc4:	1e 89       	ldd	r17, Y+22	; 0x16
    1dc6:	86 e0       	ldi	r24, 0x06	; 6
    1dc8:	8c 83       	std	Y+4, r24	; 0x04
    1dca:	1a 83       	std	Y+2, r17	; 0x02
    1dcc:	09 83       	std	Y+1, r16	; 0x01
    1dce:	8f ef       	ldi	r24, 0xFF	; 255
    1dd0:	9f e7       	ldi	r25, 0x7F	; 127
    1dd2:	9e 83       	std	Y+6, r25	; 0x06
    1dd4:	8d 83       	std	Y+5, r24	; 0x05
    1dd6:	ae 01       	movw	r20, r28
    1dd8:	47 5e       	subi	r20, 0xE7	; 231
    1dda:	5f 4f       	sbci	r21, 0xFF	; 255
    1ddc:	6f 89       	ldd	r22, Y+23	; 0x17
    1dde:	78 8d       	ldd	r23, Y+24	; 0x18
    1de0:	ce 01       	movw	r24, r28
    1de2:	01 96       	adiw	r24, 0x01	; 1
    1de4:	0e 94 e1 09 	call	0x13c2	; 0x13c2 <vfprintf>
    1de8:	ef 81       	ldd	r30, Y+7	; 0x07
    1dea:	f8 85       	ldd	r31, Y+8	; 0x08
    1dec:	e0 0f       	add	r30, r16
    1dee:	f1 1f       	adc	r31, r17
    1df0:	10 82       	st	Z, r1
    1df2:	2e 96       	adiw	r28, 0x0e	; 14
    1df4:	e4 e0       	ldi	r30, 0x04	; 4
    1df6:	0c 94 8e 0d 	jmp	0x1b1c	; 0x1b1c <__epilogue_restores__+0x1c>

00001dfa <__ultoa_invert>:
    1dfa:	fa 01       	movw	r30, r20
    1dfc:	aa 27       	eor	r26, r26
    1dfe:	28 30       	cpi	r18, 0x08	; 8
    1e00:	51 f1       	breq	.+84     	; 0x1e56 <__ultoa_invert+0x5c>
    1e02:	20 31       	cpi	r18, 0x10	; 16
    1e04:	81 f1       	breq	.+96     	; 0x1e66 <__ultoa_invert+0x6c>
    1e06:	e8 94       	clt
    1e08:	6f 93       	push	r22
    1e0a:	6e 7f       	andi	r22, 0xFE	; 254
    1e0c:	6e 5f       	subi	r22, 0xFE	; 254
    1e0e:	7f 4f       	sbci	r23, 0xFF	; 255
    1e10:	8f 4f       	sbci	r24, 0xFF	; 255
    1e12:	9f 4f       	sbci	r25, 0xFF	; 255
    1e14:	af 4f       	sbci	r26, 0xFF	; 255
    1e16:	b1 e0       	ldi	r27, 0x01	; 1
    1e18:	3e d0       	rcall	.+124    	; 0x1e96 <__ultoa_invert+0x9c>
    1e1a:	b4 e0       	ldi	r27, 0x04	; 4
    1e1c:	3c d0       	rcall	.+120    	; 0x1e96 <__ultoa_invert+0x9c>
    1e1e:	67 0f       	add	r22, r23
    1e20:	78 1f       	adc	r23, r24
    1e22:	89 1f       	adc	r24, r25
    1e24:	9a 1f       	adc	r25, r26
    1e26:	a1 1d       	adc	r26, r1
    1e28:	68 0f       	add	r22, r24
    1e2a:	79 1f       	adc	r23, r25
    1e2c:	8a 1f       	adc	r24, r26
    1e2e:	91 1d       	adc	r25, r1
    1e30:	a1 1d       	adc	r26, r1
    1e32:	6a 0f       	add	r22, r26
    1e34:	71 1d       	adc	r23, r1
    1e36:	81 1d       	adc	r24, r1
    1e38:	91 1d       	adc	r25, r1
    1e3a:	a1 1d       	adc	r26, r1
    1e3c:	20 d0       	rcall	.+64     	; 0x1e7e <__ultoa_invert+0x84>
    1e3e:	09 f4       	brne	.+2      	; 0x1e42 <__ultoa_invert+0x48>
    1e40:	68 94       	set
    1e42:	3f 91       	pop	r19
    1e44:	2a e0       	ldi	r18, 0x0A	; 10
    1e46:	26 9f       	mul	r18, r22
    1e48:	11 24       	eor	r1, r1
    1e4a:	30 19       	sub	r19, r0
    1e4c:	30 5d       	subi	r19, 0xD0	; 208
    1e4e:	31 93       	st	Z+, r19
    1e50:	de f6       	brtc	.-74     	; 0x1e08 <__ultoa_invert+0xe>
    1e52:	cf 01       	movw	r24, r30
    1e54:	08 95       	ret
    1e56:	46 2f       	mov	r20, r22
    1e58:	47 70       	andi	r20, 0x07	; 7
    1e5a:	40 5d       	subi	r20, 0xD0	; 208
    1e5c:	41 93       	st	Z+, r20
    1e5e:	b3 e0       	ldi	r27, 0x03	; 3
    1e60:	0f d0       	rcall	.+30     	; 0x1e80 <__ultoa_invert+0x86>
    1e62:	c9 f7       	brne	.-14     	; 0x1e56 <__ultoa_invert+0x5c>
    1e64:	f6 cf       	rjmp	.-20     	; 0x1e52 <__ultoa_invert+0x58>
    1e66:	46 2f       	mov	r20, r22
    1e68:	4f 70       	andi	r20, 0x0F	; 15
    1e6a:	40 5d       	subi	r20, 0xD0	; 208
    1e6c:	4a 33       	cpi	r20, 0x3A	; 58
    1e6e:	18 f0       	brcs	.+6      	; 0x1e76 <__ultoa_invert+0x7c>
    1e70:	49 5d       	subi	r20, 0xD9	; 217
    1e72:	31 fd       	sbrc	r19, 1
    1e74:	40 52       	subi	r20, 0x20	; 32
    1e76:	41 93       	st	Z+, r20
    1e78:	02 d0       	rcall	.+4      	; 0x1e7e <__ultoa_invert+0x84>
    1e7a:	a9 f7       	brne	.-22     	; 0x1e66 <__ultoa_invert+0x6c>
    1e7c:	ea cf       	rjmp	.-44     	; 0x1e52 <__ultoa_invert+0x58>
    1e7e:	b4 e0       	ldi	r27, 0x04	; 4
    1e80:	a6 95       	lsr	r26
    1e82:	97 95       	ror	r25
    1e84:	87 95       	ror	r24
    1e86:	77 95       	ror	r23
    1e88:	67 95       	ror	r22
    1e8a:	ba 95       	dec	r27
    1e8c:	c9 f7       	brne	.-14     	; 0x1e80 <__ultoa_invert+0x86>
    1e8e:	00 97       	sbiw	r24, 0x00	; 0
    1e90:	61 05       	cpc	r22, r1
    1e92:	71 05       	cpc	r23, r1
    1e94:	08 95       	ret
    1e96:	9b 01       	movw	r18, r22
    1e98:	ac 01       	movw	r20, r24
    1e9a:	0a 2e       	mov	r0, r26
    1e9c:	06 94       	lsr	r0
    1e9e:	57 95       	ror	r21
    1ea0:	47 95       	ror	r20
    1ea2:	37 95       	ror	r19
    1ea4:	27 95       	ror	r18
    1ea6:	ba 95       	dec	r27
    1ea8:	c9 f7       	brne	.-14     	; 0x1e9c <__ultoa_invert+0xa2>
    1eaa:	62 0f       	add	r22, r18
    1eac:	73 1f       	adc	r23, r19
    1eae:	84 1f       	adc	r24, r20
    1eb0:	95 1f       	adc	r25, r21
    1eb2:	a0 1d       	adc	r26, r0
    1eb4:	08 95       	ret

00001eb6 <_exit>:
    1eb6:	f8 94       	cli

00001eb8 <__stop_program>:
    1eb8:	ff cf       	rjmp	.-2      	; 0x1eb8 <__stop_program>
