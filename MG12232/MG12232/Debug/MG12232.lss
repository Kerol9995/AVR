
MG12232.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001ce  00800100  00001898  0000192c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001898  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000068  008002ce  008002ce  00001afa  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001afa  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001b58  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000120  00000000  00000000  00001b98  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001ce9  00000000  00000000  00001cb8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b41  00000000  00000000  000039a1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000d72  00000000  00000000  000044e2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002ac  00000000  00000000  00005254  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000059f  00000000  00000000  00005500  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000154f  00000000  00000000  00005a9f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d0  00000000  00000000  00006fee  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 10 01 	jmp	0x220	; 0x220 <__ctors_end>
       4:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
       8:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
       c:	0c 94 65 05 	jmp	0xaca	; 0xaca <__vector_3>
      10:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
      14:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
      18:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
      1c:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
      20:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
      24:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
      28:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
      2c:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
      30:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
      34:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
      38:	0c 94 03 05 	jmp	0xa06	; 0xa06 <__vector_14>
      3c:	0c 94 35 05 	jmp	0xa6a	; 0xa6a <__vector_15>
      40:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
      44:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
      48:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
      4c:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
      50:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
      54:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__vector_21>
      58:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
      5c:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
      60:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
      64:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
      68:	65 04       	cpc	r6, r5
      6a:	73 04       	cpc	r7, r3
      6c:	73 04       	cpc	r7, r3
      6e:	73 04       	cpc	r7, r3
      70:	73 04       	cpc	r7, r3
      72:	73 04       	cpc	r7, r3
      74:	73 04       	cpc	r7, r3
      76:	73 04       	cpc	r7, r3
      78:	73 04       	cpc	r7, r3
      7a:	73 04       	cpc	r7, r3
      7c:	73 04       	cpc	r7, r3
      7e:	6f 04       	cpc	r6, r15
      80:	73 04       	cpc	r7, r3
      82:	6a 04       	cpc	r6, r10
      84:	60 04       	cpc	r6, r0
      86:	73 04       	cpc	r7, r3
      88:	25 03       	mulsu	r18, r21
      8a:	2a 03       	fmul	r18, r18
      8c:	2f 03       	fmul	r18, r23
      8e:	34 03       	mulsu	r19, r20
      90:	39 03       	fmul	r19, r17
      92:	3e 03       	fmul	r19, r22
      94:	43 03       	mulsu	r20, r19
      96:	48 03       	fmul	r20, r16
      98:	4d 03       	fmul	r20, r21
      9a:	52 03       	mulsu	r21, r18
      9c:	73 04       	cpc	r7, r3
      9e:	73 04       	cpc	r7, r3
      a0:	73 04       	cpc	r7, r3
      a2:	57 03       	mulsu	r21, r23
      a4:	73 04       	cpc	r7, r3
      a6:	73 04       	cpc	r7, r3
      a8:	73 04       	cpc	r7, r3
      aa:	5c 03       	fmul	r21, r20
      ac:	61 03       	mulsu	r22, r17
      ae:	66 03       	mulsu	r22, r22
      b0:	6b 03       	fmul	r22, r19
      b2:	70 03       	mulsu	r23, r16
      b4:	75 03       	mulsu	r23, r21
      b6:	7a 03       	fmul	r23, r18
      b8:	7f 03       	fmul	r23, r23
      ba:	84 03       	fmuls	r16, r20
      bc:	89 03       	fmulsu	r16, r17
      be:	8e 03       	fmulsu	r16, r22
      c0:	93 03       	fmuls	r17, r19
      c2:	98 03       	fmulsu	r17, r16
      c4:	9d 03       	fmulsu	r17, r21
      c6:	a2 03       	fmuls	r18, r18
      c8:	a7 03       	fmuls	r18, r23
      ca:	ac 03       	fmulsu	r18, r20
      cc:	b1 03       	fmuls	r19, r17
      ce:	b6 03       	fmuls	r19, r22
      d0:	bb 03       	fmulsu	r19, r19
      d2:	c0 03       	fmuls	r20, r16
      d4:	c5 03       	fmuls	r20, r21
      d6:	ca 03       	fmulsu	r20, r18
      d8:	cf 03       	fmulsu	r20, r23
      da:	d4 03       	fmuls	r21, r20
      dc:	d9 03       	fmulsu	r21, r17
      de:	73 04       	cpc	r7, r3
      e0:	73 04       	cpc	r7, r3
      e2:	73 04       	cpc	r7, r3
      e4:	73 04       	cpc	r7, r3
      e6:	73 04       	cpc	r7, r3
      e8:	73 04       	cpc	r7, r3
      ea:	de 03       	fmulsu	r21, r22
      ec:	e3 03       	fmuls	r22, r19
      ee:	e8 03       	fmulsu	r22, r16
      f0:	ed 03       	fmulsu	r22, r21
      f2:	f2 03       	fmuls	r23, r18
      f4:	f7 03       	fmuls	r23, r23
      f6:	fc 03       	fmulsu	r23, r20
      f8:	01 04       	cpc	r0, r1
      fa:	06 04       	cpc	r0, r6
      fc:	0b 04       	cpc	r0, r11
      fe:	10 04       	cpc	r1, r0
     100:	15 04       	cpc	r1, r5
     102:	1a 04       	cpc	r1, r10
     104:	1f 04       	cpc	r1, r15
     106:	24 04       	cpc	r2, r4
     108:	29 04       	cpc	r2, r9
     10a:	2e 04       	cpc	r2, r14
     10c:	33 04       	cpc	r3, r3
     10e:	38 04       	cpc	r3, r8
     110:	3d 04       	cpc	r3, r13
     112:	42 04       	cpc	r4, r2
     114:	47 04       	cpc	r4, r7
     116:	4c 04       	cpc	r4, r12
     118:	51 04       	cpc	r5, r1
     11a:	56 04       	cpc	r5, r6
     11c:	5b 04       	cpc	r5, r11

0000011e <__trampolines_end>:
     11e:	6e 61       	ori	r22, 0x1E	; 30
     120:	6e 00       	.word	0x006e	; ????

00000122 <__c.2332>:
     122:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     132:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     142:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     152:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     162:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     172:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     182:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     192:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     1a2:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     1b2:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     1c2:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     1d2:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     1e2:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     1f2:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     202:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     212:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

00000220 <__ctors_end>:
     220:	11 24       	eor	r1, r1
     222:	1f be       	out	0x3f, r1	; 63
     224:	cf ef       	ldi	r28, 0xFF	; 255
     226:	d8 e0       	ldi	r29, 0x08	; 8
     228:	de bf       	out	0x3e, r29	; 62
     22a:	cd bf       	out	0x3d, r28	; 61

0000022c <__do_copy_data>:
     22c:	12 e0       	ldi	r17, 0x02	; 2
     22e:	a0 e0       	ldi	r26, 0x00	; 0
     230:	b1 e0       	ldi	r27, 0x01	; 1
     232:	e8 e9       	ldi	r30, 0x98	; 152
     234:	f8 e1       	ldi	r31, 0x18	; 24
     236:	02 c0       	rjmp	.+4      	; 0x23c <__do_copy_data+0x10>
     238:	05 90       	lpm	r0, Z+
     23a:	0d 92       	st	X+, r0
     23c:	ae 3c       	cpi	r26, 0xCE	; 206
     23e:	b1 07       	cpc	r27, r17
     240:	d9 f7       	brne	.-10     	; 0x238 <__do_copy_data+0xc>

00000242 <__do_clear_bss>:
     242:	23 e0       	ldi	r18, 0x03	; 3
     244:	ae ec       	ldi	r26, 0xCE	; 206
     246:	b2 e0       	ldi	r27, 0x02	; 2
     248:	01 c0       	rjmp	.+2      	; 0x24c <.do_clear_bss_start>

0000024a <.do_clear_bss_loop>:
     24a:	1d 92       	st	X+, r1

0000024c <.do_clear_bss_start>:
     24c:	a6 33       	cpi	r26, 0x36	; 54
     24e:	b2 07       	cpc	r27, r18
     250:	e1 f7       	brne	.-8      	; 0x24a <.do_clear_bss_loop>
     252:	0e 94 c9 01 	call	0x392	; 0x392 <main>
     256:	0c 94 4a 0c 	jmp	0x1894	; 0x1894 <_exit>

0000025a <__bad_interrupt>:
     25a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000025e <__vector_21>:
extern uint16_t adc_value;
//----------------------------------------
char high_adc=0,low_adc=0;
//----------------------------------------
ISR(ADC_vect)
{
     25e:	1f 92       	push	r1
     260:	0f 92       	push	r0
     262:	0f b6       	in	r0, 0x3f	; 63
     264:	0f 92       	push	r0
     266:	11 24       	eor	r1, r1
     268:	2f 93       	push	r18
     26a:	8f 93       	push	r24
     26c:	9f 93       	push	r25
	low_adc = ADCL;
     26e:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
     272:	80 93 ce 02 	sts	0x02CE, r24	; 0x8002ce <__data_end>
	high_adc = ADCH;//Верхняя часть регистра ADC должна быть считана последней, иначе не продолжится преобразование
     276:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
     27a:	20 93 cf 02 	sts	0x02CF, r18	; 0x8002cf <high_adc>
	adc_value = ((uint16_t)high_adc<<8)|low_adc;
     27e:	90 e0       	ldi	r25, 0x00	; 0
     280:	92 2b       	or	r25, r18
     282:	90 93 e1 02 	sts	0x02E1, r25	; 0x8002e1 <adc_value+0x1>
     286:	80 93 e0 02 	sts	0x02E0, r24	; 0x8002e0 <adc_value>
}
     28a:	9f 91       	pop	r25
     28c:	8f 91       	pop	r24
     28e:	2f 91       	pop	r18
     290:	0f 90       	pop	r0
     292:	0f be       	out	0x3f, r0	; 63
     294:	0f 90       	pop	r0
     296:	1f 90       	pop	r1
     298:	18 95       	reti

0000029a <adc_init>:

void adc_init(void)
{	
	ADCSRA |= (1<<ADEN) // Разрешение использования АЦП
     29a:	ea e7       	ldi	r30, 0x7A	; 122
     29c:	f0 e0       	ldi	r31, 0x00	; 0
     29e:	80 81       	ld	r24, Z
     2a0:	87 68       	ori	r24, 0x87	; 135
     2a2:	80 83       	st	Z, r24
// 	|(1<<ADSC)//Запуск преобразования
// 	|(1<<ADATE)//Непрерывный режим работы АЦП
// 	|(1<<ADIE)//Разрешение прерывания от АЦП
	|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);//Делитель 128 = 125 кГц
	ADMUX |= (1<<REFS0)|(1<<MUX1)|(1<<MUX0); // ИОН=AVcc, вход ADC3 |(1<<MUX1)|(1<<MUX0)
     2a4:	ec e7       	ldi	r30, 0x7C	; 124
     2a6:	f0 e0       	ldi	r31, 0x00	; 0
     2a8:	80 81       	ld	r24, Z
     2aa:	83 64       	ori	r24, 0x43	; 67
     2ac:	80 83       	st	Z, r24
     2ae:	08 95       	ret

000002b0 <adc_convert>:
}

unsigned int adc_convert (void)

{
	ADCSRA |= (1<<ADSC); //Начинаем преобразование
     2b0:	ea e7       	ldi	r30, 0x7A	; 122
     2b2:	f0 e0       	ldi	r31, 0x00	; 0
     2b4:	80 81       	ld	r24, Z
     2b6:	80 64       	ori	r24, 0x40	; 64
     2b8:	80 83       	st	Z, r24
	while((ADCSRA & (1<<ADSC))); //проверим закончилось ли аналого-цифровое преобразование
     2ba:	80 81       	ld	r24, Z
     2bc:	86 fd       	sbrc	r24, 6
     2be:	fd cf       	rjmp	.-6      	; 0x2ba <adc_convert+0xa>
	return (unsigned int) ADC;
     2c0:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
     2c4:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
     2c8:	08 95       	ret

000002ca <read_dht11_dat>:

	char dht11_dat[5];
	char dht11_in;

char read_dht11_dat()
{
     2ca:	27 e0       	ldi	r18, 0x07	; 7
     2cc:	30 e0       	ldi	r19, 0x00	; 0
	char i = 0;
	char result=0;
     2ce:	80 e0       	ldi	r24, 0x00	; 0
		while(!(PINC & (1<<(DHT11_PIN))))
		{}; // wait forever until analog input port 0 is '1' (NOTICE: PINC reads all the analog input ports
		//and _BV(X) is the macro operation which pull up position 'X' to '1' and the rest positions to '0'. it is equivalent to 1<
		_delay_us(30);
		if(PINC & (1<<(DHT11_PIN))) //if analog input port 0 is still '1' after 30 us
		result |=(1<<(7-i)); //this position is 1
     2d0:	61 e0       	ldi	r22, 0x01	; 1
     2d2:	70 e0       	ldi	r23, 0x00	; 0
{
	char i = 0;
	char result=0;
	for(i=0; i< 8; i++)
	{
		while(!(PINC & (1<<(DHT11_PIN))))
     2d4:	30 9b       	sbis	0x06, 0	; 6
     2d6:	fe cf       	rjmp	.-4      	; 0x2d4 <read_dht11_dat+0xa>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     2d8:	90 ea       	ldi	r25, 0xA0	; 160
     2da:	9a 95       	dec	r25
     2dc:	f1 f7       	brne	.-4      	; 0x2da <read_dht11_dat+0x10>
		{}; // wait forever until analog input port 0 is '1' (NOTICE: PINC reads all the analog input ports
		//and _BV(X) is the macro operation which pull up position 'X' to '1' and the rest positions to '0'. it is equivalent to 1<
		_delay_us(30);
		if(PINC & (1<<(DHT11_PIN))) //if analog input port 0 is still '1' after 30 us
     2de:	30 9b       	sbis	0x06, 0	; 6
     2e0:	08 c0       	rjmp	.+16     	; 0x2f2 <read_dht11_dat+0x28>
		result |=(1<<(7-i)); //this position is 1
     2e2:	ab 01       	movw	r20, r22
     2e4:	02 2e       	mov	r0, r18
     2e6:	02 c0       	rjmp	.+4      	; 0x2ec <read_dht11_dat+0x22>
     2e8:	44 0f       	add	r20, r20
     2ea:	55 1f       	adc	r21, r21
     2ec:	0a 94       	dec	r0
     2ee:	e2 f7       	brpl	.-8      	; 0x2e8 <read_dht11_dat+0x1e>
     2f0:	84 2b       	or	r24, r20
		while((PINC & (1<<(DHT11_PIN)))); // wait '1' finish
     2f2:	30 99       	sbic	0x06, 0	; 6
     2f4:	fe cf       	rjmp	.-4      	; 0x2f2 <read_dht11_dat+0x28>
     2f6:	21 50       	subi	r18, 0x01	; 1
     2f8:	31 09       	sbc	r19, r1
     2fa:	60 f7       	brcc	.-40     	; 0x2d4 <read_dht11_dat+0xa>
	}
	return result;
}
     2fc:	08 95       	ret

000002fe <dht11_start>:

void dht11_start()
{
     2fe:	0f 93       	push	r16
     300:	1f 93       	push	r17
     302:	cf 93       	push	r28
     304:	df 93       	push	r29
	dht11_dat[0]=0;
     306:	e5 ee       	ldi	r30, 0xE5	; 229
     308:	f2 e0       	ldi	r31, 0x02	; 2
     30a:	10 82       	st	Z, r1
	dht11_dat[2]=0;
     30c:	12 82       	std	Z+2, r1	; 0x02
	DDRC |= (1<<(DHT11_PIN));// start condition
     30e:	38 9a       	sbi	0x07, 0	; 7
	PORTC &= ~(1<<(DHT11_PIN)); // 1. pull-down i/o pin for 18ms
     310:	40 98       	cbi	0x08, 0	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     312:	2f ef       	ldi	r18, 0xFF	; 255
     314:	89 ef       	ldi	r24, 0xF9	; 249
     316:	90 e0       	ldi	r25, 0x00	; 0
     318:	21 50       	subi	r18, 0x01	; 1
     31a:	80 40       	sbci	r24, 0x00	; 0
     31c:	90 40       	sbci	r25, 0x00	; 0
     31e:	e1 f7       	brne	.-8      	; 0x318 <dht11_start+0x1a>
     320:	00 c0       	rjmp	.+0      	; 0x322 <dht11_start+0x24>
     322:	00 00       	nop
	_delay_ms(20);
	PORTC |= (1<<(DHT11_PIN)); // 2. pull-up i/o pin for 40ms
     324:	40 9a       	sbi	0x08, 0	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     326:	20 ea       	ldi	r18, 0xA0	; 160
     328:	2a 95       	dec	r18
     32a:	f1 f7       	brne	.-4      	; 0x328 <dht11_start+0x2a>
	_delay_us(30);
	DDRC &= ~(1<<(DHT11_PIN)); //let analog port 0 be input port
     32c:	38 98       	cbi	0x07, 0	; 7
     32e:	85 e0       	ldi	r24, 0x05	; 5
     330:	8a 95       	dec	r24
     332:	f1 f7       	brne	.-4      	; 0x330 <dht11_start+0x32>
     334:	00 00       	nop
	_delay_us(1);

	dht11_in = PINC & (1<<(DHT11_PIN)); // read only the input port 0
     336:	86 b1       	in	r24, 0x06	; 6
     338:	81 70       	andi	r24, 0x01	; 1
     33a:	80 93 ea 02 	sts	0x02EA, r24	; 0x8002ea <dht11_in>
	if (dht11_in)
     33e:	81 11       	cpse	r24, r1
     340:	1d c0       	rjmp	.+58     	; 0x37c <dht11_start+0x7e>
     342:	8f e3       	ldi	r24, 0x3F	; 63
     344:	91 e0       	ldi	r25, 0x01	; 1
     346:	01 97       	sbiw	r24, 0x01	; 1
     348:	f1 f7       	brne	.-4      	; 0x346 <dht11_start+0x48>
     34a:	00 c0       	rjmp	.+0      	; 0x34c <dht11_start+0x4e>
     34c:	00 00       	nop
		/*		Serial.println("dht11 start condition 1 not met"); //wait for DHT11 response signal:LOW*/
	}
	else
	{
		_delay_us(80);
		dht11_in = PINC & (1<<(DHT11_PIN)); //
     34e:	86 b1       	in	r24, 0x06	; 6
     350:	81 70       	andi	r24, 0x01	; 1
     352:	80 93 ea 02 	sts	0x02EA, r24	; 0x8002ea <dht11_in>
		if(!dht11_in)
     356:	88 23       	and	r24, r24
     358:	89 f0       	breq	.+34     	; 0x37c <dht11_start+0x7e>
     35a:	8f e3       	ldi	r24, 0x3F	; 63
     35c:	91 e0       	ldi	r25, 0x01	; 1
     35e:	01 97       	sbiw	r24, 0x01	; 1
     360:	f1 f7       	brne	.-4      	; 0x35e <dht11_start+0x60>
     362:	00 c0       	rjmp	.+0      	; 0x364 <dht11_start+0x66>
     364:	00 00       	nop
     366:	ef 01       	movw	r28, r30
     368:	0a ee       	ldi	r16, 0xEA	; 234
     36a:	12 e0       	ldi	r17, 0x02	; 2
		}
		else
		{
			_delay_us(80);// now ready for data reception
			for (int i=0; i<5; i++)
			{ dht11_dat[i] = read_dht11_dat();} //received 40 bits data. Details are described in datasheet
     36c:	0e 94 65 01 	call	0x2ca	; 0x2ca <read_dht11_dat>
     370:	89 93       	st	Y+, r24
			/*		Serial.println("dht11 start condition 2 not met"); //wait for second response signal:HIGH*/
		}
		else
		{
			_delay_us(80);// now ready for data reception
			for (int i=0; i<5; i++)
     372:	c0 17       	cp	r28, r16
     374:	d1 07       	cpc	r29, r17
     376:	d1 f7       	brne	.-12     	; 0x36c <dht11_start+0x6e>
			{ dht11_dat[i] = read_dht11_dat();} //received 40 bits data. Details are described in datasheet

			DDRC |= (1<<(DHT11_PIN)); //let analog port 0 be output port after all the data have been received
     378:	38 9a       	sbi	0x07, 0	; 7
			PORTC |= (1<<(DHT11_PIN)); //let the value of this port be '1' after all the data have been received
     37a:	40 9a       	sbi	0x08, 0	; 8
// 				number_write(H);
// 				number_write(h);
// 			}
		}
	}
}
     37c:	df 91       	pop	r29
     37e:	cf 91       	pop	r28
     380:	1f 91       	pop	r17
     382:	0f 91       	pop	r16
     384:	08 95       	ret

00000386 <dht11_temp>:

char dht11_temp(){
// 	dht11_start();
	return dht11_dat[2];
}
     386:	80 91 e7 02 	lds	r24, 0x02E7	; 0x8002e7 <dht11_dat+0x2>
     38a:	08 95       	ret

0000038c <dht11_humid>:

char dht11_humid(){
// 	dht11_start();
	return dht11_dat[0];
     38c:	80 91 e5 02 	lds	r24, 0x02E5	; 0x8002e5 <dht11_dat>
     390:	08 95       	ret

00000392 <main>:
// 	b++;
// }


int main(void)
{
     392:	cf 93       	push	r28
     394:	df 93       	push	r29
     396:	00 d0       	rcall	.+0      	; 0x398 <main+0x6>
     398:	cd b7       	in	r28, 0x3d	; 61
     39a:	de b7       	in	r29, 0x3e	; 62
	portbhistory=0xff;
     39c:	8f ef       	ldi	r24, 0xFF	; 255
     39e:	80 93 dd 02 	sts	0x02DD, r24	; 0x8002dd <portbhistory>
	adc_value=0;
     3a2:	10 92 e1 02 	sts	0x02E1, r1	; 0x8002e1 <adc_value+0x1>
     3a6:	10 92 e0 02 	sts	0x02E0, r1	; 0x8002e0 <adc_value>
// 	USART_ini(MYUBRR);
// 	timer0_init();
	mg12232_init();
     3aa:	0e 94 cb 02 	call	0x596	; 0x596 <mg12232_init>
	adc_init();
     3ae:	0e 94 4d 01 	call	0x29a	; 0x29a <adc_init>
	
// 	SW_UART_Enable();

	uint8_t co2_d = 0;
     3b2:	19 82       	std	Y+1, r1	; 0x01
	usartsoft_init();
     3b4:	0e 94 c1 05 	call	0xb82	; 0xb82 <usartsoft_init>
// 		}
// 		
		adc_value=adc_convert();
		Cppm=(adc_value-82)*15.167236;			//4.854*3.125
		dht11_start();
		sprintf(str1,"T=%d  H=%d ADC=%.f \r\n", dht11_temp()+3, dht11_humid(), Cppm);
     3b8:	0f 2e       	mov	r0, r31
     3ba:	fb e9       	ldi	r31, 0x9B	; 155
     3bc:	6f 2e       	mov	r6, r31
     3be:	f2 e0       	ldi	r31, 0x02	; 2
     3c0:	7f 2e       	mov	r7, r31
     3c2:	f0 2d       	mov	r31, r0
     3c4:	0f 2e       	mov	r0, r31
     3c6:	fe ee       	ldi	r31, 0xEE	; 238
     3c8:	8f 2e       	mov	r8, r31
     3ca:	f2 e0       	ldi	r31, 0x02	; 2
     3cc:	9f 2e       	mov	r9, r31
     3ce:	f0 2d       	mov	r31, r0
     3d0:	0f 2e       	mov	r0, r31
     3d2:	f9 e0       	ldi	r31, 0x09	; 9
     3d4:	af 2e       	mov	r10, r31
     3d6:	f1 e0       	ldi	r31, 0x01	; 1
     3d8:	bf 2e       	mov	r11, r31
     3da:	f0 2d       	mov	r31, r0
     3dc:	0f 2e       	mov	r0, r31
     3de:	f9 ed       	ldi	r31, 0xD9	; 217
     3e0:	cf 2e       	mov	r12, r31
     3e2:	f2 e0       	ldi	r31, 0x02	; 2
     3e4:	df 2e       	mov	r13, r31
     3e6:	f0 2d       	mov	r31, r0
		sei();
		for (a=0;a<9;a++)usartsoft_transmit(CO2_read[a]);
		for (a=0;a<9;a++)CO2_data[a]=usartsoft_recieve(&co2_d);
		
// 		usartsoft_transmit(co2_d);
		sprintf(str1," %x %x %x %x %x %x %x %x %x ", CO2_data[0], CO2_data[1], CO2_data[2], CO2_data[3], CO2_data[4], CO2_data[5], CO2_data[6], CO2_data[7], CO2_data[8]);
     3e8:	0f 2e       	mov	r0, r31
     3ea:	f0 ed       	ldi	r31, 0xD0	; 208
     3ec:	ef 2e       	mov	r14, r31
     3ee:	f2 e0       	ldi	r31, 0x02	; 2
     3f0:	ff 2e       	mov	r15, r31
     3f2:	f0 2d       	mov	r31, r0
     3f4:	0f 2e       	mov	r0, r31
     3f6:	f1 eb       	ldi	r31, 0xB1	; 177
     3f8:	2f 2e       	mov	r2, r31
     3fa:	f2 e0       	ldi	r31, 0x02	; 2
     3fc:	3f 2e       	mov	r3, r31
     3fe:	f0 2d       	mov	r31, r0
// 		sprintf(str1,"CRC: 0x%02X\r\n", Dev_ID[i-1][7]);
// 		for (a=0;a<strlen(str1);a++)USART_Transmit(str1[a]);
// 	}
    while (1) 
    {
		sei();
     400:	78 94       	sei
		clear_lcd();
     402:	0e 94 b3 02 	call	0x566	; 0x566 <clear_lcd>
// // 				sprintf(str1,"Raw t: 0x%04X; t: %c%.3f\r\n", raw_temper, c, t);
// // 				for (a=0;a<strlen(str1);a++)USART_Transmit(str1[a]);
// 			}			
// 		}
// 		
		adc_value=adc_convert();
     406:	0e 94 58 01 	call	0x2b0	; 0x2b0 <adc_convert>
     40a:	90 93 e1 02 	sts	0x02E1, r25	; 0x8002e1 <adc_value+0x1>
     40e:	80 93 e0 02 	sts	0x02E0, r24	; 0x8002e0 <adc_value>
		Cppm=(adc_value-82)*15.167236;			//4.854*3.125
     412:	bc 01       	movw	r22, r24
     414:	62 55       	subi	r22, 0x52	; 82
     416:	71 09       	sbc	r23, r1
     418:	80 e0       	ldi	r24, 0x00	; 0
     41a:	90 e0       	ldi	r25, 0x00	; 0
     41c:	0e 94 eb 05 	call	0xbd6	; 0xbd6 <__floatunsisf>
     420:	20 e0       	ldi	r18, 0x00	; 0
     422:	3d ea       	ldi	r19, 0xAD	; 173
     424:	42 e7       	ldi	r20, 0x72	; 114
     426:	51 e4       	ldi	r21, 0x41	; 65
     428:	0e 94 79 06 	call	0xcf2	; 0xcf2 <__mulsf3>
     42c:	60 93 d9 02 	sts	0x02D9, r22	; 0x8002d9 <Cppm>
     430:	70 93 da 02 	sts	0x02DA, r23	; 0x8002da <Cppm+0x1>
     434:	80 93 db 02 	sts	0x02DB, r24	; 0x8002db <Cppm+0x2>
     438:	90 93 dc 02 	sts	0x02DC, r25	; 0x8002dc <Cppm+0x3>
		dht11_start();
     43c:	0e 94 7f 01 	call	0x2fe	; 0x2fe <dht11_start>
		sprintf(str1,"T=%d  H=%d ADC=%.f \r\n", dht11_temp()+3, dht11_humid(), Cppm);
     440:	00 91 d9 02 	lds	r16, 0x02D9	; 0x8002d9 <Cppm>
     444:	50 90 da 02 	lds	r5, 0x02DA	; 0x8002da <Cppm+0x1>
     448:	40 90 db 02 	lds	r4, 0x02DB	; 0x8002db <Cppm+0x2>
     44c:	10 91 dc 02 	lds	r17, 0x02DC	; 0x8002dc <Cppm+0x3>
     450:	0e 94 c6 01 	call	0x38c	; 0x38c <dht11_humid>
     454:	8a 83       	std	Y+2, r24	; 0x02
     456:	0e 94 c3 01 	call	0x386	; 0x386 <dht11_temp>
     45a:	1f 93       	push	r17
     45c:	4f 92       	push	r4
     45e:	5f 92       	push	r5
     460:	0f 93       	push	r16
     462:	1f 92       	push	r1
     464:	2a 81       	ldd	r18, Y+2	; 0x02
     466:	2f 93       	push	r18
     468:	90 e0       	ldi	r25, 0x00	; 0
     46a:	03 96       	adiw	r24, 0x03	; 3
     46c:	9f 93       	push	r25
     46e:	8f 93       	push	r24
     470:	7f 92       	push	r7
     472:	6f 92       	push	r6
     474:	9f 92       	push	r9
     476:	8f 92       	push	r8
     478:	0e 94 ca 0b 	call	0x1794	; 0x1794 <sprintf>
		mg12232_string_write(str1, 0);
     47c:	60 e0       	ldi	r22, 0x00	; 0
     47e:	c4 01       	movw	r24, r8
     480:	0e 94 74 04 	call	0x8e8	; 0x8e8 <mg12232_string_write>
// 		if (usartsoft_recieve(&co2_d)>=0)
// 		{
// 			usartsoft_transmit(co2_d);
// 		}
// 		uint8_t CO2_read[9]= {65, 66, 66, 66, 66, 66, 66, 66, 67};
		sei();
     484:	78 94       	sei
     486:	00 e0       	ldi	r16, 0x00	; 0
     488:	11 e0       	ldi	r17, 0x01	; 1
     48a:	0f b6       	in	r0, 0x3f	; 63
     48c:	f8 94       	cli
     48e:	de bf       	out	0x3e, r29	; 62
     490:	0f be       	out	0x3f, r0	; 63
     492:	cd bf       	out	0x3d, r28	; 61
		for (a=0;a<9;a++)usartsoft_transmit(CO2_read[a]);
     494:	f8 01       	movw	r30, r16
     496:	81 91       	ld	r24, Z+
     498:	8f 01       	movw	r16, r30
     49a:	0e 94 9c 05 	call	0xb38	; 0xb38 <usartsoft_transmit>
     49e:	a0 16       	cp	r10, r16
     4a0:	b1 06       	cpc	r11, r17
     4a2:	c1 f7       	brne	.-16     	; 0x494 <__LOCK_REGION_LENGTH__+0x94>
     4a4:	00 ed       	ldi	r16, 0xD0	; 208
     4a6:	12 e0       	ldi	r17, 0x02	; 2
		for (a=0;a<9;a++)CO2_data[a]=usartsoft_recieve(&co2_d);
     4a8:	ce 01       	movw	r24, r28
     4aa:	01 96       	adiw	r24, 0x01	; 1
     4ac:	0e 94 ac 05 	call	0xb58	; 0xb58 <usartsoft_recieve>
     4b0:	f8 01       	movw	r30, r16
     4b2:	81 93       	st	Z+, r24
     4b4:	8f 01       	movw	r16, r30
     4b6:	ec 15       	cp	r30, r12
     4b8:	fd 05       	cpc	r31, r13
     4ba:	b1 f7       	brne	.-20     	; 0x4a8 <__LOCK_REGION_LENGTH__+0xa8>
		
// 		usartsoft_transmit(co2_d);
		sprintf(str1," %x %x %x %x %x %x %x %x %x ", CO2_data[0], CO2_data[1], CO2_data[2], CO2_data[3], CO2_data[4], CO2_data[5], CO2_data[6], CO2_data[7], CO2_data[8]);
     4bc:	f7 01       	movw	r30, r14
     4be:	80 85       	ldd	r24, Z+8	; 0x08
     4c0:	1f 92       	push	r1
     4c2:	8f 93       	push	r24
     4c4:	87 81       	ldd	r24, Z+7	; 0x07
     4c6:	1f 92       	push	r1
     4c8:	8f 93       	push	r24
     4ca:	86 81       	ldd	r24, Z+6	; 0x06
     4cc:	1f 92       	push	r1
     4ce:	8f 93       	push	r24
     4d0:	85 81       	ldd	r24, Z+5	; 0x05
     4d2:	1f 92       	push	r1
     4d4:	8f 93       	push	r24
     4d6:	84 81       	ldd	r24, Z+4	; 0x04
     4d8:	1f 92       	push	r1
     4da:	8f 93       	push	r24
     4dc:	83 81       	ldd	r24, Z+3	; 0x03
     4de:	1f 92       	push	r1
     4e0:	8f 93       	push	r24
     4e2:	82 81       	ldd	r24, Z+2	; 0x02
     4e4:	1f 92       	push	r1
     4e6:	8f 93       	push	r24
     4e8:	81 81       	ldd	r24, Z+1	; 0x01
     4ea:	1f 92       	push	r1
     4ec:	8f 93       	push	r24
     4ee:	80 81       	ld	r24, Z
     4f0:	1f 92       	push	r1
     4f2:	8f 93       	push	r24
     4f4:	3f 92       	push	r3
     4f6:	2f 92       	push	r2
     4f8:	9f 92       	push	r9
     4fa:	8f 92       	push	r8
     4fc:	0e 94 ca 0b 	call	0x1794	; 0x1794 <sprintf>
		mg12232_string_write(str1, 1);
     500:	61 e0       	ldi	r22, 0x01	; 1
     502:	c4 01       	movw	r24, r8
     504:	0e 94 74 04 	call	0x8e8	; 0x8e8 <mg12232_string_write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     508:	ff ef       	ldi	r31, 0xFF	; 255
     50a:	2b e7       	ldi	r18, 0x7B	; 123
     50c:	82 e9       	ldi	r24, 0x92	; 146
     50e:	f1 50       	subi	r31, 0x01	; 1
     510:	20 40       	sbci	r18, 0x00	; 0
     512:	80 40       	sbci	r24, 0x00	; 0
     514:	e1 f7       	brne	.-8      	; 0x50e <__LOCK_REGION_LENGTH__+0x10e>
     516:	00 c0       	rjmp	.+0      	; 0x518 <__LOCK_REGION_LENGTH__+0x118>
     518:	00 00       	nop
     51a:	0f b6       	in	r0, 0x3f	; 63
     51c:	f8 94       	cli
     51e:	de bf       	out	0x3e, r29	; 62
     520:	0f be       	out	0x3f, r0	; 63
     522:	cd bf       	out	0x3d, r28	; 61
     524:	6d cf       	rjmp	.-294    	; 0x400 <__LOCK_REGION_LENGTH__>

00000526 <command_write>:
	command_write(CMD_COLUMN+0,3);
	command_write(CMD_START_LINE+0,3);
}

void command_write(uint8_t data, uint8_t chip){
	cli();
     526:	f8 94       	cli
	DATA_DDR=0xff;
     528:	9f ef       	ldi	r25, 0xFF	; 255
     52a:	9a b9       	out	0x0a, r25	; 10
	DATA_PORT=data;
     52c:	8b b9       	out	0x0b, r24	; 11
	A0_PORT &=~(1<<A0_PIN_NUM);
     52e:	2a 98       	cbi	0x05, 2	; 5
	if(chip&1) CS1_PORT |=(1<<CS1_PIN_NUM);
     530:	60 fd       	sbrc	r22, 0
     532:	28 9a       	sbi	0x05, 0	; 5
	if(chip&2) CS2_PORT |=(1<<CS2_PIN_NUM);
     534:	61 fd       	sbrc	r22, 1
     536:	29 9a       	sbi	0x05, 1	; 5
	CS1_PORT &=~((1<<CS1_PIN_NUM)|(1<<CS2_PIN_NUM));
     538:	85 b1       	in	r24, 0x05	; 5
     53a:	8c 7f       	andi	r24, 0xFC	; 252
     53c:	85 b9       	out	0x05, r24	; 5
	DATA_PORT=0;
     53e:	1b b8       	out	0x0b, r1	; 11
	DATA_DDR=0;
     540:	1a b8       	out	0x0a, r1	; 10
	sei();
     542:	78 94       	sei
     544:	08 95       	ret

00000546 <data_write>:
}

void data_write(uint8_t data, uint8_t chip){
	cli();
     546:	f8 94       	cli
	DATA_DDR=0xff;
     548:	9f ef       	ldi	r25, 0xFF	; 255
     54a:	9a b9       	out	0x0a, r25	; 10
	DATA_PORT=data;
     54c:	8b b9       	out	0x0b, r24	; 11
	A0_PORT |=(1<<A0_PIN_NUM);
     54e:	2a 9a       	sbi	0x05, 2	; 5
	if(chip&1) CS1_PORT |=(1<<CS1_PIN_NUM);
     550:	60 fd       	sbrc	r22, 0
     552:	28 9a       	sbi	0x05, 0	; 5
	if(chip&2) CS2_PORT |=(1<<CS2_PIN_NUM);
     554:	61 fd       	sbrc	r22, 1
     556:	29 9a       	sbi	0x05, 1	; 5
	CS1_PORT &= ~((1 << CS1_PIN_NUM)|(1 << CS2_PIN_NUM));
     558:	85 b1       	in	r24, 0x05	; 5
     55a:	8c 7f       	andi	r24, 0xFC	; 252
     55c:	85 b9       	out	0x05, r24	; 5
	DATA_PORT=0;
     55e:	1b b8       	out	0x0b, r1	; 11
	DATA_DDR=0;
     560:	1a b8       	out	0x0a, r1	; 10
	sei();
     562:	78 94       	sei
     564:	08 95       	ret

00000566 <clear_lcd>:
}
void clear_lcd(void){
     566:	cf 93       	push	r28
     568:	df 93       	push	r29
     56a:	d8 eb       	ldi	r29, 0xB8	; 184
	for (uint8_t page = 0; page < 4; page++) {
		command_write(CMD_PAGE + page, 3);
     56c:	63 e0       	ldi	r22, 0x03	; 3
     56e:	8d 2f       	mov	r24, r29
     570:	0e 94 93 02 	call	0x526	; 0x526 <command_write>
		command_write(CMD_COLUMN + 0, 3);
     574:	63 e0       	ldi	r22, 0x03	; 3
     576:	83 e1       	ldi	r24, 0x13	; 19
     578:	0e 94 93 02 	call	0x526	; 0x526 <command_write>
     57c:	cd e3       	ldi	r28, 0x3D	; 61
		for (uint8_t x = 0; x < 61; x++) {
			data_write(0, 3);
     57e:	63 e0       	ldi	r22, 0x03	; 3
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	0e 94 a3 02 	call	0x546	; 0x546 <data_write>
     586:	c1 50       	subi	r28, 0x01	; 1
}
void clear_lcd(void){
	for (uint8_t page = 0; page < 4; page++) {
		command_write(CMD_PAGE + page, 3);
		command_write(CMD_COLUMN + 0, 3);
		for (uint8_t x = 0; x < 61; x++) {
     588:	d1 f7       	brne	.-12     	; 0x57e <clear_lcd+0x18>
     58a:	df 5f       	subi	r29, 0xFF	; 255
	DATA_PORT=0;
	DATA_DDR=0;
	sei();
}
void clear_lcd(void){
	for (uint8_t page = 0; page < 4; page++) {
     58c:	dc 3b       	cpi	r29, 0xBC	; 188
     58e:	71 f7       	brne	.-36     	; 0x56c <clear_lcd+0x6>
		command_write(CMD_COLUMN + 0, 3);
		for (uint8_t x = 0; x < 61; x++) {
			data_write(0, 3);
		}
	}
}
     590:	df 91       	pop	r29
     592:	cf 91       	pop	r28
     594:	08 95       	ret

00000596 <mg12232_init>:
#include "mg12232.h"


void mg12232_init(void){
	DATA_DDR |= 0xff;
     596:	8a b1       	in	r24, 0x0a	; 10
     598:	8f ef       	ldi	r24, 0xFF	; 255
     59a:	8a b9       	out	0x0a, r24	; 10
	DATA_PORT|=0xff;
     59c:	9b b1       	in	r25, 0x0b	; 11
     59e:	8b b9       	out	0x0b, r24	; 11
	DDRB |=0x07;
     5a0:	84 b1       	in	r24, 0x04	; 4
     5a2:	87 60       	ori	r24, 0x07	; 7
     5a4:	84 b9       	out	0x04, r24	; 4
	PORTB|=0x07;
     5a6:	85 b1       	in	r24, 0x05	; 5
     5a8:	87 60       	ori	r24, 0x07	; 7
     5aa:	85 b9       	out	0x05, r24	; 5
	PORTB|=0x04;
     5ac:	2a 9a       	sbi	0x05, 2	; 5
	PORTB|=0x07;
     5ae:	85 b1       	in	r24, 0x05	; 5
     5b0:	87 60       	ori	r24, 0x07	; 7
     5b2:	85 b9       	out	0x05, r24	; 5
	PORTB|=0x04;
     5b4:	2a 9a       	sbi	0x05, 2	; 5
	PORTB|=0x07;
     5b6:	85 b1       	in	r24, 0x05	; 5
     5b8:	87 60       	ori	r24, 0x07	; 7
     5ba:	85 b9       	out	0x05, r24	; 5
	PORTB|=0x00;
     5bc:	85 b1       	in	r24, 0x05	; 5
     5be:	85 b9       	out	0x05, r24	; 5
	command_write(CMD_RESET,3);
     5c0:	63 e0       	ldi	r22, 0x03	; 3
     5c2:	82 ee       	ldi	r24, 0xE2	; 226
     5c4:	0e 94 93 02 	call	0x526	; 0x526 <command_write>
	command_write(CMD_DUTY_CYCLE_32,3);
     5c8:	63 e0       	ldi	r22, 0x03	; 3
     5ca:	89 ea       	ldi	r24, 0xA9	; 169
     5cc:	0e 94 93 02 	call	0x526	; 0x526 <command_write>
	command_write(CMD_STATIC_DRIVE_OFF,3);
     5d0:	63 e0       	ldi	r22, 0x03	; 3
     5d2:	84 ea       	ldi	r24, 0xA4	; 164
     5d4:	0e 94 93 02 	call	0x526	; 0x526 <command_write>
	command_write(CMD_ADC_CCW,3);
     5d8:	63 e0       	ldi	r22, 0x03	; 3
     5da:	81 ea       	ldi	r24, 0xA1	; 161
     5dc:	0e 94 93 02 	call	0x526	; 0x526 <command_write>
	command_write(CMD_DISPLAY_ON,3);
     5e0:	63 e0       	ldi	r22, 0x03	; 3
     5e2:	8f ea       	ldi	r24, 0xAF	; 175
     5e4:	0e 94 93 02 	call	0x526	; 0x526 <command_write>
	clear_lcd();
     5e8:	0e 94 b3 02 	call	0x566	; 0x566 <clear_lcd>
	command_write(CMD_PAGE+0,3);
     5ec:	63 e0       	ldi	r22, 0x03	; 3
     5ee:	88 eb       	ldi	r24, 0xB8	; 184
     5f0:	0e 94 93 02 	call	0x526	; 0x526 <command_write>
	command_write(CMD_COLUMN+0,3);
     5f4:	63 e0       	ldi	r22, 0x03	; 3
     5f6:	83 e1       	ldi	r24, 0x13	; 19
     5f8:	0e 94 93 02 	call	0x526	; 0x526 <command_write>
	command_write(CMD_START_LINE+0,3);
     5fc:	63 e0       	ldi	r22, 0x03	; 3
     5fe:	8f ed       	ldi	r24, 0xDF	; 223
     600:	0e 94 93 02 	call	0x526	; 0x526 <command_write>
     604:	08 95       	ret

00000606 <simbol_write>:
		for (uint8_t x = 0; x < 61; x++) {
			data_write(0, 3);
		}
	}
}
void simbol_write(unsigned char simbol[], uint8_t chip){
     606:	ff 92       	push	r15
     608:	0f 93       	push	r16
     60a:	1f 93       	push	r17
     60c:	cf 93       	push	r28
     60e:	df 93       	push	r29
     610:	f6 2e       	mov	r15, r22
     612:	ec 01       	movw	r28, r24
     614:	8c 01       	movw	r16, r24
     616:	0a 5f       	subi	r16, 0xFA	; 250
     618:	1f 4f       	sbci	r17, 0xFF	; 255
	for (unsigned char a=0; a<6;a++)
	{
		data_write(simbol[a],chip);
     61a:	6f 2d       	mov	r22, r15
     61c:	89 91       	ld	r24, Y+
     61e:	0e 94 a3 02 	call	0x546	; 0x546 <data_write>
			data_write(0, 3);
		}
	}
}
void simbol_write(unsigned char simbol[], uint8_t chip){
	for (unsigned char a=0; a<6;a++)
     622:	c0 17       	cp	r28, r16
     624:	d1 07       	cpc	r29, r17
     626:	c9 f7       	brne	.-14     	; 0x61a <simbol_write+0x14>
	{
		data_write(simbol[a],chip);
	}
}
     628:	df 91       	pop	r29
     62a:	cf 91       	pop	r28
     62c:	1f 91       	pop	r17
     62e:	0f 91       	pop	r16
     630:	ff 90       	pop	r15
     632:	08 95       	ret

00000634 <number_write>:
	{0b00000000, 0b00001000, 0b00001000, 0b00001000, 0b00000000, 0x0},	//-
	{0b00000000, 0b00001000, 0b00011100, 0b00001000, 0b00000000, 0x0}		//+
};

void number_write(char t, uint8_t chip){
	switch(t){
     634:	90 e0       	ldi	r25, 0x00	; 0
     636:	fc 01       	movw	r30, r24
     638:	b0 97       	sbiw	r30, 0x20	; 32
     63a:	eb 35       	cpi	r30, 0x5B	; 91
     63c:	f1 05       	cpc	r31, r1
     63e:	08 f0       	brcs	.+2      	; 0x642 <number_write+0xe>
     640:	52 c1       	rjmp	.+676    	; 0x8e6 <number_write+0x2b2>
     642:	ec 5c       	subi	r30, 0xCC	; 204
     644:	ff 4f       	sbci	r31, 0xFF	; 255
     646:	0c 94 63 0a 	jmp	0x14c6	; 0x14c6 <__tablejump2__>
		case '0' : simbol_write(numbers[0],chip);break;
     64a:	89 e0       	ldi	r24, 0x09	; 9
     64c:	91 e0       	ldi	r25, 0x01	; 1
     64e:	0e 94 03 03 	call	0x606	; 0x606 <simbol_write>
     652:	08 95       	ret
		case '1' : simbol_write(numbers[1],chip);break;
     654:	8f e0       	ldi	r24, 0x0F	; 15
     656:	91 e0       	ldi	r25, 0x01	; 1
     658:	0e 94 03 03 	call	0x606	; 0x606 <simbol_write>
     65c:	08 95       	ret
		case '2' : simbol_write(numbers[2],chip);break;
     65e:	85 e1       	ldi	r24, 0x15	; 21
     660:	91 e0       	ldi	r25, 0x01	; 1
     662:	0e 94 03 03 	call	0x606	; 0x606 <simbol_write>
     666:	08 95       	ret
		case '3' : simbol_write(numbers[3],chip);break;
     668:	8b e1       	ldi	r24, 0x1B	; 27
     66a:	91 e0       	ldi	r25, 0x01	; 1
     66c:	0e 94 03 03 	call	0x606	; 0x606 <simbol_write>
     670:	08 95       	ret
		case '4' : simbol_write(numbers[4],chip);break;
     672:	81 e2       	ldi	r24, 0x21	; 33
     674:	91 e0       	ldi	r25, 0x01	; 1
     676:	0e 94 03 03 	call	0x606	; 0x606 <simbol_write>
     67a:	08 95       	ret
		case '5' : simbol_write(numbers[5],chip);break;
     67c:	87 e2       	ldi	r24, 0x27	; 39
     67e:	91 e0       	ldi	r25, 0x01	; 1
     680:	0e 94 03 03 	call	0x606	; 0x606 <simbol_write>
     684:	08 95       	ret
		case '6' : simbol_write(numbers[6],chip);break;
     686:	8d e2       	ldi	r24, 0x2D	; 45
     688:	91 e0       	ldi	r25, 0x01	; 1
     68a:	0e 94 03 03 	call	0x606	; 0x606 <simbol_write>
     68e:	08 95       	ret
		case '7' : simbol_write(numbers[7],chip);break;
     690:	83 e3       	ldi	r24, 0x33	; 51
     692:	91 e0       	ldi	r25, 0x01	; 1
     694:	0e 94 03 03 	call	0x606	; 0x606 <simbol_write>
     698:	08 95       	ret
		case '8' : simbol_write(numbers[8],chip);break;
     69a:	89 e3       	ldi	r24, 0x39	; 57
     69c:	91 e0       	ldi	r25, 0x01	; 1
     69e:	0e 94 03 03 	call	0x606	; 0x606 <simbol_write>
     6a2:	08 95       	ret
		case '9' : simbol_write(numbers[9],chip);break;
     6a4:	8f e3       	ldi	r24, 0x3F	; 63
     6a6:	91 e0       	ldi	r25, 0x01	; 1
     6a8:	0e 94 03 03 	call	0x606	; 0x606 <simbol_write>
     6ac:	08 95       	ret
		case '=' : simbol_write(numbers[10],chip);break;
     6ae:	85 e4       	ldi	r24, 0x45	; 69
     6b0:	91 e0       	ldi	r25, 0x01	; 1
     6b2:	0e 94 03 03 	call	0x606	; 0x606 <simbol_write>
     6b6:	08 95       	ret
		case 'A' : simbol_write(numbers[11],chip);break;
     6b8:	8b e4       	ldi	r24, 0x4B	; 75
     6ba:	91 e0       	ldi	r25, 0x01	; 1
     6bc:	0e 94 03 03 	call	0x606	; 0x606 <simbol_write>
     6c0:	08 95       	ret
		case 'B' : simbol_write(numbers[12],chip);break;
     6c2:	81 e5       	ldi	r24, 0x51	; 81
     6c4:	91 e0       	ldi	r25, 0x01	; 1
     6c6:	0e 94 03 03 	call	0x606	; 0x606 <simbol_write>
     6ca:	08 95       	ret
		case 'C' : simbol_write(numbers[13],chip);break;
     6cc:	87 e5       	ldi	r24, 0x57	; 87
     6ce:	91 e0       	ldi	r25, 0x01	; 1
     6d0:	0e 94 03 03 	call	0x606	; 0x606 <simbol_write>
     6d4:	08 95       	ret
		case 'D' : simbol_write(numbers[14],chip);break;
     6d6:	8d e5       	ldi	r24, 0x5D	; 93
     6d8:	91 e0       	ldi	r25, 0x01	; 1
     6da:	0e 94 03 03 	call	0x606	; 0x606 <simbol_write>
     6de:	08 95       	ret
		case 'E' : simbol_write(numbers[15],chip);break;
     6e0:	83 e6       	ldi	r24, 0x63	; 99
     6e2:	91 e0       	ldi	r25, 0x01	; 1
     6e4:	0e 94 03 03 	call	0x606	; 0x606 <simbol_write>
     6e8:	08 95       	ret
		case 'F' : simbol_write(numbers[16],chip);break;
     6ea:	89 e6       	ldi	r24, 0x69	; 105
     6ec:	91 e0       	ldi	r25, 0x01	; 1
     6ee:	0e 94 03 03 	call	0x606	; 0x606 <simbol_write>
     6f2:	08 95       	ret
		case 'G' : simbol_write(numbers[17],chip);break;
     6f4:	8f e6       	ldi	r24, 0x6F	; 111
     6f6:	91 e0       	ldi	r25, 0x01	; 1
     6f8:	0e 94 03 03 	call	0x606	; 0x606 <simbol_write>
     6fc:	08 95       	ret
		case 'H' : simbol_write(numbers[18],chip);break;
     6fe:	85 e7       	ldi	r24, 0x75	; 117
     700:	91 e0       	ldi	r25, 0x01	; 1
     702:	0e 94 03 03 	call	0x606	; 0x606 <simbol_write>
     706:	08 95       	ret
		case 'I' : simbol_write(numbers[19],chip);break;
     708:	8b e7       	ldi	r24, 0x7B	; 123
     70a:	91 e0       	ldi	r25, 0x01	; 1
     70c:	0e 94 03 03 	call	0x606	; 0x606 <simbol_write>
     710:	08 95       	ret
		case 'J' : simbol_write(numbers[20],chip);break;
     712:	81 e8       	ldi	r24, 0x81	; 129
     714:	91 e0       	ldi	r25, 0x01	; 1
     716:	0e 94 03 03 	call	0x606	; 0x606 <simbol_write>
     71a:	08 95       	ret
		case 'K' : simbol_write(numbers[21],chip);break;
     71c:	87 e8       	ldi	r24, 0x87	; 135
     71e:	91 e0       	ldi	r25, 0x01	; 1
     720:	0e 94 03 03 	call	0x606	; 0x606 <simbol_write>
     724:	08 95       	ret
		case 'L' : simbol_write(numbers[22],chip);break;
     726:	8d e8       	ldi	r24, 0x8D	; 141
     728:	91 e0       	ldi	r25, 0x01	; 1
     72a:	0e 94 03 03 	call	0x606	; 0x606 <simbol_write>
     72e:	08 95       	ret
		case 'M' : simbol_write(numbers[23],chip);break;
     730:	83 e9       	ldi	r24, 0x93	; 147
     732:	91 e0       	ldi	r25, 0x01	; 1
     734:	0e 94 03 03 	call	0x606	; 0x606 <simbol_write>
     738:	08 95       	ret
		case 'N' : simbol_write(numbers[24],chip);break;
     73a:	89 e9       	ldi	r24, 0x99	; 153
     73c:	91 e0       	ldi	r25, 0x01	; 1
     73e:	0e 94 03 03 	call	0x606	; 0x606 <simbol_write>
     742:	08 95       	ret
		case 'O' : simbol_write(numbers[25],chip);break;
     744:	8f e9       	ldi	r24, 0x9F	; 159
     746:	91 e0       	ldi	r25, 0x01	; 1
     748:	0e 94 03 03 	call	0x606	; 0x606 <simbol_write>
     74c:	08 95       	ret
		case 'P' : simbol_write(numbers[26],chip);break;
     74e:	85 ea       	ldi	r24, 0xA5	; 165
     750:	91 e0       	ldi	r25, 0x01	; 1
     752:	0e 94 03 03 	call	0x606	; 0x606 <simbol_write>
     756:	08 95       	ret
		case 'Q' : simbol_write(numbers[27],chip);break;
     758:	8b ea       	ldi	r24, 0xAB	; 171
     75a:	91 e0       	ldi	r25, 0x01	; 1
     75c:	0e 94 03 03 	call	0x606	; 0x606 <simbol_write>
     760:	08 95       	ret
		case 'R' : simbol_write(numbers[28],chip);break;
     762:	81 eb       	ldi	r24, 0xB1	; 177
     764:	91 e0       	ldi	r25, 0x01	; 1
     766:	0e 94 03 03 	call	0x606	; 0x606 <simbol_write>
     76a:	08 95       	ret
		case 'S' : simbol_write(numbers[29],chip);break;
     76c:	87 eb       	ldi	r24, 0xB7	; 183
     76e:	91 e0       	ldi	r25, 0x01	; 1
     770:	0e 94 03 03 	call	0x606	; 0x606 <simbol_write>
     774:	08 95       	ret
		case 'T' : simbol_write(numbers[30],chip);break;
     776:	8d eb       	ldi	r24, 0xBD	; 189
     778:	91 e0       	ldi	r25, 0x01	; 1
     77a:	0e 94 03 03 	call	0x606	; 0x606 <simbol_write>
     77e:	08 95       	ret
		case 'U' : simbol_write(numbers[31],chip);break;
     780:	83 ec       	ldi	r24, 0xC3	; 195
     782:	91 e0       	ldi	r25, 0x01	; 1
     784:	0e 94 03 03 	call	0x606	; 0x606 <simbol_write>
     788:	08 95       	ret
		case 'V' : simbol_write(numbers[32],chip);break;
     78a:	89 ec       	ldi	r24, 0xC9	; 201
     78c:	91 e0       	ldi	r25, 0x01	; 1
     78e:	0e 94 03 03 	call	0x606	; 0x606 <simbol_write>
     792:	08 95       	ret
		case 'W' : simbol_write(numbers[33],chip);break;
     794:	8f ec       	ldi	r24, 0xCF	; 207
     796:	91 e0       	ldi	r25, 0x01	; 1
     798:	0e 94 03 03 	call	0x606	; 0x606 <simbol_write>
     79c:	08 95       	ret
		case 'X' : simbol_write(numbers[34],chip);break;
     79e:	85 ed       	ldi	r24, 0xD5	; 213
     7a0:	91 e0       	ldi	r25, 0x01	; 1
     7a2:	0e 94 03 03 	call	0x606	; 0x606 <simbol_write>
     7a6:	08 95       	ret
		case 'Y' : simbol_write(numbers[35],chip);break;
     7a8:	8b ed       	ldi	r24, 0xDB	; 219
     7aa:	91 e0       	ldi	r25, 0x01	; 1
     7ac:	0e 94 03 03 	call	0x606	; 0x606 <simbol_write>
     7b0:	08 95       	ret
		case 'Z' : simbol_write(numbers[36],chip);break;
     7b2:	81 ee       	ldi	r24, 0xE1	; 225
     7b4:	91 e0       	ldi	r25, 0x01	; 1
     7b6:	0e 94 03 03 	call	0x606	; 0x606 <simbol_write>
     7ba:	08 95       	ret
		case 'a' : simbol_write(numbers[37],chip);break;
     7bc:	87 ee       	ldi	r24, 0xE7	; 231
     7be:	91 e0       	ldi	r25, 0x01	; 1
     7c0:	0e 94 03 03 	call	0x606	; 0x606 <simbol_write>
     7c4:	08 95       	ret
		case 'b' : simbol_write(numbers[38],chip);break;
     7c6:	8d ee       	ldi	r24, 0xED	; 237
     7c8:	91 e0       	ldi	r25, 0x01	; 1
     7ca:	0e 94 03 03 	call	0x606	; 0x606 <simbol_write>
     7ce:	08 95       	ret
		case 'c' : simbol_write(numbers[39],chip);break;
     7d0:	83 ef       	ldi	r24, 0xF3	; 243
     7d2:	91 e0       	ldi	r25, 0x01	; 1
     7d4:	0e 94 03 03 	call	0x606	; 0x606 <simbol_write>
     7d8:	08 95       	ret
		case 'd' : simbol_write(numbers[40],chip);break;
     7da:	89 ef       	ldi	r24, 0xF9	; 249
     7dc:	91 e0       	ldi	r25, 0x01	; 1
     7de:	0e 94 03 03 	call	0x606	; 0x606 <simbol_write>
     7e2:	08 95       	ret
		case 'e' : simbol_write(numbers[41],chip);break;
     7e4:	8f ef       	ldi	r24, 0xFF	; 255
     7e6:	91 e0       	ldi	r25, 0x01	; 1
     7e8:	0e 94 03 03 	call	0x606	; 0x606 <simbol_write>
     7ec:	08 95       	ret
		case 'f' : simbol_write(numbers[42],chip);break;
     7ee:	85 e0       	ldi	r24, 0x05	; 5
     7f0:	92 e0       	ldi	r25, 0x02	; 2
     7f2:	0e 94 03 03 	call	0x606	; 0x606 <simbol_write>
     7f6:	08 95       	ret
		case 'g' : simbol_write(numbers[43],chip);break;
     7f8:	8b e0       	ldi	r24, 0x0B	; 11
     7fa:	92 e0       	ldi	r25, 0x02	; 2
     7fc:	0e 94 03 03 	call	0x606	; 0x606 <simbol_write>
     800:	08 95       	ret
		case 'h' : simbol_write(numbers[44],chip);break;
     802:	81 e1       	ldi	r24, 0x11	; 17
     804:	92 e0       	ldi	r25, 0x02	; 2
     806:	0e 94 03 03 	call	0x606	; 0x606 <simbol_write>
     80a:	08 95       	ret
		case 'i' : simbol_write(numbers[45],chip);break;
     80c:	87 e1       	ldi	r24, 0x17	; 23
     80e:	92 e0       	ldi	r25, 0x02	; 2
     810:	0e 94 03 03 	call	0x606	; 0x606 <simbol_write>
     814:	08 95       	ret
		case 'j' : simbol_write(numbers[46],chip);break;
     816:	8d e1       	ldi	r24, 0x1D	; 29
     818:	92 e0       	ldi	r25, 0x02	; 2
     81a:	0e 94 03 03 	call	0x606	; 0x606 <simbol_write>
     81e:	08 95       	ret
		case 'k' : simbol_write(numbers[47],chip);break;
     820:	83 e2       	ldi	r24, 0x23	; 35
     822:	92 e0       	ldi	r25, 0x02	; 2
     824:	0e 94 03 03 	call	0x606	; 0x606 <simbol_write>
     828:	08 95       	ret
		case 'l' : simbol_write(numbers[48],chip);break;
     82a:	89 e2       	ldi	r24, 0x29	; 41
     82c:	92 e0       	ldi	r25, 0x02	; 2
     82e:	0e 94 03 03 	call	0x606	; 0x606 <simbol_write>
     832:	08 95       	ret
		case 'm' : simbol_write(numbers[49],chip);break;
     834:	8f e2       	ldi	r24, 0x2F	; 47
     836:	92 e0       	ldi	r25, 0x02	; 2
     838:	0e 94 03 03 	call	0x606	; 0x606 <simbol_write>
     83c:	08 95       	ret
		case 'n' : simbol_write(numbers[50],chip);break;
     83e:	85 e3       	ldi	r24, 0x35	; 53
     840:	92 e0       	ldi	r25, 0x02	; 2
     842:	0e 94 03 03 	call	0x606	; 0x606 <simbol_write>
     846:	08 95       	ret
		case 'o' : simbol_write(numbers[51],chip);break;
     848:	8b e3       	ldi	r24, 0x3B	; 59
     84a:	92 e0       	ldi	r25, 0x02	; 2
     84c:	0e 94 03 03 	call	0x606	; 0x606 <simbol_write>
     850:	08 95       	ret
		case 'p' : simbol_write(numbers[52],chip);break;
     852:	81 e4       	ldi	r24, 0x41	; 65
     854:	92 e0       	ldi	r25, 0x02	; 2
     856:	0e 94 03 03 	call	0x606	; 0x606 <simbol_write>
     85a:	08 95       	ret
		case 'q' : simbol_write(numbers[53],chip);break;
     85c:	87 e4       	ldi	r24, 0x47	; 71
     85e:	92 e0       	ldi	r25, 0x02	; 2
     860:	0e 94 03 03 	call	0x606	; 0x606 <simbol_write>
     864:	08 95       	ret
		case 'r' : simbol_write(numbers[54],chip);break;
     866:	8d e4       	ldi	r24, 0x4D	; 77
     868:	92 e0       	ldi	r25, 0x02	; 2
     86a:	0e 94 03 03 	call	0x606	; 0x606 <simbol_write>
     86e:	08 95       	ret
		case 's' : simbol_write(numbers[55],chip);break;
     870:	83 e5       	ldi	r24, 0x53	; 83
     872:	92 e0       	ldi	r25, 0x02	; 2
     874:	0e 94 03 03 	call	0x606	; 0x606 <simbol_write>
     878:	08 95       	ret
		case 't' : simbol_write(numbers[56],chip);break;
     87a:	89 e5       	ldi	r24, 0x59	; 89
     87c:	92 e0       	ldi	r25, 0x02	; 2
     87e:	0e 94 03 03 	call	0x606	; 0x606 <simbol_write>
     882:	08 95       	ret
		case 'u' : simbol_write(numbers[57],chip);break;
     884:	8f e5       	ldi	r24, 0x5F	; 95
     886:	92 e0       	ldi	r25, 0x02	; 2
     888:	0e 94 03 03 	call	0x606	; 0x606 <simbol_write>
     88c:	08 95       	ret
		case 'v' : simbol_write(numbers[58],chip);break;
     88e:	85 e6       	ldi	r24, 0x65	; 101
     890:	92 e0       	ldi	r25, 0x02	; 2
     892:	0e 94 03 03 	call	0x606	; 0x606 <simbol_write>
     896:	08 95       	ret
		case 'w' : simbol_write(numbers[59],chip);break;
     898:	8b e6       	ldi	r24, 0x6B	; 107
     89a:	92 e0       	ldi	r25, 0x02	; 2
     89c:	0e 94 03 03 	call	0x606	; 0x606 <simbol_write>
     8a0:	08 95       	ret
		case 'x' : simbol_write(numbers[60],chip);break;
     8a2:	81 e7       	ldi	r24, 0x71	; 113
     8a4:	92 e0       	ldi	r25, 0x02	; 2
     8a6:	0e 94 03 03 	call	0x606	; 0x606 <simbol_write>
     8aa:	08 95       	ret
		case 'y' : simbol_write(numbers[61],chip);break;
     8ac:	87 e7       	ldi	r24, 0x77	; 119
     8ae:	92 e0       	ldi	r25, 0x02	; 2
     8b0:	0e 94 03 03 	call	0x606	; 0x606 <simbol_write>
     8b4:	08 95       	ret
		case 'z' : simbol_write(numbers[62],chip);break;
     8b6:	8d e7       	ldi	r24, 0x7D	; 125
     8b8:	92 e0       	ldi	r25, 0x02	; 2
     8ba:	0e 94 03 03 	call	0x606	; 0x606 <simbol_write>
     8be:	08 95       	ret
		case '.' : simbol_write(numbers[63],chip);break;
     8c0:	83 e8       	ldi	r24, 0x83	; 131
     8c2:	92 e0       	ldi	r25, 0x02	; 2
     8c4:	0e 94 03 03 	call	0x606	; 0x606 <simbol_write>
     8c8:	08 95       	ret
		case ' ' : simbol_write(numbers[64],chip);break;
     8ca:	89 e8       	ldi	r24, 0x89	; 137
     8cc:	92 e0       	ldi	r25, 0x02	; 2
     8ce:	0e 94 03 03 	call	0x606	; 0x606 <simbol_write>
     8d2:	08 95       	ret
		case '-' : simbol_write(numbers[65],chip);break;
     8d4:	8f e8       	ldi	r24, 0x8F	; 143
     8d6:	92 e0       	ldi	r25, 0x02	; 2
     8d8:	0e 94 03 03 	call	0x606	; 0x606 <simbol_write>
     8dc:	08 95       	ret
		case '+' : simbol_write(numbers[66],chip);break;
     8de:	85 e9       	ldi	r24, 0x95	; 149
     8e0:	92 e0       	ldi	r25, 0x02	; 2
     8e2:	0e 94 03 03 	call	0x606	; 0x606 <simbol_write>
     8e6:	08 95       	ret

000008e8 <mg12232_string_write>:
	for (unsigned char a=0; a<6;a++)
	{
		data_write(simbol[a],chip);
	}
}
void mg12232_string_write(char str[], uint8_t page){
     8e8:	bf 92       	push	r11
     8ea:	cf 92       	push	r12
     8ec:	df 92       	push	r13
     8ee:	ef 92       	push	r14
     8f0:	ff 92       	push	r15
     8f2:	0f 93       	push	r16
     8f4:	1f 93       	push	r17
     8f6:	cf 93       	push	r28
     8f8:	df 93       	push	r29
     8fa:	7c 01       	movw	r14, r24
     8fc:	d6 2f       	mov	r29, r22
	uint8_t a;
	uint8_t chip;
	for (a=0;a<strlen(str);a++){		
     8fe:	c0 e0       	ldi	r28, 0x00	; 0
		if (a==60){
			if (page+3>3) page = 0;
			command_write(CMD_PAGE+page+3,3);
			command_write(CMD_COLUMN+1,3);
		}
		if ((a>=10 && a<=19)||(a>=30 && a<=39)||(a>=50 && a<=59)||(a>=70 && a<=79))chip=2;
     900:	68 94       	set
     902:	dd 24       	eor	r13, r13
     904:	d1 f8       	bld	r13, 1
		else chip=1;
     906:	bb 24       	eor	r11, r11
     908:	b3 94       	inc	r11
			if (page+2>3) page = 0;
			command_write(CMD_PAGE+page+2,3);
			command_write(CMD_COLUMN+1,3);
		}
		if (a==60){
			if (page+3>3) page = 0;
     90a:	c1 2c       	mov	r12, r1
	}
}
void mg12232_string_write(char str[], uint8_t page){
	uint8_t a;
	uint8_t chip;
	for (a=0;a<strlen(str);a++){		
     90c:	65 c0       	rjmp	.+202    	; 0x9d8 <__stack+0xd9>
		if (a==0){
     90e:	c1 11       	cpse	r28, r1
     910:	0d c0       	rjmp	.+26     	; 0x92c <__stack+0x2d>
			if (page>3) page = 0;
     912:	d4 30       	cpi	r29, 0x04	; 4
     914:	08 f0       	brcs	.+2      	; 0x918 <__stack+0x19>
     916:	dc 2d       	mov	r29, r12
			command_write(CMD_PAGE+page,3);
     918:	63 e0       	ldi	r22, 0x03	; 3
     91a:	88 eb       	ldi	r24, 0xB8	; 184
     91c:	8d 0f       	add	r24, r29
     91e:	0e 94 93 02 	call	0x526	; 0x526 <command_write>
			command_write(CMD_COLUMN+1,3);
     922:	63 e0       	ldi	r22, 0x03	; 3
     924:	84 e1       	ldi	r24, 0x14	; 20
     926:	0e 94 93 02 	call	0x526	; 0x526 <command_write>
     92a:	24 c0       	rjmp	.+72     	; 0x974 <__stack+0x75>
		}
		if (a==20){
     92c:	c4 31       	cpi	r28, 0x14	; 20
     92e:	81 f4       	brne	.+32     	; 0x950 <__stack+0x51>
			if (page+1>3) page = 0;
     930:	8d 2f       	mov	r24, r29
     932:	90 e0       	ldi	r25, 0x00	; 0
     934:	01 96       	adiw	r24, 0x01	; 1
     936:	04 97       	sbiw	r24, 0x04	; 4
     938:	0c f0       	brlt	.+2      	; 0x93c <__stack+0x3d>
     93a:	dc 2d       	mov	r29, r12
			command_write(CMD_PAGE+page+1,3);
     93c:	63 e0       	ldi	r22, 0x03	; 3
     93e:	89 eb       	ldi	r24, 0xB9	; 185
     940:	8d 0f       	add	r24, r29
     942:	0e 94 93 02 	call	0x526	; 0x526 <command_write>
			command_write(CMD_COLUMN+1,3);
     946:	63 e0       	ldi	r22, 0x03	; 3
     948:	84 e1       	ldi	r24, 0x14	; 20
     94a:	0e 94 93 02 	call	0x526	; 0x526 <command_write>
     94e:	24 c0       	rjmp	.+72     	; 0x998 <__stack+0x99>
		}
		if (a==40){
     950:	c8 32       	cpi	r28, 0x28	; 40
     952:	81 f4       	brne	.+32     	; 0x974 <__stack+0x75>
			if (page+2>3) page = 0;
     954:	8d 2f       	mov	r24, r29
     956:	90 e0       	ldi	r25, 0x00	; 0
     958:	02 96       	adiw	r24, 0x02	; 2
     95a:	04 97       	sbiw	r24, 0x04	; 4
     95c:	0c f0       	brlt	.+2      	; 0x960 <__stack+0x61>
     95e:	dc 2d       	mov	r29, r12
			command_write(CMD_PAGE+page+2,3);
     960:	63 e0       	ldi	r22, 0x03	; 3
     962:	8a eb       	ldi	r24, 0xBA	; 186
     964:	8d 0f       	add	r24, r29
     966:	0e 94 93 02 	call	0x526	; 0x526 <command_write>
			command_write(CMD_COLUMN+1,3);
     96a:	63 e0       	ldi	r22, 0x03	; 3
     96c:	84 e1       	ldi	r24, 0x14	; 20
     96e:	0e 94 93 02 	call	0x526	; 0x526 <command_write>
     972:	16 c0       	rjmp	.+44     	; 0x9a0 <__stack+0xa1>
		}
		if (a==60){
     974:	cc 33       	cpi	r28, 0x3C	; 60
     976:	81 f4       	brne	.+32     	; 0x998 <__stack+0x99>
			if (page+3>3) page = 0;
     978:	8d 2f       	mov	r24, r29
     97a:	90 e0       	ldi	r25, 0x00	; 0
     97c:	03 96       	adiw	r24, 0x03	; 3
     97e:	04 97       	sbiw	r24, 0x04	; 4
     980:	0c f0       	brlt	.+2      	; 0x984 <__stack+0x85>
     982:	dc 2d       	mov	r29, r12
			command_write(CMD_PAGE+page+3,3);
     984:	63 e0       	ldi	r22, 0x03	; 3
     986:	8b eb       	ldi	r24, 0xBB	; 187
     988:	8d 0f       	add	r24, r29
     98a:	0e 94 93 02 	call	0x526	; 0x526 <command_write>
			command_write(CMD_COLUMN+1,3);
     98e:	63 e0       	ldi	r22, 0x03	; 3
     990:	84 e1       	ldi	r24, 0x14	; 20
     992:	0e 94 93 02 	call	0x526	; 0x526 <command_write>
     996:	08 c0       	rjmp	.+16     	; 0x9a8 <__stack+0xa9>
		}
		if ((a>=10 && a<=19)||(a>=30 && a<=39)||(a>=50 && a<=59)||(a>=70 && a<=79))chip=2;
     998:	86 ef       	ldi	r24, 0xF6	; 246
     99a:	8c 0f       	add	r24, r28
     99c:	8a 30       	cpi	r24, 0x0A	; 10
     99e:	70 f0       	brcs	.+28     	; 0x9bc <__stack+0xbd>
     9a0:	82 ee       	ldi	r24, 0xE2	; 226
     9a2:	8c 0f       	add	r24, r28
     9a4:	8a 30       	cpi	r24, 0x0A	; 10
     9a6:	60 f0       	brcs	.+24     	; 0x9c0 <__stack+0xc1>
     9a8:	8e ec       	ldi	r24, 0xCE	; 206
     9aa:	8c 0f       	add	r24, r28
     9ac:	8a 30       	cpi	r24, 0x0A	; 10
     9ae:	50 f0       	brcs	.+20     	; 0x9c4 <__stack+0xc5>
     9b0:	8a eb       	ldi	r24, 0xBA	; 186
     9b2:	8c 0f       	add	r24, r28
     9b4:	8a 30       	cpi	r24, 0x0A	; 10
     9b6:	40 f0       	brcs	.+16     	; 0x9c8 <__stack+0xc9>
		else chip=1;
     9b8:	6b 2d       	mov	r22, r11
     9ba:	07 c0       	rjmp	.+14     	; 0x9ca <__stack+0xcb>
		if (a==60){
			if (page+3>3) page = 0;
			command_write(CMD_PAGE+page+3,3);
			command_write(CMD_COLUMN+1,3);
		}
		if ((a>=10 && a<=19)||(a>=30 && a<=39)||(a>=50 && a<=59)||(a>=70 && a<=79))chip=2;
     9bc:	6d 2d       	mov	r22, r13
     9be:	05 c0       	rjmp	.+10     	; 0x9ca <__stack+0xcb>
     9c0:	6d 2d       	mov	r22, r13
     9c2:	03 c0       	rjmp	.+6      	; 0x9ca <__stack+0xcb>
     9c4:	6d 2d       	mov	r22, r13
     9c6:	01 c0       	rjmp	.+2      	; 0x9ca <__stack+0xcb>
     9c8:	6d 2d       	mov	r22, r13
		else chip=1;
		number_write(str[a],chip);
     9ca:	f7 01       	movw	r30, r14
     9cc:	e0 0f       	add	r30, r16
     9ce:	f1 1f       	adc	r31, r17
     9d0:	80 81       	ld	r24, Z
     9d2:	0e 94 1a 03 	call	0x634	; 0x634 <number_write>
	}
}
void mg12232_string_write(char str[], uint8_t page){
	uint8_t a;
	uint8_t chip;
	for (a=0;a<strlen(str);a++){		
     9d6:	cf 5f       	subi	r28, 0xFF	; 255
     9d8:	0c 2f       	mov	r16, r28
     9da:	10 e0       	ldi	r17, 0x00	; 0
     9dc:	f7 01       	movw	r30, r14
     9de:	01 90       	ld	r0, Z+
     9e0:	00 20       	and	r0, r0
     9e2:	e9 f7       	brne	.-6      	; 0x9de <__stack+0xdf>
     9e4:	31 97       	sbiw	r30, 0x01	; 1
     9e6:	ee 19       	sub	r30, r14
     9e8:	ff 09       	sbc	r31, r15
     9ea:	0e 17       	cp	r16, r30
     9ec:	1f 07       	cpc	r17, r31
     9ee:	08 f4       	brcc	.+2      	; 0x9f2 <__stack+0xf3>
     9f0:	8e cf       	rjmp	.-228    	; 0x90e <__stack+0xf>
		}
		if ((a>=10 && a<=19)||(a>=30 && a<=39)||(a>=50 && a<=59)||(a>=70 && a<=79))chip=2;
		else chip=1;
		number_write(str[a],chip);
	}
}
     9f2:	df 91       	pop	r29
     9f4:	cf 91       	pop	r28
     9f6:	1f 91       	pop	r17
     9f8:	0f 91       	pop	r16
     9fa:	ff 90       	pop	r15
     9fc:	ef 90       	pop	r14
     9fe:	df 90       	pop	r13
     a00:	cf 90       	pop	r12
     a02:	bf 90       	pop	r11
     a04:	08 95       	ret

00000a06 <__vector_14>:
*	в txbyte данные для передачи вместе со стартовым битом. После этого они немедленно начнут передаваться.
*	Формированием посылки занимается функция void uart_send(uint8_t tb).
*/

ISR(TIMER0_COMPA_vect)
{
     a06:	1f 92       	push	r1
     a08:	0f 92       	push	r0
     a0a:	0f b6       	in	r0, 0x3f	; 63
     a0c:	0f 92       	push	r0
     a0e:	11 24       	eor	r1, r1
     a10:	2f 93       	push	r18
     a12:	3f 93       	push	r19
     a14:	8f 93       	push	r24
     a16:	9f 93       	push	r25
	TXPORT = (TXPORT & ~(1 << TXD)) | ((txbyte & 0x01) << TXD); // Выставляем в бит TXD младший бит txbyte
     a18:	95 b1       	in	r25, 0x05	; 5
     a1a:	20 91 e3 02 	lds	r18, 0x02E3	; 0x8002e3 <txbyte>
     a1e:	30 91 e4 02 	lds	r19, 0x02E4	; 0x8002e4 <txbyte+0x1>
     a22:	82 2f       	mov	r24, r18
     a24:	81 70       	andi	r24, 0x01	; 1
     a26:	82 95       	swap	r24
     a28:	80 7f       	andi	r24, 0xF0	; 240
     a2a:	9f 7e       	andi	r25, 0xEF	; 239
     a2c:	89 2b       	or	r24, r25
     a2e:	85 b9       	out	0x05, r24	; 5
	txbyte = (txbyte >> 0x01) + 0x8000;							// Двигаем txbyte вправо на 1 и пишем 1 в старший разряд (0x8000)
     a30:	80 91 e3 02 	lds	r24, 0x02E3	; 0x8002e3 <txbyte>
     a34:	90 91 e4 02 	lds	r25, 0x02E4	; 0x8002e4 <txbyte+0x1>
     a38:	96 95       	lsr	r25
     a3a:	87 95       	ror	r24
     a3c:	90 58       	subi	r25, 0x80	; 128
     a3e:	90 93 e4 02 	sts	0x02E4, r25	; 0x8002e4 <txbyte+0x1>
     a42:	80 93 e3 02 	sts	0x02E3, r24	; 0x8002e3 <txbyte>
	if(txbitcount > 0)											// Если идет передача (счетик бит больше нуля),
     a46:	80 91 df 02 	lds	r24, 0x02DF	; 0x8002df <txbitcount>
     a4a:	88 23       	and	r24, r24
     a4c:	29 f0       	breq	.+10     	; 0xa58 <__vector_14+0x52>
	{
		txbitcount--;											// то уменьшаем его на единицу.
     a4e:	80 91 df 02 	lds	r24, 0x02DF	; 0x8002df <txbitcount>
     a52:	81 50       	subi	r24, 0x01	; 1
     a54:	80 93 df 02 	sts	0x02DF, r24	; 0x8002df <txbitcount>
	}
}
     a58:	9f 91       	pop	r25
     a5a:	8f 91       	pop	r24
     a5c:	3f 91       	pop	r19
     a5e:	2f 91       	pop	r18
     a60:	0f 90       	pop	r0
     a62:	0f be       	out	0x3f, r0	; 63
     a64:	0f 90       	pop	r0
     a66:	1f 90       	pop	r1
     a68:	18 95       	reti

00000a6a <__vector_15>:
*	переменной приема rxbyte, затем мы уменьшаем на единицу счетчик принятых бит и, если он стал нулем, заканчиваем
*	прием. Иначе сдвигаем вправо переменную rxbyte, чтобы подготовить ее к приему следующего бита.
*/

ISR(TIMER0_COMPB_vect)
{
     a6a:	1f 92       	push	r1
     a6c:	0f 92       	push	r0
     a6e:	0f b6       	in	r0, 0x3f	; 63
     a70:	0f 92       	push	r0
     a72:	11 24       	eor	r1, r1
     a74:	8f 93       	push	r24
     a76:	ef 93       	push	r30
     a78:	ff 93       	push	r31
	if(RXPORT & (1 << RXD))			// Проверяем в каком состоянии вход RXD
     a7a:	1d 9b       	sbis	0x03, 5	; 3
     a7c:	05 c0       	rjmp	.+10     	; 0xa88 <__vector_15+0x1e>
	rxbyte |= 0x80;				// Если в 1, то пишем 1 в старший разряд rxbyte
     a7e:	80 91 e2 02 	lds	r24, 0x02E2	; 0x8002e2 <rxbyte>
     a82:	80 68       	ori	r24, 0x80	; 128
     a84:	80 93 e2 02 	sts	0x02E2, r24	; 0x8002e2 <rxbyte>
	
	if(--rxbitcount == 0)			// Уменьшаем на 1 счетчик бит и проверяем не стал ли он нулем
     a88:	80 91 de 02 	lds	r24, 0x02DE	; 0x8002de <rxbitcount>
     a8c:	81 50       	subi	r24, 0x01	; 1
     a8e:	80 93 de 02 	sts	0x02DE, r24	; 0x8002de <rxbitcount>
     a92:	81 11       	cpse	r24, r1
     a94:	0d c0       	rjmp	.+26     	; 0xab0 <__vector_15+0x46>
	{
		TIMSK0 &= ~(1 << OCIE0B);	// Если да, запрещаем прерывание по сравнению OCR0B
     a96:	ee e6       	ldi	r30, 0x6E	; 110
     a98:	f0 e0       	ldi	r31, 0x00	; 0
     a9a:	80 81       	ld	r24, Z
     a9c:	8b 7f       	andi	r24, 0xFB	; 251
     a9e:	80 83       	st	Z, r24
		TIFR0 |= (1 << OCF0B);		// Очищаем флаг прерывания (важно!)
     aa0:	aa 9a       	sbi	0x15, 2	; 21
		PCIFR |= (1 << PCIF0);		// Очищаем флаг прерывания по INT0
     aa2:	d8 9a       	sbi	0x1b, 0	; 27
		PCMSK0 |= (1 << PCINT5);		// Разрешаем прерывание INT0
     aa4:	eb e6       	ldi	r30, 0x6B	; 107
     aa6:	f0 e0       	ldi	r31, 0x00	; 0
     aa8:	80 81       	ld	r24, Z
     aaa:	80 62       	ori	r24, 0x20	; 32
     aac:	80 83       	st	Z, r24
     aae:	05 c0       	rjmp	.+10     	; 0xaba <__vector_15+0x50>
	}
	else
	{
		rxbyte >>= 0x01;			// Иначе сдвигаем вправо на 1 rxbyte
     ab0:	80 91 e2 02 	lds	r24, 0x02E2	; 0x8002e2 <rxbyte>
     ab4:	86 95       	lsr	r24
     ab6:	80 93 e2 02 	sts	0x02E2, r24	; 0x8002e2 <rxbyte>
	}
}
     aba:	ff 91       	pop	r31
     abc:	ef 91       	pop	r30
     abe:	8f 91       	pop	r24
     ac0:	0f 90       	pop	r0
     ac2:	0f be       	out	0x3f, r0	; 63
     ac4:	0f 90       	pop	r0
     ac6:	1f 90       	pop	r1
     ac8:	18 95       	reti

00000aca <__vector_3>:
*	бита (по времени). После чего прерывание ISR(TIM0_COMPB_vect) разрешается, а прерывание INT0
*	запрещается.
*/

ISR(PCINT0_vect)
{
     aca:	1f 92       	push	r1
     acc:	0f 92       	push	r0
     ace:	0f b6       	in	r0, 0x3f	; 63
     ad0:	0f 92       	push	r0
     ad2:	11 24       	eor	r1, r1
     ad4:	2f 93       	push	r18
     ad6:	8f 93       	push	r24
     ad8:	9f 93       	push	r25
     ada:	ef 93       	push	r30
     adc:	ff 93       	push	r31
	PCICR &= ~(1 << PCINT0);				// Запрещаем прерывание по INT0
     ade:	e8 e6       	ldi	r30, 0x68	; 104
     ae0:	f0 e0       	ldi	r31, 0x00	; 0
     ae2:	80 81       	ld	r24, Z
     ae4:	8e 7f       	andi	r24, 0xFE	; 254
     ae6:	80 83       	st	Z, r24
	uint8_t changedbits;
	changedbits = PINB ^ portbhistory;
     ae8:	93 b1       	in	r25, 0x03	; 3
     aea:	80 91 dd 02 	lds	r24, 0x02DD	; 0x8002dd <portbhistory>
	portbhistory = PINB;
     aee:	23 b1       	in	r18, 0x03	; 3
     af0:	20 93 dd 02 	sts	0x02DD, r18	; 0x8002dd <portbhistory>
	
	if(changedbits & (1 << PINB5))
     af4:	89 27       	eor	r24, r25
     af6:	85 ff       	sbrs	r24, 5
     af8:	15 c0       	rjmp	.+42     	; 0xb24 <__vector_3+0x5a>
	{
		rxbitcount = 0x09;						// 8 бит данных и 1 стартовый бит
     afa:	89 e0       	ldi	r24, 0x09	; 9
     afc:	80 93 de 02 	sts	0x02DE, r24	; 0x8002de <rxbitcount>
		rxbyte = 0x00;							// Обнуляем содержимое rxbyte
     b00:	10 92 e2 02 	sts	0x02E2, r1	; 0x8002e2 <rxbyte>
		if(TCNT0 < (BAUD_DIV / 2))				// Если таймер не досчитал до середины текущего периода
     b04:	86 b5       	in	r24, 0x26	; 38
     b06:	87 36       	cpi	r24, 0x67	; 103
     b08:	20 f4       	brcc	.+8      	; 0xb12 <__vector_3+0x48>
		{
			OCR0B = TCNT0 + (BAUD_DIV / 2);	// То прерывание произойдет в текущем периоде спустя пол периода
     b0a:	86 b5       	in	r24, 0x26	; 38
     b0c:	89 59       	subi	r24, 0x99	; 153
     b0e:	88 bd       	out	0x28, r24	; 40
     b10:	03 c0       	rjmp	.+6      	; 0xb18 <__vector_3+0x4e>
		}
		else
		{
			OCR0B = TCNT0 - (BAUD_DIV / 2);	// Иначе прерывание произойдет в уже следующем периоде таймера
     b12:	86 b5       	in	r24, 0x26	; 38
     b14:	87 56       	subi	r24, 0x67	; 103
     b16:	88 bd       	out	0x28, r24	; 40
		}

		PCIFR |= (1 << PCIF0);					// Очищаем флаг прерывания INT0
     b18:	d8 9a       	sbi	0x1b, 0	; 27
		TIMSK0 |= (1 << OCIE0B);				// Разрешаем прерывание по OCR0B
     b1a:	ee e6       	ldi	r30, 0x6E	; 110
     b1c:	f0 e0       	ldi	r31, 0x00	; 0
     b1e:	80 81       	ld	r24, Z
     b20:	84 60       	ori	r24, 0x04	; 4
     b22:	80 83       	st	Z, r24
	}
}
     b24:	ff 91       	pop	r31
     b26:	ef 91       	pop	r30
     b28:	9f 91       	pop	r25
     b2a:	8f 91       	pop	r24
     b2c:	2f 91       	pop	r18
     b2e:	0f 90       	pop	r0
     b30:	0f be       	out	0x3f, r0	; 63
     b32:	0f 90       	pop	r0
     b34:	1f 90       	pop	r1
     b36:	18 95       	reti

00000b38 <usartsoft_transmit>:
*	влево, создавая таким образом стартовый бит в младшем разряде. Задает счетчик бит = 10.
*/

void usartsoft_transmit(uint8_t tb)
{
	while(txbitcount);				// Ждем пока закончится передача предыдущего байта
     b38:	90 91 df 02 	lds	r25, 0x02DF	; 0x8002df <txbitcount>
     b3c:	91 11       	cpse	r25, r1
     b3e:	fc cf       	rjmp	.-8      	; 0xb38 <usartsoft_transmit>
	txbyte = (tb + 0xFF00) << 0x01; // Пишем в младшие разряды txbyte данные для передачи и сдвигаем влево на 1
     b40:	90 e0       	ldi	r25, 0x00	; 0
     b42:	9a 95       	dec	r25
     b44:	88 0f       	add	r24, r24
     b46:	99 1f       	adc	r25, r25
     b48:	90 93 e4 02 	sts	0x02E4, r25	; 0x8002e4 <txbyte+0x1>
     b4c:	80 93 e3 02 	sts	0x02E3, r24	; 0x8002e3 <txbyte>
	txbitcount = 0x0A;				// Задаем счетчик байт равным 10
     b50:	8a e0       	ldi	r24, 0x0A	; 10
     b52:	80 93 df 02 	sts	0x02DF, r24	; 0x8002df <txbitcount>
     b56:	08 95       	ret

00000b58 <usartsoft_recieve>:
*	Если в момент вызова функции идет прием, функция будет ждать его завершения. Если функцию вызвать дважды,
*	то первый раз она возвратит принятый байт, второй раз (-1).
*/

int16_t usartsoft_recieve(uint8_t* rb)
{
     b58:	fc 01       	movw	r30, r24
	if(rxbitcount < 0x09)	// Если счетчик бит на прием меньше 9
     b5a:	80 91 de 02 	lds	r24, 0x02DE	; 0x8002de <rxbitcount>
     b5e:	89 30       	cpi	r24, 0x09	; 9
     b60:	68 f4       	brcc	.+26     	; 0xb7c <usartsoft_recieve+0x24>
	{
		while(rxbitcount);	// Ждем пока завершится текущий прием
     b62:	90 91 de 02 	lds	r25, 0x02DE	; 0x8002de <rxbitcount>
     b66:	91 11       	cpse	r25, r1
     b68:	fc cf       	rjmp	.-8      	; 0xb62 <usartsoft_recieve+0xa>
		*rb = rxbyte;		// Пишем по адресу указателя принятый байт
     b6a:	80 91 e2 02 	lds	r24, 0x02E2	; 0x8002e2 <rxbyte>
     b6e:	80 83       	st	Z, r24
		rxbitcount = 0x09;	// Восстанавливаем значение счетчика бит
     b70:	89 e0       	ldi	r24, 0x09	; 9
     b72:	80 93 de 02 	sts	0x02DE, r24	; 0x8002de <rxbitcount>
		return (*rb);		// Возвращаемся
     b76:	80 81       	ld	r24, Z
     b78:	90 e0       	ldi	r25, 0x00	; 0
     b7a:	08 95       	ret
	}
	else
	{
		return (-1);		// Иначе возвращаем -1 (принимать нечего)
     b7c:	8f ef       	ldi	r24, 0xFF	; 255
     b7e:	9f ef       	ldi	r25, 0xFF	; 255
	}
}
     b80:	08 95       	ret

00000b82 <usartsoft_init>:
*	Инициализирует глобальные переменные и регистры микроконтроллера.
*/

void usartsoft_init()
{
	txbyte = 0xFFFF;		// Значение буфера на передачу - все единицы
     b82:	8f ef       	ldi	r24, 0xFF	; 255
     b84:	9f ef       	ldi	r25, 0xFF	; 255
     b86:	90 93 e4 02 	sts	0x02E4, r25	; 0x8002e4 <txbyte+0x1>
     b8a:	80 93 e3 02 	sts	0x02E3, r24	; 0x8002e3 <txbyte>
	rxbyte = 0x00;			// Значение буфера на прием - все нули
     b8e:	10 92 e2 02 	sts	0x02E2, r1	; 0x8002e2 <rxbyte>
	txbitcount = 0x00;		// Значение счетчика преедаваемых бит - ноль (ничего пока не передаем)
     b92:	10 92 df 02 	sts	0x02DF, r1	; 0x8002df <txbitcount>
	rxbitcount = 0x09;		// Значение счетчика бит на прием - 9 (ожидаем возможного приема)
     b96:	89 e0       	ldi	r24, 0x09	; 9
     b98:	80 93 de 02 	sts	0x02DE, r24	; 0x8002de <rxbitcount>
	
	TXDDR |= (1 << TXD);		// Задаем направление порта на передачу как выход
     b9c:	24 9a       	sbi	0x04, 4	; 4
	RXDDR &= ~(1 << RXD);		// Задаем направление порта на прием как вход
     b9e:	25 98       	cbi	0x04, 5	; 4
	TXPORT |= (1 << TXD);		// Пишем единицу в выход TXD
     ba0:	2c 9a       	sbi	0x05, 4	; 5
	RXPORT |= (1 << RXD);		// Подтягиваем к единице вход RXD
     ba2:	1d 9a       	sbi	0x03, 5	; 3
	OCR0A = BAUD_DIV;			// Задаем значение регистра OCR0A в соответствии с бодрейтом
     ba4:	8f ec       	ldi	r24, 0xCF	; 207
     ba6:	87 bd       	out	0x27, r24	; 39
	TIMSK0 |= (1 << OCIE0A);	// Разрешаем прерывание TIM0_COMPA
     ba8:	ee e6       	ldi	r30, 0x6E	; 110
     baa:	f0 e0       	ldi	r31, 0x00	; 0
     bac:	80 81       	ld	r24, Z
     bae:	82 60       	ori	r24, 0x02	; 2
     bb0:	80 83       	st	Z, r24
	TCCR0A |= (1 << WGM01);		// Режим таймера CTC (очистка TCNT0 по достижению OCR0A)
     bb2:	84 b5       	in	r24, 0x24	; 36
     bb4:	82 60       	ori	r24, 0x02	; 2
     bb6:	84 bd       	out	0x24, r24	; 36
	TCCR0B |= T_DIV;			// Задаем скорость счета таймера в соответствии с делителем
     bb8:	85 b5       	in	r24, 0x25	; 37
     bba:	82 60       	ori	r24, 0x02	; 2
     bbc:	85 bd       	out	0x25, r24	; 37
// 	EICRA |= (1 << ISC01);		// Задаем прерывание INT0 по заднему фронту импульса
	PCICR |= (1 << PCIE0);		// Выбираем Регистр управления прерыванием смены вывода; PCINT[7:0]
     bbe:	e8 e6       	ldi	r30, 0x68	; 104
     bc0:	f0 e0       	ldi	r31, 0x00	; 0
     bc2:	80 81       	ld	r24, Z
     bc4:	81 60       	ori	r24, 0x01	; 1
     bc6:	80 83       	st	Z, r24
	PCMSK0 |= (1 << PCINT0);	// Выбираем вывод PCINT5; PCINT[7:0]
     bc8:	eb e6       	ldi	r30, 0x6B	; 107
     bca:	f0 e0       	ldi	r31, 0x00	; 0
     bcc:	80 81       	ld	r24, Z
     bce:	81 60       	ori	r24, 0x01	; 1
     bd0:	80 83       	st	Z, r24
	sei();						// Разрешаем прерывания глобально
     bd2:	78 94       	sei
     bd4:	08 95       	ret

00000bd6 <__floatunsisf>:
     bd6:	e8 94       	clt
     bd8:	09 c0       	rjmp	.+18     	; 0xbec <__floatsisf+0x12>

00000bda <__floatsisf>:
     bda:	97 fb       	bst	r25, 7
     bdc:	3e f4       	brtc	.+14     	; 0xbec <__floatsisf+0x12>
     bde:	90 95       	com	r25
     be0:	80 95       	com	r24
     be2:	70 95       	com	r23
     be4:	61 95       	neg	r22
     be6:	7f 4f       	sbci	r23, 0xFF	; 255
     be8:	8f 4f       	sbci	r24, 0xFF	; 255
     bea:	9f 4f       	sbci	r25, 0xFF	; 255
     bec:	99 23       	and	r25, r25
     bee:	a9 f0       	breq	.+42     	; 0xc1a <__floatsisf+0x40>
     bf0:	f9 2f       	mov	r31, r25
     bf2:	96 e9       	ldi	r25, 0x96	; 150
     bf4:	bb 27       	eor	r27, r27
     bf6:	93 95       	inc	r25
     bf8:	f6 95       	lsr	r31
     bfa:	87 95       	ror	r24
     bfc:	77 95       	ror	r23
     bfe:	67 95       	ror	r22
     c00:	b7 95       	ror	r27
     c02:	f1 11       	cpse	r31, r1
     c04:	f8 cf       	rjmp	.-16     	; 0xbf6 <__floatsisf+0x1c>
     c06:	fa f4       	brpl	.+62     	; 0xc46 <__floatsisf+0x6c>
     c08:	bb 0f       	add	r27, r27
     c0a:	11 f4       	brne	.+4      	; 0xc10 <__floatsisf+0x36>
     c0c:	60 ff       	sbrs	r22, 0
     c0e:	1b c0       	rjmp	.+54     	; 0xc46 <__floatsisf+0x6c>
     c10:	6f 5f       	subi	r22, 0xFF	; 255
     c12:	7f 4f       	sbci	r23, 0xFF	; 255
     c14:	8f 4f       	sbci	r24, 0xFF	; 255
     c16:	9f 4f       	sbci	r25, 0xFF	; 255
     c18:	16 c0       	rjmp	.+44     	; 0xc46 <__floatsisf+0x6c>
     c1a:	88 23       	and	r24, r24
     c1c:	11 f0       	breq	.+4      	; 0xc22 <__floatsisf+0x48>
     c1e:	96 e9       	ldi	r25, 0x96	; 150
     c20:	11 c0       	rjmp	.+34     	; 0xc44 <__floatsisf+0x6a>
     c22:	77 23       	and	r23, r23
     c24:	21 f0       	breq	.+8      	; 0xc2e <__floatsisf+0x54>
     c26:	9e e8       	ldi	r25, 0x8E	; 142
     c28:	87 2f       	mov	r24, r23
     c2a:	76 2f       	mov	r23, r22
     c2c:	05 c0       	rjmp	.+10     	; 0xc38 <__floatsisf+0x5e>
     c2e:	66 23       	and	r22, r22
     c30:	71 f0       	breq	.+28     	; 0xc4e <__floatsisf+0x74>
     c32:	96 e8       	ldi	r25, 0x86	; 134
     c34:	86 2f       	mov	r24, r22
     c36:	70 e0       	ldi	r23, 0x00	; 0
     c38:	60 e0       	ldi	r22, 0x00	; 0
     c3a:	2a f0       	brmi	.+10     	; 0xc46 <__floatsisf+0x6c>
     c3c:	9a 95       	dec	r25
     c3e:	66 0f       	add	r22, r22
     c40:	77 1f       	adc	r23, r23
     c42:	88 1f       	adc	r24, r24
     c44:	da f7       	brpl	.-10     	; 0xc3c <__floatsisf+0x62>
     c46:	88 0f       	add	r24, r24
     c48:	96 95       	lsr	r25
     c4a:	87 95       	ror	r24
     c4c:	97 f9       	bld	r25, 7
     c4e:	08 95       	ret

00000c50 <__fp_inf>:
     c50:	97 f9       	bld	r25, 7
     c52:	9f 67       	ori	r25, 0x7F	; 127
     c54:	80 e8       	ldi	r24, 0x80	; 128
     c56:	70 e0       	ldi	r23, 0x00	; 0
     c58:	60 e0       	ldi	r22, 0x00	; 0
     c5a:	08 95       	ret

00000c5c <__fp_nan>:
     c5c:	9f ef       	ldi	r25, 0xFF	; 255
     c5e:	80 ec       	ldi	r24, 0xC0	; 192
     c60:	08 95       	ret

00000c62 <__fp_pscA>:
     c62:	00 24       	eor	r0, r0
     c64:	0a 94       	dec	r0
     c66:	16 16       	cp	r1, r22
     c68:	17 06       	cpc	r1, r23
     c6a:	18 06       	cpc	r1, r24
     c6c:	09 06       	cpc	r0, r25
     c6e:	08 95       	ret

00000c70 <__fp_pscB>:
     c70:	00 24       	eor	r0, r0
     c72:	0a 94       	dec	r0
     c74:	12 16       	cp	r1, r18
     c76:	13 06       	cpc	r1, r19
     c78:	14 06       	cpc	r1, r20
     c7a:	05 06       	cpc	r0, r21
     c7c:	08 95       	ret

00000c7e <__fp_round>:
     c7e:	09 2e       	mov	r0, r25
     c80:	03 94       	inc	r0
     c82:	00 0c       	add	r0, r0
     c84:	11 f4       	brne	.+4      	; 0xc8a <__fp_round+0xc>
     c86:	88 23       	and	r24, r24
     c88:	52 f0       	brmi	.+20     	; 0xc9e <__fp_round+0x20>
     c8a:	bb 0f       	add	r27, r27
     c8c:	40 f4       	brcc	.+16     	; 0xc9e <__fp_round+0x20>
     c8e:	bf 2b       	or	r27, r31
     c90:	11 f4       	brne	.+4      	; 0xc96 <__fp_round+0x18>
     c92:	60 ff       	sbrs	r22, 0
     c94:	04 c0       	rjmp	.+8      	; 0xc9e <__fp_round+0x20>
     c96:	6f 5f       	subi	r22, 0xFF	; 255
     c98:	7f 4f       	sbci	r23, 0xFF	; 255
     c9a:	8f 4f       	sbci	r24, 0xFF	; 255
     c9c:	9f 4f       	sbci	r25, 0xFF	; 255
     c9e:	08 95       	ret

00000ca0 <__fp_split3>:
     ca0:	57 fd       	sbrc	r21, 7
     ca2:	90 58       	subi	r25, 0x80	; 128
     ca4:	44 0f       	add	r20, r20
     ca6:	55 1f       	adc	r21, r21
     ca8:	59 f0       	breq	.+22     	; 0xcc0 <__fp_splitA+0x10>
     caa:	5f 3f       	cpi	r21, 0xFF	; 255
     cac:	71 f0       	breq	.+28     	; 0xcca <__fp_splitA+0x1a>
     cae:	47 95       	ror	r20

00000cb0 <__fp_splitA>:
     cb0:	88 0f       	add	r24, r24
     cb2:	97 fb       	bst	r25, 7
     cb4:	99 1f       	adc	r25, r25
     cb6:	61 f0       	breq	.+24     	; 0xcd0 <__fp_splitA+0x20>
     cb8:	9f 3f       	cpi	r25, 0xFF	; 255
     cba:	79 f0       	breq	.+30     	; 0xcda <__fp_splitA+0x2a>
     cbc:	87 95       	ror	r24
     cbe:	08 95       	ret
     cc0:	12 16       	cp	r1, r18
     cc2:	13 06       	cpc	r1, r19
     cc4:	14 06       	cpc	r1, r20
     cc6:	55 1f       	adc	r21, r21
     cc8:	f2 cf       	rjmp	.-28     	; 0xcae <__fp_split3+0xe>
     cca:	46 95       	lsr	r20
     ccc:	f1 df       	rcall	.-30     	; 0xcb0 <__fp_splitA>
     cce:	08 c0       	rjmp	.+16     	; 0xce0 <__fp_splitA+0x30>
     cd0:	16 16       	cp	r1, r22
     cd2:	17 06       	cpc	r1, r23
     cd4:	18 06       	cpc	r1, r24
     cd6:	99 1f       	adc	r25, r25
     cd8:	f1 cf       	rjmp	.-30     	; 0xcbc <__fp_splitA+0xc>
     cda:	86 95       	lsr	r24
     cdc:	71 05       	cpc	r23, r1
     cde:	61 05       	cpc	r22, r1
     ce0:	08 94       	sec
     ce2:	08 95       	ret

00000ce4 <__fp_zero>:
     ce4:	e8 94       	clt

00000ce6 <__fp_szero>:
     ce6:	bb 27       	eor	r27, r27
     ce8:	66 27       	eor	r22, r22
     cea:	77 27       	eor	r23, r23
     cec:	cb 01       	movw	r24, r22
     cee:	97 f9       	bld	r25, 7
     cf0:	08 95       	ret

00000cf2 <__mulsf3>:
     cf2:	0e 94 8c 06 	call	0xd18	; 0xd18 <__mulsf3x>
     cf6:	0c 94 3f 06 	jmp	0xc7e	; 0xc7e <__fp_round>
     cfa:	0e 94 31 06 	call	0xc62	; 0xc62 <__fp_pscA>
     cfe:	38 f0       	brcs	.+14     	; 0xd0e <__mulsf3+0x1c>
     d00:	0e 94 38 06 	call	0xc70	; 0xc70 <__fp_pscB>
     d04:	20 f0       	brcs	.+8      	; 0xd0e <__mulsf3+0x1c>
     d06:	95 23       	and	r25, r21
     d08:	11 f0       	breq	.+4      	; 0xd0e <__mulsf3+0x1c>
     d0a:	0c 94 28 06 	jmp	0xc50	; 0xc50 <__fp_inf>
     d0e:	0c 94 2e 06 	jmp	0xc5c	; 0xc5c <__fp_nan>
     d12:	11 24       	eor	r1, r1
     d14:	0c 94 73 06 	jmp	0xce6	; 0xce6 <__fp_szero>

00000d18 <__mulsf3x>:
     d18:	0e 94 50 06 	call	0xca0	; 0xca0 <__fp_split3>
     d1c:	70 f3       	brcs	.-36     	; 0xcfa <__mulsf3+0x8>

00000d1e <__mulsf3_pse>:
     d1e:	95 9f       	mul	r25, r21
     d20:	c1 f3       	breq	.-16     	; 0xd12 <__mulsf3+0x20>
     d22:	95 0f       	add	r25, r21
     d24:	50 e0       	ldi	r21, 0x00	; 0
     d26:	55 1f       	adc	r21, r21
     d28:	62 9f       	mul	r22, r18
     d2a:	f0 01       	movw	r30, r0
     d2c:	72 9f       	mul	r23, r18
     d2e:	bb 27       	eor	r27, r27
     d30:	f0 0d       	add	r31, r0
     d32:	b1 1d       	adc	r27, r1
     d34:	63 9f       	mul	r22, r19
     d36:	aa 27       	eor	r26, r26
     d38:	f0 0d       	add	r31, r0
     d3a:	b1 1d       	adc	r27, r1
     d3c:	aa 1f       	adc	r26, r26
     d3e:	64 9f       	mul	r22, r20
     d40:	66 27       	eor	r22, r22
     d42:	b0 0d       	add	r27, r0
     d44:	a1 1d       	adc	r26, r1
     d46:	66 1f       	adc	r22, r22
     d48:	82 9f       	mul	r24, r18
     d4a:	22 27       	eor	r18, r18
     d4c:	b0 0d       	add	r27, r0
     d4e:	a1 1d       	adc	r26, r1
     d50:	62 1f       	adc	r22, r18
     d52:	73 9f       	mul	r23, r19
     d54:	b0 0d       	add	r27, r0
     d56:	a1 1d       	adc	r26, r1
     d58:	62 1f       	adc	r22, r18
     d5a:	83 9f       	mul	r24, r19
     d5c:	a0 0d       	add	r26, r0
     d5e:	61 1d       	adc	r22, r1
     d60:	22 1f       	adc	r18, r18
     d62:	74 9f       	mul	r23, r20
     d64:	33 27       	eor	r19, r19
     d66:	a0 0d       	add	r26, r0
     d68:	61 1d       	adc	r22, r1
     d6a:	23 1f       	adc	r18, r19
     d6c:	84 9f       	mul	r24, r20
     d6e:	60 0d       	add	r22, r0
     d70:	21 1d       	adc	r18, r1
     d72:	82 2f       	mov	r24, r18
     d74:	76 2f       	mov	r23, r22
     d76:	6a 2f       	mov	r22, r26
     d78:	11 24       	eor	r1, r1
     d7a:	9f 57       	subi	r25, 0x7F	; 127
     d7c:	50 40       	sbci	r21, 0x00	; 0
     d7e:	9a f0       	brmi	.+38     	; 0xda6 <__mulsf3_pse+0x88>
     d80:	f1 f0       	breq	.+60     	; 0xdbe <__mulsf3_pse+0xa0>
     d82:	88 23       	and	r24, r24
     d84:	4a f0       	brmi	.+18     	; 0xd98 <__mulsf3_pse+0x7a>
     d86:	ee 0f       	add	r30, r30
     d88:	ff 1f       	adc	r31, r31
     d8a:	bb 1f       	adc	r27, r27
     d8c:	66 1f       	adc	r22, r22
     d8e:	77 1f       	adc	r23, r23
     d90:	88 1f       	adc	r24, r24
     d92:	91 50       	subi	r25, 0x01	; 1
     d94:	50 40       	sbci	r21, 0x00	; 0
     d96:	a9 f7       	brne	.-22     	; 0xd82 <__mulsf3_pse+0x64>
     d98:	9e 3f       	cpi	r25, 0xFE	; 254
     d9a:	51 05       	cpc	r21, r1
     d9c:	80 f0       	brcs	.+32     	; 0xdbe <__mulsf3_pse+0xa0>
     d9e:	0c 94 28 06 	jmp	0xc50	; 0xc50 <__fp_inf>
     da2:	0c 94 73 06 	jmp	0xce6	; 0xce6 <__fp_szero>
     da6:	5f 3f       	cpi	r21, 0xFF	; 255
     da8:	e4 f3       	brlt	.-8      	; 0xda2 <__mulsf3_pse+0x84>
     daa:	98 3e       	cpi	r25, 0xE8	; 232
     dac:	d4 f3       	brlt	.-12     	; 0xda2 <__mulsf3_pse+0x84>
     dae:	86 95       	lsr	r24
     db0:	77 95       	ror	r23
     db2:	67 95       	ror	r22
     db4:	b7 95       	ror	r27
     db6:	f7 95       	ror	r31
     db8:	e7 95       	ror	r30
     dba:	9f 5f       	subi	r25, 0xFF	; 255
     dbc:	c1 f7       	brne	.-16     	; 0xdae <__mulsf3_pse+0x90>
     dbe:	fe 2b       	or	r31, r30
     dc0:	88 0f       	add	r24, r24
     dc2:	91 1d       	adc	r25, r1
     dc4:	96 95       	lsr	r25
     dc6:	87 95       	ror	r24
     dc8:	97 f9       	bld	r25, 7
     dca:	08 95       	ret

00000dcc <vfprintf>:
     dcc:	a0 e1       	ldi	r26, 0x10	; 16
     dce:	b0 e0       	ldi	r27, 0x00	; 0
     dd0:	ec ee       	ldi	r30, 0xEC	; 236
     dd2:	f6 e0       	ldi	r31, 0x06	; 6
     dd4:	0c 94 69 0a 	jmp	0x14d2	; 0x14d2 <__prologue_saves__>
     dd8:	7c 01       	movw	r14, r24
     dda:	1b 01       	movw	r2, r22
     ddc:	6a 01       	movw	r12, r20
     dde:	fc 01       	movw	r30, r24
     de0:	17 82       	std	Z+7, r1	; 0x07
     de2:	16 82       	std	Z+6, r1	; 0x06
     de4:	83 81       	ldd	r24, Z+3	; 0x03
     de6:	81 ff       	sbrs	r24, 1
     de8:	44 c3       	rjmp	.+1672   	; 0x1472 <vfprintf+0x6a6>
     dea:	9e 01       	movw	r18, r28
     dec:	2f 5f       	subi	r18, 0xFF	; 255
     dee:	3f 4f       	sbci	r19, 0xFF	; 255
     df0:	39 01       	movw	r6, r18
     df2:	f7 01       	movw	r30, r14
     df4:	93 81       	ldd	r25, Z+3	; 0x03
     df6:	f1 01       	movw	r30, r2
     df8:	93 fd       	sbrc	r25, 3
     dfa:	85 91       	lpm	r24, Z+
     dfc:	93 ff       	sbrs	r25, 3
     dfe:	81 91       	ld	r24, Z+
     e00:	1f 01       	movw	r2, r30
     e02:	88 23       	and	r24, r24
     e04:	09 f4       	brne	.+2      	; 0xe08 <vfprintf+0x3c>
     e06:	31 c3       	rjmp	.+1634   	; 0x146a <vfprintf+0x69e>
     e08:	85 32       	cpi	r24, 0x25	; 37
     e0a:	39 f4       	brne	.+14     	; 0xe1a <vfprintf+0x4e>
     e0c:	93 fd       	sbrc	r25, 3
     e0e:	85 91       	lpm	r24, Z+
     e10:	93 ff       	sbrs	r25, 3
     e12:	81 91       	ld	r24, Z+
     e14:	1f 01       	movw	r2, r30
     e16:	85 32       	cpi	r24, 0x25	; 37
     e18:	39 f4       	brne	.+14     	; 0xe28 <vfprintf+0x5c>
     e1a:	b7 01       	movw	r22, r14
     e1c:	90 e0       	ldi	r25, 0x00	; 0
     e1e:	0e 94 8e 0b 	call	0x171c	; 0x171c <fputc>
     e22:	56 01       	movw	r10, r12
     e24:	65 01       	movw	r12, r10
     e26:	e5 cf       	rjmp	.-54     	; 0xdf2 <vfprintf+0x26>
     e28:	10 e0       	ldi	r17, 0x00	; 0
     e2a:	51 2c       	mov	r5, r1
     e2c:	91 2c       	mov	r9, r1
     e2e:	ff e1       	ldi	r31, 0x1F	; 31
     e30:	f9 15       	cp	r31, r9
     e32:	d8 f0       	brcs	.+54     	; 0xe6a <vfprintf+0x9e>
     e34:	8b 32       	cpi	r24, 0x2B	; 43
     e36:	79 f0       	breq	.+30     	; 0xe56 <vfprintf+0x8a>
     e38:	38 f4       	brcc	.+14     	; 0xe48 <vfprintf+0x7c>
     e3a:	80 32       	cpi	r24, 0x20	; 32
     e3c:	79 f0       	breq	.+30     	; 0xe5c <vfprintf+0x90>
     e3e:	83 32       	cpi	r24, 0x23	; 35
     e40:	a1 f4       	brne	.+40     	; 0xe6a <vfprintf+0x9e>
     e42:	f9 2d       	mov	r31, r9
     e44:	f0 61       	ori	r31, 0x10	; 16
     e46:	2e c0       	rjmp	.+92     	; 0xea4 <vfprintf+0xd8>
     e48:	8d 32       	cpi	r24, 0x2D	; 45
     e4a:	61 f0       	breq	.+24     	; 0xe64 <vfprintf+0x98>
     e4c:	80 33       	cpi	r24, 0x30	; 48
     e4e:	69 f4       	brne	.+26     	; 0xe6a <vfprintf+0x9e>
     e50:	29 2d       	mov	r18, r9
     e52:	21 60       	ori	r18, 0x01	; 1
     e54:	2d c0       	rjmp	.+90     	; 0xeb0 <vfprintf+0xe4>
     e56:	39 2d       	mov	r19, r9
     e58:	32 60       	ori	r19, 0x02	; 2
     e5a:	93 2e       	mov	r9, r19
     e5c:	89 2d       	mov	r24, r9
     e5e:	84 60       	ori	r24, 0x04	; 4
     e60:	98 2e       	mov	r9, r24
     e62:	2a c0       	rjmp	.+84     	; 0xeb8 <vfprintf+0xec>
     e64:	e9 2d       	mov	r30, r9
     e66:	e8 60       	ori	r30, 0x08	; 8
     e68:	15 c0       	rjmp	.+42     	; 0xe94 <vfprintf+0xc8>
     e6a:	97 fc       	sbrc	r9, 7
     e6c:	2d c0       	rjmp	.+90     	; 0xec8 <vfprintf+0xfc>
     e6e:	20 ed       	ldi	r18, 0xD0	; 208
     e70:	28 0f       	add	r18, r24
     e72:	2a 30       	cpi	r18, 0x0A	; 10
     e74:	88 f4       	brcc	.+34     	; 0xe98 <vfprintf+0xcc>
     e76:	96 fe       	sbrs	r9, 6
     e78:	06 c0       	rjmp	.+12     	; 0xe86 <vfprintf+0xba>
     e7a:	3a e0       	ldi	r19, 0x0A	; 10
     e7c:	13 9f       	mul	r17, r19
     e7e:	20 0d       	add	r18, r0
     e80:	11 24       	eor	r1, r1
     e82:	12 2f       	mov	r17, r18
     e84:	19 c0       	rjmp	.+50     	; 0xeb8 <vfprintf+0xec>
     e86:	8a e0       	ldi	r24, 0x0A	; 10
     e88:	58 9e       	mul	r5, r24
     e8a:	20 0d       	add	r18, r0
     e8c:	11 24       	eor	r1, r1
     e8e:	52 2e       	mov	r5, r18
     e90:	e9 2d       	mov	r30, r9
     e92:	e0 62       	ori	r30, 0x20	; 32
     e94:	9e 2e       	mov	r9, r30
     e96:	10 c0       	rjmp	.+32     	; 0xeb8 <vfprintf+0xec>
     e98:	8e 32       	cpi	r24, 0x2E	; 46
     e9a:	31 f4       	brne	.+12     	; 0xea8 <vfprintf+0xdc>
     e9c:	96 fc       	sbrc	r9, 6
     e9e:	e5 c2       	rjmp	.+1482   	; 0x146a <vfprintf+0x69e>
     ea0:	f9 2d       	mov	r31, r9
     ea2:	f0 64       	ori	r31, 0x40	; 64
     ea4:	9f 2e       	mov	r9, r31
     ea6:	08 c0       	rjmp	.+16     	; 0xeb8 <vfprintf+0xec>
     ea8:	8c 36       	cpi	r24, 0x6C	; 108
     eaa:	21 f4       	brne	.+8      	; 0xeb4 <vfprintf+0xe8>
     eac:	29 2d       	mov	r18, r9
     eae:	20 68       	ori	r18, 0x80	; 128
     eb0:	92 2e       	mov	r9, r18
     eb2:	02 c0       	rjmp	.+4      	; 0xeb8 <vfprintf+0xec>
     eb4:	88 36       	cpi	r24, 0x68	; 104
     eb6:	41 f4       	brne	.+16     	; 0xec8 <vfprintf+0xfc>
     eb8:	f1 01       	movw	r30, r2
     eba:	93 fd       	sbrc	r25, 3
     ebc:	85 91       	lpm	r24, Z+
     ebe:	93 ff       	sbrs	r25, 3
     ec0:	81 91       	ld	r24, Z+
     ec2:	1f 01       	movw	r2, r30
     ec4:	81 11       	cpse	r24, r1
     ec6:	b3 cf       	rjmp	.-154    	; 0xe2e <vfprintf+0x62>
     ec8:	9b eb       	ldi	r25, 0xBB	; 187
     eca:	98 0f       	add	r25, r24
     ecc:	93 30       	cpi	r25, 0x03	; 3
     ece:	20 f4       	brcc	.+8      	; 0xed8 <vfprintf+0x10c>
     ed0:	99 2d       	mov	r25, r9
     ed2:	90 61       	ori	r25, 0x10	; 16
     ed4:	80 5e       	subi	r24, 0xE0	; 224
     ed6:	07 c0       	rjmp	.+14     	; 0xee6 <vfprintf+0x11a>
     ed8:	9b e9       	ldi	r25, 0x9B	; 155
     eda:	98 0f       	add	r25, r24
     edc:	93 30       	cpi	r25, 0x03	; 3
     ede:	08 f0       	brcs	.+2      	; 0xee2 <vfprintf+0x116>
     ee0:	66 c1       	rjmp	.+716    	; 0x11ae <vfprintf+0x3e2>
     ee2:	99 2d       	mov	r25, r9
     ee4:	9f 7e       	andi	r25, 0xEF	; 239
     ee6:	96 ff       	sbrs	r25, 6
     ee8:	16 e0       	ldi	r17, 0x06	; 6
     eea:	9f 73       	andi	r25, 0x3F	; 63
     eec:	99 2e       	mov	r9, r25
     eee:	85 36       	cpi	r24, 0x65	; 101
     ef0:	19 f4       	brne	.+6      	; 0xef8 <vfprintf+0x12c>
     ef2:	90 64       	ori	r25, 0x40	; 64
     ef4:	99 2e       	mov	r9, r25
     ef6:	08 c0       	rjmp	.+16     	; 0xf08 <vfprintf+0x13c>
     ef8:	86 36       	cpi	r24, 0x66	; 102
     efa:	21 f4       	brne	.+8      	; 0xf04 <vfprintf+0x138>
     efc:	39 2f       	mov	r19, r25
     efe:	30 68       	ori	r19, 0x80	; 128
     f00:	93 2e       	mov	r9, r19
     f02:	02 c0       	rjmp	.+4      	; 0xf08 <vfprintf+0x13c>
     f04:	11 11       	cpse	r17, r1
     f06:	11 50       	subi	r17, 0x01	; 1
     f08:	97 fe       	sbrs	r9, 7
     f0a:	07 c0       	rjmp	.+14     	; 0xf1a <vfprintf+0x14e>
     f0c:	1c 33       	cpi	r17, 0x3C	; 60
     f0e:	50 f4       	brcc	.+20     	; 0xf24 <vfprintf+0x158>
     f10:	44 24       	eor	r4, r4
     f12:	43 94       	inc	r4
     f14:	41 0e       	add	r4, r17
     f16:	27 e0       	ldi	r18, 0x07	; 7
     f18:	0b c0       	rjmp	.+22     	; 0xf30 <vfprintf+0x164>
     f1a:	18 30       	cpi	r17, 0x08	; 8
     f1c:	38 f0       	brcs	.+14     	; 0xf2c <vfprintf+0x160>
     f1e:	27 e0       	ldi	r18, 0x07	; 7
     f20:	17 e0       	ldi	r17, 0x07	; 7
     f22:	05 c0       	rjmp	.+10     	; 0xf2e <vfprintf+0x162>
     f24:	27 e0       	ldi	r18, 0x07	; 7
     f26:	9c e3       	ldi	r25, 0x3C	; 60
     f28:	49 2e       	mov	r4, r25
     f2a:	02 c0       	rjmp	.+4      	; 0xf30 <vfprintf+0x164>
     f2c:	21 2f       	mov	r18, r17
     f2e:	41 2c       	mov	r4, r1
     f30:	56 01       	movw	r10, r12
     f32:	84 e0       	ldi	r24, 0x04	; 4
     f34:	a8 0e       	add	r10, r24
     f36:	b1 1c       	adc	r11, r1
     f38:	f6 01       	movw	r30, r12
     f3a:	60 81       	ld	r22, Z
     f3c:	71 81       	ldd	r23, Z+1	; 0x01
     f3e:	82 81       	ldd	r24, Z+2	; 0x02
     f40:	93 81       	ldd	r25, Z+3	; 0x03
     f42:	04 2d       	mov	r16, r4
     f44:	a3 01       	movw	r20, r6
     f46:	0e 94 a0 0a 	call	0x1540	; 0x1540 <__ftoa_engine>
     f4a:	6c 01       	movw	r12, r24
     f4c:	f9 81       	ldd	r31, Y+1	; 0x01
     f4e:	fc 87       	std	Y+12, r31	; 0x0c
     f50:	f0 ff       	sbrs	r31, 0
     f52:	02 c0       	rjmp	.+4      	; 0xf58 <vfprintf+0x18c>
     f54:	f3 ff       	sbrs	r31, 3
     f56:	06 c0       	rjmp	.+12     	; 0xf64 <vfprintf+0x198>
     f58:	91 fc       	sbrc	r9, 1
     f5a:	06 c0       	rjmp	.+12     	; 0xf68 <vfprintf+0x19c>
     f5c:	92 fe       	sbrs	r9, 2
     f5e:	06 c0       	rjmp	.+12     	; 0xf6c <vfprintf+0x1a0>
     f60:	00 e2       	ldi	r16, 0x20	; 32
     f62:	05 c0       	rjmp	.+10     	; 0xf6e <vfprintf+0x1a2>
     f64:	0d e2       	ldi	r16, 0x2D	; 45
     f66:	03 c0       	rjmp	.+6      	; 0xf6e <vfprintf+0x1a2>
     f68:	0b e2       	ldi	r16, 0x2B	; 43
     f6a:	01 c0       	rjmp	.+2      	; 0xf6e <vfprintf+0x1a2>
     f6c:	00 e0       	ldi	r16, 0x00	; 0
     f6e:	8c 85       	ldd	r24, Y+12	; 0x0c
     f70:	8c 70       	andi	r24, 0x0C	; 12
     f72:	19 f0       	breq	.+6      	; 0xf7a <vfprintf+0x1ae>
     f74:	01 11       	cpse	r16, r1
     f76:	5a c2       	rjmp	.+1204   	; 0x142c <vfprintf+0x660>
     f78:	9b c2       	rjmp	.+1334   	; 0x14b0 <vfprintf+0x6e4>
     f7a:	97 fe       	sbrs	r9, 7
     f7c:	10 c0       	rjmp	.+32     	; 0xf9e <vfprintf+0x1d2>
     f7e:	4c 0c       	add	r4, r12
     f80:	fc 85       	ldd	r31, Y+12	; 0x0c
     f82:	f4 ff       	sbrs	r31, 4
     f84:	04 c0       	rjmp	.+8      	; 0xf8e <vfprintf+0x1c2>
     f86:	8a 81       	ldd	r24, Y+2	; 0x02
     f88:	81 33       	cpi	r24, 0x31	; 49
     f8a:	09 f4       	brne	.+2      	; 0xf8e <vfprintf+0x1c2>
     f8c:	4a 94       	dec	r4
     f8e:	14 14       	cp	r1, r4
     f90:	74 f5       	brge	.+92     	; 0xfee <vfprintf+0x222>
     f92:	28 e0       	ldi	r18, 0x08	; 8
     f94:	24 15       	cp	r18, r4
     f96:	78 f5       	brcc	.+94     	; 0xff6 <vfprintf+0x22a>
     f98:	88 e0       	ldi	r24, 0x08	; 8
     f9a:	48 2e       	mov	r4, r24
     f9c:	2c c0       	rjmp	.+88     	; 0xff6 <vfprintf+0x22a>
     f9e:	96 fc       	sbrc	r9, 6
     fa0:	2a c0       	rjmp	.+84     	; 0xff6 <vfprintf+0x22a>
     fa2:	81 2f       	mov	r24, r17
     fa4:	90 e0       	ldi	r25, 0x00	; 0
     fa6:	8c 15       	cp	r24, r12
     fa8:	9d 05       	cpc	r25, r13
     faa:	9c f0       	brlt	.+38     	; 0xfd2 <vfprintf+0x206>
     fac:	3c ef       	ldi	r19, 0xFC	; 252
     fae:	c3 16       	cp	r12, r19
     fb0:	3f ef       	ldi	r19, 0xFF	; 255
     fb2:	d3 06       	cpc	r13, r19
     fb4:	74 f0       	brlt	.+28     	; 0xfd2 <vfprintf+0x206>
     fb6:	89 2d       	mov	r24, r9
     fb8:	80 68       	ori	r24, 0x80	; 128
     fba:	98 2e       	mov	r9, r24
     fbc:	0a c0       	rjmp	.+20     	; 0xfd2 <vfprintf+0x206>
     fbe:	e2 e0       	ldi	r30, 0x02	; 2
     fc0:	f0 e0       	ldi	r31, 0x00	; 0
     fc2:	ec 0f       	add	r30, r28
     fc4:	fd 1f       	adc	r31, r29
     fc6:	e1 0f       	add	r30, r17
     fc8:	f1 1d       	adc	r31, r1
     fca:	80 81       	ld	r24, Z
     fcc:	80 33       	cpi	r24, 0x30	; 48
     fce:	19 f4       	brne	.+6      	; 0xfd6 <vfprintf+0x20a>
     fd0:	11 50       	subi	r17, 0x01	; 1
     fd2:	11 11       	cpse	r17, r1
     fd4:	f4 cf       	rjmp	.-24     	; 0xfbe <vfprintf+0x1f2>
     fd6:	97 fe       	sbrs	r9, 7
     fd8:	0e c0       	rjmp	.+28     	; 0xff6 <vfprintf+0x22a>
     fda:	44 24       	eor	r4, r4
     fdc:	43 94       	inc	r4
     fde:	41 0e       	add	r4, r17
     fe0:	81 2f       	mov	r24, r17
     fe2:	90 e0       	ldi	r25, 0x00	; 0
     fe4:	c8 16       	cp	r12, r24
     fe6:	d9 06       	cpc	r13, r25
     fe8:	2c f4       	brge	.+10     	; 0xff4 <vfprintf+0x228>
     fea:	1c 19       	sub	r17, r12
     fec:	04 c0       	rjmp	.+8      	; 0xff6 <vfprintf+0x22a>
     fee:	44 24       	eor	r4, r4
     ff0:	43 94       	inc	r4
     ff2:	01 c0       	rjmp	.+2      	; 0xff6 <vfprintf+0x22a>
     ff4:	10 e0       	ldi	r17, 0x00	; 0
     ff6:	97 fe       	sbrs	r9, 7
     ff8:	06 c0       	rjmp	.+12     	; 0x1006 <vfprintf+0x23a>
     ffa:	1c 14       	cp	r1, r12
     ffc:	1d 04       	cpc	r1, r13
     ffe:	34 f4       	brge	.+12     	; 0x100c <vfprintf+0x240>
    1000:	c6 01       	movw	r24, r12
    1002:	01 96       	adiw	r24, 0x01	; 1
    1004:	05 c0       	rjmp	.+10     	; 0x1010 <vfprintf+0x244>
    1006:	85 e0       	ldi	r24, 0x05	; 5
    1008:	90 e0       	ldi	r25, 0x00	; 0
    100a:	02 c0       	rjmp	.+4      	; 0x1010 <vfprintf+0x244>
    100c:	81 e0       	ldi	r24, 0x01	; 1
    100e:	90 e0       	ldi	r25, 0x00	; 0
    1010:	01 11       	cpse	r16, r1
    1012:	01 96       	adiw	r24, 0x01	; 1
    1014:	11 23       	and	r17, r17
    1016:	31 f0       	breq	.+12     	; 0x1024 <vfprintf+0x258>
    1018:	21 2f       	mov	r18, r17
    101a:	30 e0       	ldi	r19, 0x00	; 0
    101c:	2f 5f       	subi	r18, 0xFF	; 255
    101e:	3f 4f       	sbci	r19, 0xFF	; 255
    1020:	82 0f       	add	r24, r18
    1022:	93 1f       	adc	r25, r19
    1024:	25 2d       	mov	r18, r5
    1026:	30 e0       	ldi	r19, 0x00	; 0
    1028:	82 17       	cp	r24, r18
    102a:	93 07       	cpc	r25, r19
    102c:	14 f4       	brge	.+4      	; 0x1032 <vfprintf+0x266>
    102e:	58 1a       	sub	r5, r24
    1030:	01 c0       	rjmp	.+2      	; 0x1034 <vfprintf+0x268>
    1032:	51 2c       	mov	r5, r1
    1034:	89 2d       	mov	r24, r9
    1036:	89 70       	andi	r24, 0x09	; 9
    1038:	49 f4       	brne	.+18     	; 0x104c <vfprintf+0x280>
    103a:	55 20       	and	r5, r5
    103c:	39 f0       	breq	.+14     	; 0x104c <vfprintf+0x280>
    103e:	b7 01       	movw	r22, r14
    1040:	80 e2       	ldi	r24, 0x20	; 32
    1042:	90 e0       	ldi	r25, 0x00	; 0
    1044:	0e 94 8e 0b 	call	0x171c	; 0x171c <fputc>
    1048:	5a 94       	dec	r5
    104a:	f7 cf       	rjmp	.-18     	; 0x103a <vfprintf+0x26e>
    104c:	00 23       	and	r16, r16
    104e:	29 f0       	breq	.+10     	; 0x105a <vfprintf+0x28e>
    1050:	b7 01       	movw	r22, r14
    1052:	80 2f       	mov	r24, r16
    1054:	90 e0       	ldi	r25, 0x00	; 0
    1056:	0e 94 8e 0b 	call	0x171c	; 0x171c <fputc>
    105a:	93 fc       	sbrc	r9, 3
    105c:	09 c0       	rjmp	.+18     	; 0x1070 <vfprintf+0x2a4>
    105e:	55 20       	and	r5, r5
    1060:	39 f0       	breq	.+14     	; 0x1070 <vfprintf+0x2a4>
    1062:	b7 01       	movw	r22, r14
    1064:	80 e3       	ldi	r24, 0x30	; 48
    1066:	90 e0       	ldi	r25, 0x00	; 0
    1068:	0e 94 8e 0b 	call	0x171c	; 0x171c <fputc>
    106c:	5a 94       	dec	r5
    106e:	f7 cf       	rjmp	.-18     	; 0x105e <vfprintf+0x292>
    1070:	97 fe       	sbrs	r9, 7
    1072:	4c c0       	rjmp	.+152    	; 0x110c <vfprintf+0x340>
    1074:	46 01       	movw	r8, r12
    1076:	d7 fe       	sbrs	r13, 7
    1078:	02 c0       	rjmp	.+4      	; 0x107e <vfprintf+0x2b2>
    107a:	81 2c       	mov	r8, r1
    107c:	91 2c       	mov	r9, r1
    107e:	c6 01       	movw	r24, r12
    1080:	88 19       	sub	r24, r8
    1082:	99 09       	sbc	r25, r9
    1084:	f3 01       	movw	r30, r6
    1086:	e8 0f       	add	r30, r24
    1088:	f9 1f       	adc	r31, r25
    108a:	fe 87       	std	Y+14, r31	; 0x0e
    108c:	ed 87       	std	Y+13, r30	; 0x0d
    108e:	96 01       	movw	r18, r12
    1090:	24 19       	sub	r18, r4
    1092:	31 09       	sbc	r19, r1
    1094:	38 8b       	std	Y+16, r19	; 0x10
    1096:	2f 87       	std	Y+15, r18	; 0x0f
    1098:	01 2f       	mov	r16, r17
    109a:	10 e0       	ldi	r17, 0x00	; 0
    109c:	11 95       	neg	r17
    109e:	01 95       	neg	r16
    10a0:	11 09       	sbc	r17, r1
    10a2:	3f ef       	ldi	r19, 0xFF	; 255
    10a4:	83 16       	cp	r8, r19
    10a6:	93 06       	cpc	r9, r19
    10a8:	29 f4       	brne	.+10     	; 0x10b4 <vfprintf+0x2e8>
    10aa:	b7 01       	movw	r22, r14
    10ac:	8e e2       	ldi	r24, 0x2E	; 46
    10ae:	90 e0       	ldi	r25, 0x00	; 0
    10b0:	0e 94 8e 0b 	call	0x171c	; 0x171c <fputc>
    10b4:	c8 14       	cp	r12, r8
    10b6:	d9 04       	cpc	r13, r9
    10b8:	4c f0       	brlt	.+18     	; 0x10cc <vfprintf+0x300>
    10ba:	8f 85       	ldd	r24, Y+15	; 0x0f
    10bc:	98 89       	ldd	r25, Y+16	; 0x10
    10be:	88 15       	cp	r24, r8
    10c0:	99 05       	cpc	r25, r9
    10c2:	24 f4       	brge	.+8      	; 0x10cc <vfprintf+0x300>
    10c4:	ed 85       	ldd	r30, Y+13	; 0x0d
    10c6:	fe 85       	ldd	r31, Y+14	; 0x0e
    10c8:	81 81       	ldd	r24, Z+1	; 0x01
    10ca:	01 c0       	rjmp	.+2      	; 0x10ce <vfprintf+0x302>
    10cc:	80 e3       	ldi	r24, 0x30	; 48
    10ce:	f1 e0       	ldi	r31, 0x01	; 1
    10d0:	8f 1a       	sub	r8, r31
    10d2:	91 08       	sbc	r9, r1
    10d4:	2d 85       	ldd	r18, Y+13	; 0x0d
    10d6:	3e 85       	ldd	r19, Y+14	; 0x0e
    10d8:	2f 5f       	subi	r18, 0xFF	; 255
    10da:	3f 4f       	sbci	r19, 0xFF	; 255
    10dc:	3e 87       	std	Y+14, r19	; 0x0e
    10de:	2d 87       	std	Y+13, r18	; 0x0d
    10e0:	80 16       	cp	r8, r16
    10e2:	91 06       	cpc	r9, r17
    10e4:	2c f0       	brlt	.+10     	; 0x10f0 <vfprintf+0x324>
    10e6:	b7 01       	movw	r22, r14
    10e8:	90 e0       	ldi	r25, 0x00	; 0
    10ea:	0e 94 8e 0b 	call	0x171c	; 0x171c <fputc>
    10ee:	d9 cf       	rjmp	.-78     	; 0x10a2 <vfprintf+0x2d6>
    10f0:	c8 14       	cp	r12, r8
    10f2:	d9 04       	cpc	r13, r9
    10f4:	41 f4       	brne	.+16     	; 0x1106 <vfprintf+0x33a>
    10f6:	9a 81       	ldd	r25, Y+2	; 0x02
    10f8:	96 33       	cpi	r25, 0x36	; 54
    10fa:	20 f4       	brcc	.+8      	; 0x1104 <vfprintf+0x338>
    10fc:	95 33       	cpi	r25, 0x35	; 53
    10fe:	19 f4       	brne	.+6      	; 0x1106 <vfprintf+0x33a>
    1100:	3c 85       	ldd	r19, Y+12	; 0x0c
    1102:	34 ff       	sbrs	r19, 4
    1104:	81 e3       	ldi	r24, 0x31	; 49
    1106:	b7 01       	movw	r22, r14
    1108:	90 e0       	ldi	r25, 0x00	; 0
    110a:	4e c0       	rjmp	.+156    	; 0x11a8 <vfprintf+0x3dc>
    110c:	8a 81       	ldd	r24, Y+2	; 0x02
    110e:	81 33       	cpi	r24, 0x31	; 49
    1110:	19 f0       	breq	.+6      	; 0x1118 <vfprintf+0x34c>
    1112:	9c 85       	ldd	r25, Y+12	; 0x0c
    1114:	9f 7e       	andi	r25, 0xEF	; 239
    1116:	9c 87       	std	Y+12, r25	; 0x0c
    1118:	b7 01       	movw	r22, r14
    111a:	90 e0       	ldi	r25, 0x00	; 0
    111c:	0e 94 8e 0b 	call	0x171c	; 0x171c <fputc>
    1120:	11 11       	cpse	r17, r1
    1122:	05 c0       	rjmp	.+10     	; 0x112e <vfprintf+0x362>
    1124:	94 fc       	sbrc	r9, 4
    1126:	18 c0       	rjmp	.+48     	; 0x1158 <vfprintf+0x38c>
    1128:	85 e6       	ldi	r24, 0x65	; 101
    112a:	90 e0       	ldi	r25, 0x00	; 0
    112c:	17 c0       	rjmp	.+46     	; 0x115c <vfprintf+0x390>
    112e:	b7 01       	movw	r22, r14
    1130:	8e e2       	ldi	r24, 0x2E	; 46
    1132:	90 e0       	ldi	r25, 0x00	; 0
    1134:	0e 94 8e 0b 	call	0x171c	; 0x171c <fputc>
    1138:	1e 5f       	subi	r17, 0xFE	; 254
    113a:	82 e0       	ldi	r24, 0x02	; 2
    113c:	01 e0       	ldi	r16, 0x01	; 1
    113e:	08 0f       	add	r16, r24
    1140:	f3 01       	movw	r30, r6
    1142:	e8 0f       	add	r30, r24
    1144:	f1 1d       	adc	r31, r1
    1146:	80 81       	ld	r24, Z
    1148:	b7 01       	movw	r22, r14
    114a:	90 e0       	ldi	r25, 0x00	; 0
    114c:	0e 94 8e 0b 	call	0x171c	; 0x171c <fputc>
    1150:	80 2f       	mov	r24, r16
    1152:	01 13       	cpse	r16, r17
    1154:	f3 cf       	rjmp	.-26     	; 0x113c <vfprintf+0x370>
    1156:	e6 cf       	rjmp	.-52     	; 0x1124 <vfprintf+0x358>
    1158:	85 e4       	ldi	r24, 0x45	; 69
    115a:	90 e0       	ldi	r25, 0x00	; 0
    115c:	b7 01       	movw	r22, r14
    115e:	0e 94 8e 0b 	call	0x171c	; 0x171c <fputc>
    1162:	d7 fc       	sbrc	r13, 7
    1164:	06 c0       	rjmp	.+12     	; 0x1172 <vfprintf+0x3a6>
    1166:	c1 14       	cp	r12, r1
    1168:	d1 04       	cpc	r13, r1
    116a:	41 f4       	brne	.+16     	; 0x117c <vfprintf+0x3b0>
    116c:	ec 85       	ldd	r30, Y+12	; 0x0c
    116e:	e4 ff       	sbrs	r30, 4
    1170:	05 c0       	rjmp	.+10     	; 0x117c <vfprintf+0x3b0>
    1172:	d1 94       	neg	r13
    1174:	c1 94       	neg	r12
    1176:	d1 08       	sbc	r13, r1
    1178:	8d e2       	ldi	r24, 0x2D	; 45
    117a:	01 c0       	rjmp	.+2      	; 0x117e <vfprintf+0x3b2>
    117c:	8b e2       	ldi	r24, 0x2B	; 43
    117e:	b7 01       	movw	r22, r14
    1180:	90 e0       	ldi	r25, 0x00	; 0
    1182:	0e 94 8e 0b 	call	0x171c	; 0x171c <fputc>
    1186:	80 e3       	ldi	r24, 0x30	; 48
    1188:	2a e0       	ldi	r18, 0x0A	; 10
    118a:	c2 16       	cp	r12, r18
    118c:	d1 04       	cpc	r13, r1
    118e:	2c f0       	brlt	.+10     	; 0x119a <vfprintf+0x3ce>
    1190:	8f 5f       	subi	r24, 0xFF	; 255
    1192:	fa e0       	ldi	r31, 0x0A	; 10
    1194:	cf 1a       	sub	r12, r31
    1196:	d1 08       	sbc	r13, r1
    1198:	f7 cf       	rjmp	.-18     	; 0x1188 <vfprintf+0x3bc>
    119a:	b7 01       	movw	r22, r14
    119c:	90 e0       	ldi	r25, 0x00	; 0
    119e:	0e 94 8e 0b 	call	0x171c	; 0x171c <fputc>
    11a2:	b7 01       	movw	r22, r14
    11a4:	c6 01       	movw	r24, r12
    11a6:	c0 96       	adiw	r24, 0x30	; 48
    11a8:	0e 94 8e 0b 	call	0x171c	; 0x171c <fputc>
    11ac:	54 c1       	rjmp	.+680    	; 0x1456 <vfprintf+0x68a>
    11ae:	83 36       	cpi	r24, 0x63	; 99
    11b0:	31 f0       	breq	.+12     	; 0x11be <vfprintf+0x3f2>
    11b2:	83 37       	cpi	r24, 0x73	; 115
    11b4:	79 f0       	breq	.+30     	; 0x11d4 <vfprintf+0x408>
    11b6:	83 35       	cpi	r24, 0x53	; 83
    11b8:	09 f0       	breq	.+2      	; 0x11bc <vfprintf+0x3f0>
    11ba:	56 c0       	rjmp	.+172    	; 0x1268 <vfprintf+0x49c>
    11bc:	20 c0       	rjmp	.+64     	; 0x11fe <vfprintf+0x432>
    11be:	56 01       	movw	r10, r12
    11c0:	32 e0       	ldi	r19, 0x02	; 2
    11c2:	a3 0e       	add	r10, r19
    11c4:	b1 1c       	adc	r11, r1
    11c6:	f6 01       	movw	r30, r12
    11c8:	80 81       	ld	r24, Z
    11ca:	89 83       	std	Y+1, r24	; 0x01
    11cc:	01 e0       	ldi	r16, 0x01	; 1
    11ce:	10 e0       	ldi	r17, 0x00	; 0
    11d0:	63 01       	movw	r12, r6
    11d2:	12 c0       	rjmp	.+36     	; 0x11f8 <vfprintf+0x42c>
    11d4:	56 01       	movw	r10, r12
    11d6:	f2 e0       	ldi	r31, 0x02	; 2
    11d8:	af 0e       	add	r10, r31
    11da:	b1 1c       	adc	r11, r1
    11dc:	f6 01       	movw	r30, r12
    11de:	c0 80       	ld	r12, Z
    11e0:	d1 80       	ldd	r13, Z+1	; 0x01
    11e2:	96 fe       	sbrs	r9, 6
    11e4:	03 c0       	rjmp	.+6      	; 0x11ec <vfprintf+0x420>
    11e6:	61 2f       	mov	r22, r17
    11e8:	70 e0       	ldi	r23, 0x00	; 0
    11ea:	02 c0       	rjmp	.+4      	; 0x11f0 <vfprintf+0x424>
    11ec:	6f ef       	ldi	r22, 0xFF	; 255
    11ee:	7f ef       	ldi	r23, 0xFF	; 255
    11f0:	c6 01       	movw	r24, r12
    11f2:	0e 94 83 0b 	call	0x1706	; 0x1706 <strnlen>
    11f6:	8c 01       	movw	r16, r24
    11f8:	f9 2d       	mov	r31, r9
    11fa:	ff 77       	andi	r31, 0x7F	; 127
    11fc:	14 c0       	rjmp	.+40     	; 0x1226 <vfprintf+0x45a>
    11fe:	56 01       	movw	r10, r12
    1200:	22 e0       	ldi	r18, 0x02	; 2
    1202:	a2 0e       	add	r10, r18
    1204:	b1 1c       	adc	r11, r1
    1206:	f6 01       	movw	r30, r12
    1208:	c0 80       	ld	r12, Z
    120a:	d1 80       	ldd	r13, Z+1	; 0x01
    120c:	96 fe       	sbrs	r9, 6
    120e:	03 c0       	rjmp	.+6      	; 0x1216 <vfprintf+0x44a>
    1210:	61 2f       	mov	r22, r17
    1212:	70 e0       	ldi	r23, 0x00	; 0
    1214:	02 c0       	rjmp	.+4      	; 0x121a <vfprintf+0x44e>
    1216:	6f ef       	ldi	r22, 0xFF	; 255
    1218:	7f ef       	ldi	r23, 0xFF	; 255
    121a:	c6 01       	movw	r24, r12
    121c:	0e 94 78 0b 	call	0x16f0	; 0x16f0 <strnlen_P>
    1220:	8c 01       	movw	r16, r24
    1222:	f9 2d       	mov	r31, r9
    1224:	f0 68       	ori	r31, 0x80	; 128
    1226:	9f 2e       	mov	r9, r31
    1228:	f3 fd       	sbrc	r31, 3
    122a:	1a c0       	rjmp	.+52     	; 0x1260 <vfprintf+0x494>
    122c:	85 2d       	mov	r24, r5
    122e:	90 e0       	ldi	r25, 0x00	; 0
    1230:	08 17       	cp	r16, r24
    1232:	19 07       	cpc	r17, r25
    1234:	a8 f4       	brcc	.+42     	; 0x1260 <vfprintf+0x494>
    1236:	b7 01       	movw	r22, r14
    1238:	80 e2       	ldi	r24, 0x20	; 32
    123a:	90 e0       	ldi	r25, 0x00	; 0
    123c:	0e 94 8e 0b 	call	0x171c	; 0x171c <fputc>
    1240:	5a 94       	dec	r5
    1242:	f4 cf       	rjmp	.-24     	; 0x122c <vfprintf+0x460>
    1244:	f6 01       	movw	r30, r12
    1246:	97 fc       	sbrc	r9, 7
    1248:	85 91       	lpm	r24, Z+
    124a:	97 fe       	sbrs	r9, 7
    124c:	81 91       	ld	r24, Z+
    124e:	6f 01       	movw	r12, r30
    1250:	b7 01       	movw	r22, r14
    1252:	90 e0       	ldi	r25, 0x00	; 0
    1254:	0e 94 8e 0b 	call	0x171c	; 0x171c <fputc>
    1258:	51 10       	cpse	r5, r1
    125a:	5a 94       	dec	r5
    125c:	01 50       	subi	r16, 0x01	; 1
    125e:	11 09       	sbc	r17, r1
    1260:	01 15       	cp	r16, r1
    1262:	11 05       	cpc	r17, r1
    1264:	79 f7       	brne	.-34     	; 0x1244 <vfprintf+0x478>
    1266:	f7 c0       	rjmp	.+494    	; 0x1456 <vfprintf+0x68a>
    1268:	84 36       	cpi	r24, 0x64	; 100
    126a:	11 f0       	breq	.+4      	; 0x1270 <vfprintf+0x4a4>
    126c:	89 36       	cpi	r24, 0x69	; 105
    126e:	61 f5       	brne	.+88     	; 0x12c8 <vfprintf+0x4fc>
    1270:	56 01       	movw	r10, r12
    1272:	97 fe       	sbrs	r9, 7
    1274:	09 c0       	rjmp	.+18     	; 0x1288 <vfprintf+0x4bc>
    1276:	24 e0       	ldi	r18, 0x04	; 4
    1278:	a2 0e       	add	r10, r18
    127a:	b1 1c       	adc	r11, r1
    127c:	f6 01       	movw	r30, r12
    127e:	60 81       	ld	r22, Z
    1280:	71 81       	ldd	r23, Z+1	; 0x01
    1282:	82 81       	ldd	r24, Z+2	; 0x02
    1284:	93 81       	ldd	r25, Z+3	; 0x03
    1286:	0a c0       	rjmp	.+20     	; 0x129c <vfprintf+0x4d0>
    1288:	f2 e0       	ldi	r31, 0x02	; 2
    128a:	af 0e       	add	r10, r31
    128c:	b1 1c       	adc	r11, r1
    128e:	f6 01       	movw	r30, r12
    1290:	60 81       	ld	r22, Z
    1292:	71 81       	ldd	r23, Z+1	; 0x01
    1294:	07 2e       	mov	r0, r23
    1296:	00 0c       	add	r0, r0
    1298:	88 0b       	sbc	r24, r24
    129a:	99 0b       	sbc	r25, r25
    129c:	f9 2d       	mov	r31, r9
    129e:	ff 76       	andi	r31, 0x6F	; 111
    12a0:	9f 2e       	mov	r9, r31
    12a2:	97 ff       	sbrs	r25, 7
    12a4:	09 c0       	rjmp	.+18     	; 0x12b8 <vfprintf+0x4ec>
    12a6:	90 95       	com	r25
    12a8:	80 95       	com	r24
    12aa:	70 95       	com	r23
    12ac:	61 95       	neg	r22
    12ae:	7f 4f       	sbci	r23, 0xFF	; 255
    12b0:	8f 4f       	sbci	r24, 0xFF	; 255
    12b2:	9f 4f       	sbci	r25, 0xFF	; 255
    12b4:	f0 68       	ori	r31, 0x80	; 128
    12b6:	9f 2e       	mov	r9, r31
    12b8:	2a e0       	ldi	r18, 0x0A	; 10
    12ba:	30 e0       	ldi	r19, 0x00	; 0
    12bc:	a3 01       	movw	r20, r6
    12be:	0e 94 ec 0b 	call	0x17d8	; 0x17d8 <__ultoa_invert>
    12c2:	c8 2e       	mov	r12, r24
    12c4:	c6 18       	sub	r12, r6
    12c6:	3f c0       	rjmp	.+126    	; 0x1346 <vfprintf+0x57a>
    12c8:	09 2d       	mov	r16, r9
    12ca:	85 37       	cpi	r24, 0x75	; 117
    12cc:	21 f4       	brne	.+8      	; 0x12d6 <vfprintf+0x50a>
    12ce:	0f 7e       	andi	r16, 0xEF	; 239
    12d0:	2a e0       	ldi	r18, 0x0A	; 10
    12d2:	30 e0       	ldi	r19, 0x00	; 0
    12d4:	1d c0       	rjmp	.+58     	; 0x1310 <vfprintf+0x544>
    12d6:	09 7f       	andi	r16, 0xF9	; 249
    12d8:	8f 36       	cpi	r24, 0x6F	; 111
    12da:	91 f0       	breq	.+36     	; 0x1300 <vfprintf+0x534>
    12dc:	18 f4       	brcc	.+6      	; 0x12e4 <vfprintf+0x518>
    12de:	88 35       	cpi	r24, 0x58	; 88
    12e0:	59 f0       	breq	.+22     	; 0x12f8 <vfprintf+0x52c>
    12e2:	c3 c0       	rjmp	.+390    	; 0x146a <vfprintf+0x69e>
    12e4:	80 37       	cpi	r24, 0x70	; 112
    12e6:	19 f0       	breq	.+6      	; 0x12ee <vfprintf+0x522>
    12e8:	88 37       	cpi	r24, 0x78	; 120
    12ea:	11 f0       	breq	.+4      	; 0x12f0 <vfprintf+0x524>
    12ec:	be c0       	rjmp	.+380    	; 0x146a <vfprintf+0x69e>
    12ee:	00 61       	ori	r16, 0x10	; 16
    12f0:	04 ff       	sbrs	r16, 4
    12f2:	09 c0       	rjmp	.+18     	; 0x1306 <vfprintf+0x53a>
    12f4:	04 60       	ori	r16, 0x04	; 4
    12f6:	07 c0       	rjmp	.+14     	; 0x1306 <vfprintf+0x53a>
    12f8:	94 fe       	sbrs	r9, 4
    12fa:	08 c0       	rjmp	.+16     	; 0x130c <vfprintf+0x540>
    12fc:	06 60       	ori	r16, 0x06	; 6
    12fe:	06 c0       	rjmp	.+12     	; 0x130c <vfprintf+0x540>
    1300:	28 e0       	ldi	r18, 0x08	; 8
    1302:	30 e0       	ldi	r19, 0x00	; 0
    1304:	05 c0       	rjmp	.+10     	; 0x1310 <vfprintf+0x544>
    1306:	20 e1       	ldi	r18, 0x10	; 16
    1308:	30 e0       	ldi	r19, 0x00	; 0
    130a:	02 c0       	rjmp	.+4      	; 0x1310 <vfprintf+0x544>
    130c:	20 e1       	ldi	r18, 0x10	; 16
    130e:	32 e0       	ldi	r19, 0x02	; 2
    1310:	56 01       	movw	r10, r12
    1312:	07 ff       	sbrs	r16, 7
    1314:	09 c0       	rjmp	.+18     	; 0x1328 <vfprintf+0x55c>
    1316:	84 e0       	ldi	r24, 0x04	; 4
    1318:	a8 0e       	add	r10, r24
    131a:	b1 1c       	adc	r11, r1
    131c:	f6 01       	movw	r30, r12
    131e:	60 81       	ld	r22, Z
    1320:	71 81       	ldd	r23, Z+1	; 0x01
    1322:	82 81       	ldd	r24, Z+2	; 0x02
    1324:	93 81       	ldd	r25, Z+3	; 0x03
    1326:	08 c0       	rjmp	.+16     	; 0x1338 <vfprintf+0x56c>
    1328:	f2 e0       	ldi	r31, 0x02	; 2
    132a:	af 0e       	add	r10, r31
    132c:	b1 1c       	adc	r11, r1
    132e:	f6 01       	movw	r30, r12
    1330:	60 81       	ld	r22, Z
    1332:	71 81       	ldd	r23, Z+1	; 0x01
    1334:	80 e0       	ldi	r24, 0x00	; 0
    1336:	90 e0       	ldi	r25, 0x00	; 0
    1338:	a3 01       	movw	r20, r6
    133a:	0e 94 ec 0b 	call	0x17d8	; 0x17d8 <__ultoa_invert>
    133e:	c8 2e       	mov	r12, r24
    1340:	c6 18       	sub	r12, r6
    1342:	0f 77       	andi	r16, 0x7F	; 127
    1344:	90 2e       	mov	r9, r16
    1346:	96 fe       	sbrs	r9, 6
    1348:	0b c0       	rjmp	.+22     	; 0x1360 <vfprintf+0x594>
    134a:	09 2d       	mov	r16, r9
    134c:	0e 7f       	andi	r16, 0xFE	; 254
    134e:	c1 16       	cp	r12, r17
    1350:	50 f4       	brcc	.+20     	; 0x1366 <vfprintf+0x59a>
    1352:	94 fe       	sbrs	r9, 4
    1354:	0a c0       	rjmp	.+20     	; 0x136a <vfprintf+0x59e>
    1356:	92 fc       	sbrc	r9, 2
    1358:	08 c0       	rjmp	.+16     	; 0x136a <vfprintf+0x59e>
    135a:	09 2d       	mov	r16, r9
    135c:	0e 7e       	andi	r16, 0xEE	; 238
    135e:	05 c0       	rjmp	.+10     	; 0x136a <vfprintf+0x59e>
    1360:	dc 2c       	mov	r13, r12
    1362:	09 2d       	mov	r16, r9
    1364:	03 c0       	rjmp	.+6      	; 0x136c <vfprintf+0x5a0>
    1366:	dc 2c       	mov	r13, r12
    1368:	01 c0       	rjmp	.+2      	; 0x136c <vfprintf+0x5a0>
    136a:	d1 2e       	mov	r13, r17
    136c:	04 ff       	sbrs	r16, 4
    136e:	0d c0       	rjmp	.+26     	; 0x138a <vfprintf+0x5be>
    1370:	fe 01       	movw	r30, r28
    1372:	ec 0d       	add	r30, r12
    1374:	f1 1d       	adc	r31, r1
    1376:	80 81       	ld	r24, Z
    1378:	80 33       	cpi	r24, 0x30	; 48
    137a:	11 f4       	brne	.+4      	; 0x1380 <vfprintf+0x5b4>
    137c:	09 7e       	andi	r16, 0xE9	; 233
    137e:	09 c0       	rjmp	.+18     	; 0x1392 <vfprintf+0x5c6>
    1380:	02 ff       	sbrs	r16, 2
    1382:	06 c0       	rjmp	.+12     	; 0x1390 <vfprintf+0x5c4>
    1384:	d3 94       	inc	r13
    1386:	d3 94       	inc	r13
    1388:	04 c0       	rjmp	.+8      	; 0x1392 <vfprintf+0x5c6>
    138a:	80 2f       	mov	r24, r16
    138c:	86 78       	andi	r24, 0x86	; 134
    138e:	09 f0       	breq	.+2      	; 0x1392 <vfprintf+0x5c6>
    1390:	d3 94       	inc	r13
    1392:	03 fd       	sbrc	r16, 3
    1394:	11 c0       	rjmp	.+34     	; 0x13b8 <vfprintf+0x5ec>
    1396:	00 ff       	sbrs	r16, 0
    1398:	06 c0       	rjmp	.+12     	; 0x13a6 <vfprintf+0x5da>
    139a:	1c 2d       	mov	r17, r12
    139c:	d5 14       	cp	r13, r5
    139e:	80 f4       	brcc	.+32     	; 0x13c0 <vfprintf+0x5f4>
    13a0:	15 0d       	add	r17, r5
    13a2:	1d 19       	sub	r17, r13
    13a4:	0d c0       	rjmp	.+26     	; 0x13c0 <vfprintf+0x5f4>
    13a6:	d5 14       	cp	r13, r5
    13a8:	58 f4       	brcc	.+22     	; 0x13c0 <vfprintf+0x5f4>
    13aa:	b7 01       	movw	r22, r14
    13ac:	80 e2       	ldi	r24, 0x20	; 32
    13ae:	90 e0       	ldi	r25, 0x00	; 0
    13b0:	0e 94 8e 0b 	call	0x171c	; 0x171c <fputc>
    13b4:	d3 94       	inc	r13
    13b6:	f7 cf       	rjmp	.-18     	; 0x13a6 <vfprintf+0x5da>
    13b8:	d5 14       	cp	r13, r5
    13ba:	10 f4       	brcc	.+4      	; 0x13c0 <vfprintf+0x5f4>
    13bc:	5d 18       	sub	r5, r13
    13be:	01 c0       	rjmp	.+2      	; 0x13c2 <vfprintf+0x5f6>
    13c0:	51 2c       	mov	r5, r1
    13c2:	04 ff       	sbrs	r16, 4
    13c4:	10 c0       	rjmp	.+32     	; 0x13e6 <vfprintf+0x61a>
    13c6:	b7 01       	movw	r22, r14
    13c8:	80 e3       	ldi	r24, 0x30	; 48
    13ca:	90 e0       	ldi	r25, 0x00	; 0
    13cc:	0e 94 8e 0b 	call	0x171c	; 0x171c <fputc>
    13d0:	02 ff       	sbrs	r16, 2
    13d2:	17 c0       	rjmp	.+46     	; 0x1402 <vfprintf+0x636>
    13d4:	01 fd       	sbrc	r16, 1
    13d6:	03 c0       	rjmp	.+6      	; 0x13de <vfprintf+0x612>
    13d8:	88 e7       	ldi	r24, 0x78	; 120
    13da:	90 e0       	ldi	r25, 0x00	; 0
    13dc:	02 c0       	rjmp	.+4      	; 0x13e2 <vfprintf+0x616>
    13de:	88 e5       	ldi	r24, 0x58	; 88
    13e0:	90 e0       	ldi	r25, 0x00	; 0
    13e2:	b7 01       	movw	r22, r14
    13e4:	0c c0       	rjmp	.+24     	; 0x13fe <vfprintf+0x632>
    13e6:	80 2f       	mov	r24, r16
    13e8:	86 78       	andi	r24, 0x86	; 134
    13ea:	59 f0       	breq	.+22     	; 0x1402 <vfprintf+0x636>
    13ec:	01 ff       	sbrs	r16, 1
    13ee:	02 c0       	rjmp	.+4      	; 0x13f4 <vfprintf+0x628>
    13f0:	8b e2       	ldi	r24, 0x2B	; 43
    13f2:	01 c0       	rjmp	.+2      	; 0x13f6 <vfprintf+0x62a>
    13f4:	80 e2       	ldi	r24, 0x20	; 32
    13f6:	07 fd       	sbrc	r16, 7
    13f8:	8d e2       	ldi	r24, 0x2D	; 45
    13fa:	b7 01       	movw	r22, r14
    13fc:	90 e0       	ldi	r25, 0x00	; 0
    13fe:	0e 94 8e 0b 	call	0x171c	; 0x171c <fputc>
    1402:	c1 16       	cp	r12, r17
    1404:	38 f4       	brcc	.+14     	; 0x1414 <vfprintf+0x648>
    1406:	b7 01       	movw	r22, r14
    1408:	80 e3       	ldi	r24, 0x30	; 48
    140a:	90 e0       	ldi	r25, 0x00	; 0
    140c:	0e 94 8e 0b 	call	0x171c	; 0x171c <fputc>
    1410:	11 50       	subi	r17, 0x01	; 1
    1412:	f7 cf       	rjmp	.-18     	; 0x1402 <vfprintf+0x636>
    1414:	ca 94       	dec	r12
    1416:	f3 01       	movw	r30, r6
    1418:	ec 0d       	add	r30, r12
    141a:	f1 1d       	adc	r31, r1
    141c:	80 81       	ld	r24, Z
    141e:	b7 01       	movw	r22, r14
    1420:	90 e0       	ldi	r25, 0x00	; 0
    1422:	0e 94 8e 0b 	call	0x171c	; 0x171c <fputc>
    1426:	c1 10       	cpse	r12, r1
    1428:	f5 cf       	rjmp	.-22     	; 0x1414 <vfprintf+0x648>
    142a:	15 c0       	rjmp	.+42     	; 0x1456 <vfprintf+0x68a>
    142c:	f4 e0       	ldi	r31, 0x04	; 4
    142e:	f5 15       	cp	r31, r5
    1430:	60 f5       	brcc	.+88     	; 0x148a <vfprintf+0x6be>
    1432:	84 e0       	ldi	r24, 0x04	; 4
    1434:	58 1a       	sub	r5, r24
    1436:	93 fe       	sbrs	r9, 3
    1438:	1f c0       	rjmp	.+62     	; 0x1478 <vfprintf+0x6ac>
    143a:	01 11       	cpse	r16, r1
    143c:	27 c0       	rjmp	.+78     	; 0x148c <vfprintf+0x6c0>
    143e:	2c 85       	ldd	r18, Y+12	; 0x0c
    1440:	23 ff       	sbrs	r18, 3
    1442:	2a c0       	rjmp	.+84     	; 0x1498 <vfprintf+0x6cc>
    1444:	0e e1       	ldi	r16, 0x1E	; 30
    1446:	11 e0       	ldi	r17, 0x01	; 1
    1448:	39 2d       	mov	r19, r9
    144a:	30 71       	andi	r19, 0x10	; 16
    144c:	93 2e       	mov	r9, r19
    144e:	f8 01       	movw	r30, r16
    1450:	84 91       	lpm	r24, Z
    1452:	81 11       	cpse	r24, r1
    1454:	24 c0       	rjmp	.+72     	; 0x149e <vfprintf+0x6d2>
    1456:	55 20       	and	r5, r5
    1458:	09 f4       	brne	.+2      	; 0x145c <vfprintf+0x690>
    145a:	e4 cc       	rjmp	.-1592   	; 0xe24 <vfprintf+0x58>
    145c:	b7 01       	movw	r22, r14
    145e:	80 e2       	ldi	r24, 0x20	; 32
    1460:	90 e0       	ldi	r25, 0x00	; 0
    1462:	0e 94 8e 0b 	call	0x171c	; 0x171c <fputc>
    1466:	5a 94       	dec	r5
    1468:	f6 cf       	rjmp	.-20     	; 0x1456 <vfprintf+0x68a>
    146a:	f7 01       	movw	r30, r14
    146c:	86 81       	ldd	r24, Z+6	; 0x06
    146e:	97 81       	ldd	r25, Z+7	; 0x07
    1470:	26 c0       	rjmp	.+76     	; 0x14be <vfprintf+0x6f2>
    1472:	8f ef       	ldi	r24, 0xFF	; 255
    1474:	9f ef       	ldi	r25, 0xFF	; 255
    1476:	23 c0       	rjmp	.+70     	; 0x14be <vfprintf+0x6f2>
    1478:	b7 01       	movw	r22, r14
    147a:	80 e2       	ldi	r24, 0x20	; 32
    147c:	90 e0       	ldi	r25, 0x00	; 0
    147e:	0e 94 8e 0b 	call	0x171c	; 0x171c <fputc>
    1482:	5a 94       	dec	r5
    1484:	51 10       	cpse	r5, r1
    1486:	f8 cf       	rjmp	.-16     	; 0x1478 <vfprintf+0x6ac>
    1488:	d8 cf       	rjmp	.-80     	; 0x143a <vfprintf+0x66e>
    148a:	51 2c       	mov	r5, r1
    148c:	b7 01       	movw	r22, r14
    148e:	80 2f       	mov	r24, r16
    1490:	90 e0       	ldi	r25, 0x00	; 0
    1492:	0e 94 8e 0b 	call	0x171c	; 0x171c <fputc>
    1496:	d3 cf       	rjmp	.-90     	; 0x143e <vfprintf+0x672>
    1498:	02 e2       	ldi	r16, 0x22	; 34
    149a:	11 e0       	ldi	r17, 0x01	; 1
    149c:	d5 cf       	rjmp	.-86     	; 0x1448 <vfprintf+0x67c>
    149e:	91 10       	cpse	r9, r1
    14a0:	80 52       	subi	r24, 0x20	; 32
    14a2:	b7 01       	movw	r22, r14
    14a4:	90 e0       	ldi	r25, 0x00	; 0
    14a6:	0e 94 8e 0b 	call	0x171c	; 0x171c <fputc>
    14aa:	0f 5f       	subi	r16, 0xFF	; 255
    14ac:	1f 4f       	sbci	r17, 0xFF	; 255
    14ae:	cf cf       	rjmp	.-98     	; 0x144e <vfprintf+0x682>
    14b0:	23 e0       	ldi	r18, 0x03	; 3
    14b2:	25 15       	cp	r18, r5
    14b4:	10 f4       	brcc	.+4      	; 0x14ba <vfprintf+0x6ee>
    14b6:	83 e0       	ldi	r24, 0x03	; 3
    14b8:	bd cf       	rjmp	.-134    	; 0x1434 <vfprintf+0x668>
    14ba:	51 2c       	mov	r5, r1
    14bc:	c0 cf       	rjmp	.-128    	; 0x143e <vfprintf+0x672>
    14be:	60 96       	adiw	r28, 0x10	; 16
    14c0:	e2 e1       	ldi	r30, 0x12	; 18
    14c2:	0c 94 85 0a 	jmp	0x150a	; 0x150a <__epilogue_restores__>

000014c6 <__tablejump2__>:
    14c6:	ee 0f       	add	r30, r30
    14c8:	ff 1f       	adc	r31, r31
    14ca:	05 90       	lpm	r0, Z+
    14cc:	f4 91       	lpm	r31, Z
    14ce:	e0 2d       	mov	r30, r0
    14d0:	09 94       	ijmp

000014d2 <__prologue_saves__>:
    14d2:	2f 92       	push	r2
    14d4:	3f 92       	push	r3
    14d6:	4f 92       	push	r4
    14d8:	5f 92       	push	r5
    14da:	6f 92       	push	r6
    14dc:	7f 92       	push	r7
    14de:	8f 92       	push	r8
    14e0:	9f 92       	push	r9
    14e2:	af 92       	push	r10
    14e4:	bf 92       	push	r11
    14e6:	cf 92       	push	r12
    14e8:	df 92       	push	r13
    14ea:	ef 92       	push	r14
    14ec:	ff 92       	push	r15
    14ee:	0f 93       	push	r16
    14f0:	1f 93       	push	r17
    14f2:	cf 93       	push	r28
    14f4:	df 93       	push	r29
    14f6:	cd b7       	in	r28, 0x3d	; 61
    14f8:	de b7       	in	r29, 0x3e	; 62
    14fa:	ca 1b       	sub	r28, r26
    14fc:	db 0b       	sbc	r29, r27
    14fe:	0f b6       	in	r0, 0x3f	; 63
    1500:	f8 94       	cli
    1502:	de bf       	out	0x3e, r29	; 62
    1504:	0f be       	out	0x3f, r0	; 63
    1506:	cd bf       	out	0x3d, r28	; 61
    1508:	09 94       	ijmp

0000150a <__epilogue_restores__>:
    150a:	2a 88       	ldd	r2, Y+18	; 0x12
    150c:	39 88       	ldd	r3, Y+17	; 0x11
    150e:	48 88       	ldd	r4, Y+16	; 0x10
    1510:	5f 84       	ldd	r5, Y+15	; 0x0f
    1512:	6e 84       	ldd	r6, Y+14	; 0x0e
    1514:	7d 84       	ldd	r7, Y+13	; 0x0d
    1516:	8c 84       	ldd	r8, Y+12	; 0x0c
    1518:	9b 84       	ldd	r9, Y+11	; 0x0b
    151a:	aa 84       	ldd	r10, Y+10	; 0x0a
    151c:	b9 84       	ldd	r11, Y+9	; 0x09
    151e:	c8 84       	ldd	r12, Y+8	; 0x08
    1520:	df 80       	ldd	r13, Y+7	; 0x07
    1522:	ee 80       	ldd	r14, Y+6	; 0x06
    1524:	fd 80       	ldd	r15, Y+5	; 0x05
    1526:	0c 81       	ldd	r16, Y+4	; 0x04
    1528:	1b 81       	ldd	r17, Y+3	; 0x03
    152a:	aa 81       	ldd	r26, Y+2	; 0x02
    152c:	b9 81       	ldd	r27, Y+1	; 0x01
    152e:	ce 0f       	add	r28, r30
    1530:	d1 1d       	adc	r29, r1
    1532:	0f b6       	in	r0, 0x3f	; 63
    1534:	f8 94       	cli
    1536:	de bf       	out	0x3e, r29	; 62
    1538:	0f be       	out	0x3f, r0	; 63
    153a:	cd bf       	out	0x3d, r28	; 61
    153c:	ed 01       	movw	r28, r26
    153e:	08 95       	ret

00001540 <__ftoa_engine>:
    1540:	28 30       	cpi	r18, 0x08	; 8
    1542:	08 f0       	brcs	.+2      	; 0x1546 <__ftoa_engine+0x6>
    1544:	27 e0       	ldi	r18, 0x07	; 7
    1546:	33 27       	eor	r19, r19
    1548:	da 01       	movw	r26, r20
    154a:	99 0f       	add	r25, r25
    154c:	31 1d       	adc	r19, r1
    154e:	87 fd       	sbrc	r24, 7
    1550:	91 60       	ori	r25, 0x01	; 1
    1552:	00 96       	adiw	r24, 0x00	; 0
    1554:	61 05       	cpc	r22, r1
    1556:	71 05       	cpc	r23, r1
    1558:	39 f4       	brne	.+14     	; 0x1568 <__ftoa_engine+0x28>
    155a:	32 60       	ori	r19, 0x02	; 2
    155c:	2e 5f       	subi	r18, 0xFE	; 254
    155e:	3d 93       	st	X+, r19
    1560:	30 e3       	ldi	r19, 0x30	; 48
    1562:	2a 95       	dec	r18
    1564:	e1 f7       	brne	.-8      	; 0x155e <__ftoa_engine+0x1e>
    1566:	08 95       	ret
    1568:	9f 3f       	cpi	r25, 0xFF	; 255
    156a:	30 f0       	brcs	.+12     	; 0x1578 <__ftoa_engine+0x38>
    156c:	80 38       	cpi	r24, 0x80	; 128
    156e:	71 05       	cpc	r23, r1
    1570:	61 05       	cpc	r22, r1
    1572:	09 f0       	breq	.+2      	; 0x1576 <__ftoa_engine+0x36>
    1574:	3c 5f       	subi	r19, 0xFC	; 252
    1576:	3c 5f       	subi	r19, 0xFC	; 252
    1578:	3d 93       	st	X+, r19
    157a:	91 30       	cpi	r25, 0x01	; 1
    157c:	08 f0       	brcs	.+2      	; 0x1580 <__ftoa_engine+0x40>
    157e:	80 68       	ori	r24, 0x80	; 128
    1580:	91 1d       	adc	r25, r1
    1582:	df 93       	push	r29
    1584:	cf 93       	push	r28
    1586:	1f 93       	push	r17
    1588:	0f 93       	push	r16
    158a:	ff 92       	push	r15
    158c:	ef 92       	push	r14
    158e:	19 2f       	mov	r17, r25
    1590:	98 7f       	andi	r25, 0xF8	; 248
    1592:	96 95       	lsr	r25
    1594:	e9 2f       	mov	r30, r25
    1596:	96 95       	lsr	r25
    1598:	96 95       	lsr	r25
    159a:	e9 0f       	add	r30, r25
    159c:	ff 27       	eor	r31, r31
    159e:	e0 58       	subi	r30, 0x80	; 128
    15a0:	fe 4f       	sbci	r31, 0xFE	; 254
    15a2:	99 27       	eor	r25, r25
    15a4:	33 27       	eor	r19, r19
    15a6:	ee 24       	eor	r14, r14
    15a8:	ff 24       	eor	r15, r15
    15aa:	a7 01       	movw	r20, r14
    15ac:	e7 01       	movw	r28, r14
    15ae:	05 90       	lpm	r0, Z+
    15b0:	08 94       	sec
    15b2:	07 94       	ror	r0
    15b4:	28 f4       	brcc	.+10     	; 0x15c0 <__ftoa_engine+0x80>
    15b6:	36 0f       	add	r19, r22
    15b8:	e7 1e       	adc	r14, r23
    15ba:	f8 1e       	adc	r15, r24
    15bc:	49 1f       	adc	r20, r25
    15be:	51 1d       	adc	r21, r1
    15c0:	66 0f       	add	r22, r22
    15c2:	77 1f       	adc	r23, r23
    15c4:	88 1f       	adc	r24, r24
    15c6:	99 1f       	adc	r25, r25
    15c8:	06 94       	lsr	r0
    15ca:	a1 f7       	brne	.-24     	; 0x15b4 <__ftoa_engine+0x74>
    15cc:	05 90       	lpm	r0, Z+
    15ce:	07 94       	ror	r0
    15d0:	28 f4       	brcc	.+10     	; 0x15dc <__ftoa_engine+0x9c>
    15d2:	e7 0e       	add	r14, r23
    15d4:	f8 1e       	adc	r15, r24
    15d6:	49 1f       	adc	r20, r25
    15d8:	56 1f       	adc	r21, r22
    15da:	c1 1d       	adc	r28, r1
    15dc:	77 0f       	add	r23, r23
    15de:	88 1f       	adc	r24, r24
    15e0:	99 1f       	adc	r25, r25
    15e2:	66 1f       	adc	r22, r22
    15e4:	06 94       	lsr	r0
    15e6:	a1 f7       	brne	.-24     	; 0x15d0 <__ftoa_engine+0x90>
    15e8:	05 90       	lpm	r0, Z+
    15ea:	07 94       	ror	r0
    15ec:	28 f4       	brcc	.+10     	; 0x15f8 <__ftoa_engine+0xb8>
    15ee:	f8 0e       	add	r15, r24
    15f0:	49 1f       	adc	r20, r25
    15f2:	56 1f       	adc	r21, r22
    15f4:	c7 1f       	adc	r28, r23
    15f6:	d1 1d       	adc	r29, r1
    15f8:	88 0f       	add	r24, r24
    15fa:	99 1f       	adc	r25, r25
    15fc:	66 1f       	adc	r22, r22
    15fe:	77 1f       	adc	r23, r23
    1600:	06 94       	lsr	r0
    1602:	a1 f7       	brne	.-24     	; 0x15ec <__ftoa_engine+0xac>
    1604:	05 90       	lpm	r0, Z+
    1606:	07 94       	ror	r0
    1608:	20 f4       	brcc	.+8      	; 0x1612 <__ftoa_engine+0xd2>
    160a:	49 0f       	add	r20, r25
    160c:	56 1f       	adc	r21, r22
    160e:	c7 1f       	adc	r28, r23
    1610:	d8 1f       	adc	r29, r24
    1612:	99 0f       	add	r25, r25
    1614:	66 1f       	adc	r22, r22
    1616:	77 1f       	adc	r23, r23
    1618:	88 1f       	adc	r24, r24
    161a:	06 94       	lsr	r0
    161c:	a9 f7       	brne	.-22     	; 0x1608 <__ftoa_engine+0xc8>
    161e:	84 91       	lpm	r24, Z
    1620:	10 95       	com	r17
    1622:	17 70       	andi	r17, 0x07	; 7
    1624:	41 f0       	breq	.+16     	; 0x1636 <__ftoa_engine+0xf6>
    1626:	d6 95       	lsr	r29
    1628:	c7 95       	ror	r28
    162a:	57 95       	ror	r21
    162c:	47 95       	ror	r20
    162e:	f7 94       	ror	r15
    1630:	e7 94       	ror	r14
    1632:	1a 95       	dec	r17
    1634:	c1 f7       	brne	.-16     	; 0x1626 <__ftoa_engine+0xe6>
    1636:	e6 e2       	ldi	r30, 0x26	; 38
    1638:	f1 e0       	ldi	r31, 0x01	; 1
    163a:	68 94       	set
    163c:	15 90       	lpm	r1, Z+
    163e:	15 91       	lpm	r17, Z+
    1640:	35 91       	lpm	r19, Z+
    1642:	65 91       	lpm	r22, Z+
    1644:	95 91       	lpm	r25, Z+
    1646:	05 90       	lpm	r0, Z+
    1648:	7f e2       	ldi	r23, 0x2F	; 47
    164a:	73 95       	inc	r23
    164c:	e1 18       	sub	r14, r1
    164e:	f1 0a       	sbc	r15, r17
    1650:	43 0b       	sbc	r20, r19
    1652:	56 0b       	sbc	r21, r22
    1654:	c9 0b       	sbc	r28, r25
    1656:	d0 09       	sbc	r29, r0
    1658:	c0 f7       	brcc	.-16     	; 0x164a <__ftoa_engine+0x10a>
    165a:	e1 0c       	add	r14, r1
    165c:	f1 1e       	adc	r15, r17
    165e:	43 1f       	adc	r20, r19
    1660:	56 1f       	adc	r21, r22
    1662:	c9 1f       	adc	r28, r25
    1664:	d0 1d       	adc	r29, r0
    1666:	7e f4       	brtc	.+30     	; 0x1686 <__ftoa_engine+0x146>
    1668:	70 33       	cpi	r23, 0x30	; 48
    166a:	11 f4       	brne	.+4      	; 0x1670 <__ftoa_engine+0x130>
    166c:	8a 95       	dec	r24
    166e:	e6 cf       	rjmp	.-52     	; 0x163c <__ftoa_engine+0xfc>
    1670:	e8 94       	clt
    1672:	01 50       	subi	r16, 0x01	; 1
    1674:	30 f0       	brcs	.+12     	; 0x1682 <__ftoa_engine+0x142>
    1676:	08 0f       	add	r16, r24
    1678:	0a f4       	brpl	.+2      	; 0x167c <__ftoa_engine+0x13c>
    167a:	00 27       	eor	r16, r16
    167c:	02 17       	cp	r16, r18
    167e:	08 f4       	brcc	.+2      	; 0x1682 <__ftoa_engine+0x142>
    1680:	20 2f       	mov	r18, r16
    1682:	23 95       	inc	r18
    1684:	02 2f       	mov	r16, r18
    1686:	7a 33       	cpi	r23, 0x3A	; 58
    1688:	28 f0       	brcs	.+10     	; 0x1694 <__ftoa_engine+0x154>
    168a:	79 e3       	ldi	r23, 0x39	; 57
    168c:	7d 93       	st	X+, r23
    168e:	2a 95       	dec	r18
    1690:	e9 f7       	brne	.-6      	; 0x168c <__ftoa_engine+0x14c>
    1692:	10 c0       	rjmp	.+32     	; 0x16b4 <__ftoa_engine+0x174>
    1694:	7d 93       	st	X+, r23
    1696:	2a 95       	dec	r18
    1698:	89 f6       	brne	.-94     	; 0x163c <__ftoa_engine+0xfc>
    169a:	06 94       	lsr	r0
    169c:	97 95       	ror	r25
    169e:	67 95       	ror	r22
    16a0:	37 95       	ror	r19
    16a2:	17 95       	ror	r17
    16a4:	17 94       	ror	r1
    16a6:	e1 18       	sub	r14, r1
    16a8:	f1 0a       	sbc	r15, r17
    16aa:	43 0b       	sbc	r20, r19
    16ac:	56 0b       	sbc	r21, r22
    16ae:	c9 0b       	sbc	r28, r25
    16b0:	d0 09       	sbc	r29, r0
    16b2:	98 f0       	brcs	.+38     	; 0x16da <__ftoa_engine+0x19a>
    16b4:	23 95       	inc	r18
    16b6:	7e 91       	ld	r23, -X
    16b8:	73 95       	inc	r23
    16ba:	7a 33       	cpi	r23, 0x3A	; 58
    16bc:	08 f0       	brcs	.+2      	; 0x16c0 <__ftoa_engine+0x180>
    16be:	70 e3       	ldi	r23, 0x30	; 48
    16c0:	7c 93       	st	X, r23
    16c2:	20 13       	cpse	r18, r16
    16c4:	b8 f7       	brcc	.-18     	; 0x16b4 <__ftoa_engine+0x174>
    16c6:	7e 91       	ld	r23, -X
    16c8:	70 61       	ori	r23, 0x10	; 16
    16ca:	7d 93       	st	X+, r23
    16cc:	30 f0       	brcs	.+12     	; 0x16da <__ftoa_engine+0x19a>
    16ce:	83 95       	inc	r24
    16d0:	71 e3       	ldi	r23, 0x31	; 49
    16d2:	7d 93       	st	X+, r23
    16d4:	70 e3       	ldi	r23, 0x30	; 48
    16d6:	2a 95       	dec	r18
    16d8:	e1 f7       	brne	.-8      	; 0x16d2 <__ftoa_engine+0x192>
    16da:	11 24       	eor	r1, r1
    16dc:	ef 90       	pop	r14
    16de:	ff 90       	pop	r15
    16e0:	0f 91       	pop	r16
    16e2:	1f 91       	pop	r17
    16e4:	cf 91       	pop	r28
    16e6:	df 91       	pop	r29
    16e8:	99 27       	eor	r25, r25
    16ea:	87 fd       	sbrc	r24, 7
    16ec:	90 95       	com	r25
    16ee:	08 95       	ret

000016f0 <strnlen_P>:
    16f0:	fc 01       	movw	r30, r24
    16f2:	05 90       	lpm	r0, Z+
    16f4:	61 50       	subi	r22, 0x01	; 1
    16f6:	70 40       	sbci	r23, 0x00	; 0
    16f8:	01 10       	cpse	r0, r1
    16fa:	d8 f7       	brcc	.-10     	; 0x16f2 <strnlen_P+0x2>
    16fc:	80 95       	com	r24
    16fe:	90 95       	com	r25
    1700:	8e 0f       	add	r24, r30
    1702:	9f 1f       	adc	r25, r31
    1704:	08 95       	ret

00001706 <strnlen>:
    1706:	fc 01       	movw	r30, r24
    1708:	61 50       	subi	r22, 0x01	; 1
    170a:	70 40       	sbci	r23, 0x00	; 0
    170c:	01 90       	ld	r0, Z+
    170e:	01 10       	cpse	r0, r1
    1710:	d8 f7       	brcc	.-10     	; 0x1708 <strnlen+0x2>
    1712:	80 95       	com	r24
    1714:	90 95       	com	r25
    1716:	8e 0f       	add	r24, r30
    1718:	9f 1f       	adc	r25, r31
    171a:	08 95       	ret

0000171c <fputc>:
    171c:	0f 93       	push	r16
    171e:	1f 93       	push	r17
    1720:	cf 93       	push	r28
    1722:	df 93       	push	r29
    1724:	fb 01       	movw	r30, r22
    1726:	23 81       	ldd	r18, Z+3	; 0x03
    1728:	21 fd       	sbrc	r18, 1
    172a:	03 c0       	rjmp	.+6      	; 0x1732 <fputc+0x16>
    172c:	8f ef       	ldi	r24, 0xFF	; 255
    172e:	9f ef       	ldi	r25, 0xFF	; 255
    1730:	2c c0       	rjmp	.+88     	; 0x178a <fputc+0x6e>
    1732:	22 ff       	sbrs	r18, 2
    1734:	16 c0       	rjmp	.+44     	; 0x1762 <fputc+0x46>
    1736:	46 81       	ldd	r20, Z+6	; 0x06
    1738:	57 81       	ldd	r21, Z+7	; 0x07
    173a:	24 81       	ldd	r18, Z+4	; 0x04
    173c:	35 81       	ldd	r19, Z+5	; 0x05
    173e:	42 17       	cp	r20, r18
    1740:	53 07       	cpc	r21, r19
    1742:	44 f4       	brge	.+16     	; 0x1754 <fputc+0x38>
    1744:	a0 81       	ld	r26, Z
    1746:	b1 81       	ldd	r27, Z+1	; 0x01
    1748:	9d 01       	movw	r18, r26
    174a:	2f 5f       	subi	r18, 0xFF	; 255
    174c:	3f 4f       	sbci	r19, 0xFF	; 255
    174e:	31 83       	std	Z+1, r19	; 0x01
    1750:	20 83       	st	Z, r18
    1752:	8c 93       	st	X, r24
    1754:	26 81       	ldd	r18, Z+6	; 0x06
    1756:	37 81       	ldd	r19, Z+7	; 0x07
    1758:	2f 5f       	subi	r18, 0xFF	; 255
    175a:	3f 4f       	sbci	r19, 0xFF	; 255
    175c:	37 83       	std	Z+7, r19	; 0x07
    175e:	26 83       	std	Z+6, r18	; 0x06
    1760:	14 c0       	rjmp	.+40     	; 0x178a <fputc+0x6e>
    1762:	8b 01       	movw	r16, r22
    1764:	ec 01       	movw	r28, r24
    1766:	fb 01       	movw	r30, r22
    1768:	00 84       	ldd	r0, Z+8	; 0x08
    176a:	f1 85       	ldd	r31, Z+9	; 0x09
    176c:	e0 2d       	mov	r30, r0
    176e:	09 95       	icall
    1770:	89 2b       	or	r24, r25
    1772:	e1 f6       	brne	.-72     	; 0x172c <fputc+0x10>
    1774:	d8 01       	movw	r26, r16
    1776:	16 96       	adiw	r26, 0x06	; 6
    1778:	8d 91       	ld	r24, X+
    177a:	9c 91       	ld	r25, X
    177c:	17 97       	sbiw	r26, 0x07	; 7
    177e:	01 96       	adiw	r24, 0x01	; 1
    1780:	17 96       	adiw	r26, 0x07	; 7
    1782:	9c 93       	st	X, r25
    1784:	8e 93       	st	-X, r24
    1786:	16 97       	sbiw	r26, 0x06	; 6
    1788:	ce 01       	movw	r24, r28
    178a:	df 91       	pop	r29
    178c:	cf 91       	pop	r28
    178e:	1f 91       	pop	r17
    1790:	0f 91       	pop	r16
    1792:	08 95       	ret

00001794 <sprintf>:
    1794:	ae e0       	ldi	r26, 0x0E	; 14
    1796:	b0 e0       	ldi	r27, 0x00	; 0
    1798:	e0 ed       	ldi	r30, 0xD0	; 208
    179a:	fb e0       	ldi	r31, 0x0B	; 11
    179c:	0c 94 77 0a 	jmp	0x14ee	; 0x14ee <__prologue_saves__+0x1c>
    17a0:	0d 89       	ldd	r16, Y+21	; 0x15
    17a2:	1e 89       	ldd	r17, Y+22	; 0x16
    17a4:	86 e0       	ldi	r24, 0x06	; 6
    17a6:	8c 83       	std	Y+4, r24	; 0x04
    17a8:	1a 83       	std	Y+2, r17	; 0x02
    17aa:	09 83       	std	Y+1, r16	; 0x01
    17ac:	8f ef       	ldi	r24, 0xFF	; 255
    17ae:	9f e7       	ldi	r25, 0x7F	; 127
    17b0:	9e 83       	std	Y+6, r25	; 0x06
    17b2:	8d 83       	std	Y+5, r24	; 0x05
    17b4:	ae 01       	movw	r20, r28
    17b6:	47 5e       	subi	r20, 0xE7	; 231
    17b8:	5f 4f       	sbci	r21, 0xFF	; 255
    17ba:	6f 89       	ldd	r22, Y+23	; 0x17
    17bc:	78 8d       	ldd	r23, Y+24	; 0x18
    17be:	ce 01       	movw	r24, r28
    17c0:	01 96       	adiw	r24, 0x01	; 1
    17c2:	0e 94 e6 06 	call	0xdcc	; 0xdcc <vfprintf>
    17c6:	ef 81       	ldd	r30, Y+7	; 0x07
    17c8:	f8 85       	ldd	r31, Y+8	; 0x08
    17ca:	e0 0f       	add	r30, r16
    17cc:	f1 1f       	adc	r31, r17
    17ce:	10 82       	st	Z, r1
    17d0:	2e 96       	adiw	r28, 0x0e	; 14
    17d2:	e4 e0       	ldi	r30, 0x04	; 4
    17d4:	0c 94 93 0a 	jmp	0x1526	; 0x1526 <__epilogue_restores__+0x1c>

000017d8 <__ultoa_invert>:
    17d8:	fa 01       	movw	r30, r20
    17da:	aa 27       	eor	r26, r26
    17dc:	28 30       	cpi	r18, 0x08	; 8
    17de:	51 f1       	breq	.+84     	; 0x1834 <__ultoa_invert+0x5c>
    17e0:	20 31       	cpi	r18, 0x10	; 16
    17e2:	81 f1       	breq	.+96     	; 0x1844 <__ultoa_invert+0x6c>
    17e4:	e8 94       	clt
    17e6:	6f 93       	push	r22
    17e8:	6e 7f       	andi	r22, 0xFE	; 254
    17ea:	6e 5f       	subi	r22, 0xFE	; 254
    17ec:	7f 4f       	sbci	r23, 0xFF	; 255
    17ee:	8f 4f       	sbci	r24, 0xFF	; 255
    17f0:	9f 4f       	sbci	r25, 0xFF	; 255
    17f2:	af 4f       	sbci	r26, 0xFF	; 255
    17f4:	b1 e0       	ldi	r27, 0x01	; 1
    17f6:	3e d0       	rcall	.+124    	; 0x1874 <__ultoa_invert+0x9c>
    17f8:	b4 e0       	ldi	r27, 0x04	; 4
    17fa:	3c d0       	rcall	.+120    	; 0x1874 <__ultoa_invert+0x9c>
    17fc:	67 0f       	add	r22, r23
    17fe:	78 1f       	adc	r23, r24
    1800:	89 1f       	adc	r24, r25
    1802:	9a 1f       	adc	r25, r26
    1804:	a1 1d       	adc	r26, r1
    1806:	68 0f       	add	r22, r24
    1808:	79 1f       	adc	r23, r25
    180a:	8a 1f       	adc	r24, r26
    180c:	91 1d       	adc	r25, r1
    180e:	a1 1d       	adc	r26, r1
    1810:	6a 0f       	add	r22, r26
    1812:	71 1d       	adc	r23, r1
    1814:	81 1d       	adc	r24, r1
    1816:	91 1d       	adc	r25, r1
    1818:	a1 1d       	adc	r26, r1
    181a:	20 d0       	rcall	.+64     	; 0x185c <__ultoa_invert+0x84>
    181c:	09 f4       	brne	.+2      	; 0x1820 <__ultoa_invert+0x48>
    181e:	68 94       	set
    1820:	3f 91       	pop	r19
    1822:	2a e0       	ldi	r18, 0x0A	; 10
    1824:	26 9f       	mul	r18, r22
    1826:	11 24       	eor	r1, r1
    1828:	30 19       	sub	r19, r0
    182a:	30 5d       	subi	r19, 0xD0	; 208
    182c:	31 93       	st	Z+, r19
    182e:	de f6       	brtc	.-74     	; 0x17e6 <__ultoa_invert+0xe>
    1830:	cf 01       	movw	r24, r30
    1832:	08 95       	ret
    1834:	46 2f       	mov	r20, r22
    1836:	47 70       	andi	r20, 0x07	; 7
    1838:	40 5d       	subi	r20, 0xD0	; 208
    183a:	41 93       	st	Z+, r20
    183c:	b3 e0       	ldi	r27, 0x03	; 3
    183e:	0f d0       	rcall	.+30     	; 0x185e <__ultoa_invert+0x86>
    1840:	c9 f7       	brne	.-14     	; 0x1834 <__ultoa_invert+0x5c>
    1842:	f6 cf       	rjmp	.-20     	; 0x1830 <__ultoa_invert+0x58>
    1844:	46 2f       	mov	r20, r22
    1846:	4f 70       	andi	r20, 0x0F	; 15
    1848:	40 5d       	subi	r20, 0xD0	; 208
    184a:	4a 33       	cpi	r20, 0x3A	; 58
    184c:	18 f0       	brcs	.+6      	; 0x1854 <__ultoa_invert+0x7c>
    184e:	49 5d       	subi	r20, 0xD9	; 217
    1850:	31 fd       	sbrc	r19, 1
    1852:	40 52       	subi	r20, 0x20	; 32
    1854:	41 93       	st	Z+, r20
    1856:	02 d0       	rcall	.+4      	; 0x185c <__ultoa_invert+0x84>
    1858:	a9 f7       	brne	.-22     	; 0x1844 <__ultoa_invert+0x6c>
    185a:	ea cf       	rjmp	.-44     	; 0x1830 <__ultoa_invert+0x58>
    185c:	b4 e0       	ldi	r27, 0x04	; 4
    185e:	a6 95       	lsr	r26
    1860:	97 95       	ror	r25
    1862:	87 95       	ror	r24
    1864:	77 95       	ror	r23
    1866:	67 95       	ror	r22
    1868:	ba 95       	dec	r27
    186a:	c9 f7       	brne	.-14     	; 0x185e <__ultoa_invert+0x86>
    186c:	00 97       	sbiw	r24, 0x00	; 0
    186e:	61 05       	cpc	r22, r1
    1870:	71 05       	cpc	r23, r1
    1872:	08 95       	ret
    1874:	9b 01       	movw	r18, r22
    1876:	ac 01       	movw	r20, r24
    1878:	0a 2e       	mov	r0, r26
    187a:	06 94       	lsr	r0
    187c:	57 95       	ror	r21
    187e:	47 95       	ror	r20
    1880:	37 95       	ror	r19
    1882:	27 95       	ror	r18
    1884:	ba 95       	dec	r27
    1886:	c9 f7       	brne	.-14     	; 0x187a <__ultoa_invert+0xa2>
    1888:	62 0f       	add	r22, r18
    188a:	73 1f       	adc	r23, r19
    188c:	84 1f       	adc	r24, r20
    188e:	95 1f       	adc	r25, r21
    1890:	a0 1d       	adc	r26, r0
    1892:	08 95       	ret

00001894 <_exit>:
    1894:	f8 94       	cli

00001896 <__stop_program>:
    1896:	ff cf       	rjmp	.-2      	; 0x1896 <__stop_program>
